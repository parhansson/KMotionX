<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>Mach3 Plugin - Probe Setup</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Mach3 Plugin - Probe Setup</h1>

<p>The following describes the use of DynoMotion Probing with 
Mach3. Probing in Mach3 is selected by using the G31 code. Such as:</p>

<p><strong>G31 Z-4 F40</strong></p>

<p>This example command line would cause a motion from the current position to a absolute 
position of z = -4 at a feed rate of 40 units/minute and stop as soon as the 
probe input becomes active.</p>

<p>When the probe input becomes active the current positions of all axes will be captured and the 
motion will decelerate to a stop in a controlled manner. Mach3 variables 
2000-2005 will be filled with the captured position.</p>

<p>The following sequence might be used to perform a probe and then perform a move relative to 
the captured Z position.</p>

<p><strong>G31 Z-4.0 F40 (Probe in Z)<br />
G1 Z #2002 (move back to trip point)<br />
M30</strong></p>

<p><em>Note: If the Probe input is already active at the beginning of the probe, or the motion 
completes without the Probe input ever becoming active, an error will be 
displayed and G Code execution wi/l stop.</em></p>

<p><em><strong>Required KMotion/KFLOP User Program</strong></em></p>

<p>In order to perform Probing, the the Notify User Program must be configured to properly 
handle message 20000 and selected in the Mach3 Plugin configuration.</p>

<p><img  src="ConfigProbe.PNG" width="767" height="492" alt="ConfigProbe" /></p>

<p>Add the message handler shown below to the Notify program for your system. During probing 
the DynoMotion Plugin sends a Notification 20000 message to the configured 
KMotion/KFlop Notify User Program. </p>

<p>The message handler must:</p>

<p>#1 set status (user var 62) to zero </p>
<p>#2 wait for the probe to become active</p>
<p>#3 sample the current positions of the defined axes (as doubles into 50-61)</p>
<p>#4 set status to or 2 depending on if the probe was ever inactive</p>
<p>#5 feedhold the system</p>
<p>#6 exit </p>

<p>Note defines below in PC-DSP.h should be used to symbolically reference the persist.UserData 
Variables.</p>

<pre>
	<code class="language-c">
	#define MACH3_PROBE_STATUS_VAR 62
	#define MACH3_PROBE_RESULTS_VAR 50
	</code>
</pre>

<p>In most cases the only modification required will be the defined bit number and active state.</p>

<p>However any number of other techniques might be used such as monitoring analog inputs, or capturing 
other variables such as encoder positions.</p>

<p><em><strong>Excerpt from Example File: &lt;Install Dir&gt;\C Programs\NotifyProbeMach3.c</strong></em></p>

<pre>
	<code class="language-c"> 
	// handles probing
	//
	// flag is 0 - while watching for probe hit
	// flag is 1 - if probe was already set from start
	// flag is 2 - after successful probe hit
	// flag is 3 - Tells Plugin to upload status (3) to
	// DRO 1100 and let User handle the error
	//
	// returns the captured results in User Variables
	// X - 50+51
	// Y - 52+53
	// Z - 54+55
	// A - 56+57
	// B - 58+59
	// C - 60+61
	// status result 62

	#define PROBE_BIT 0
	#define PROBE_ACTIVE_STATE 1
	#define PROBE_ERROR_HANDLING 0 	// 0 Stops Mach3 on probe error
//	#define PROBE_ERROR_HANDLING 3 // 3 User must query DRO 1100 and handle error

	if (msg==20000) 
	{
 		double *d = (double *)&amp;persist.UserData[MACH3_PROBE_RESULTS_VAR];
		int flag=1;
	
		persist.UserData[MACH3_PROBE_STATUS_VAR]=PROBE_ERROR_HANDLING;
	
		while (ReadBit(PROBE_BIT)!=PROBE_ACTIVE_STATE)
		{ 
			flag=2;
			WaitNextTimeSlice();
 	}
	
	if (CS0_axis_x&gt;=0) d[0]=chan[CS0_axis_x].Dest;
	if (CS0_axis_y&gt;=0) d[1]=chan[CS0_axis_y].Dest;
	if (CS0_axis_z&gt;=0) d[2]=chan[CS0_axis_z].Dest;
	if (CS0_axis_a&gt;=0) d[3]=chan[CS0_axis_a].Dest;
	if (CS0_axis_b&gt;=0) d[4]=chan[CS0_axis_b].Dest;
	if (CS0_axis_c&gt;=0) d[5]=chan[CS0_axis_c].Dest;
	
	persist.UserData[MACH3_PROBE_STATUS_VAR]=flag;
	StopCoordinatedMotion();
 }
}
	</code>
</pre>

<p>&nbsp;</p>
	</div>
</body>

</html>