<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>Mach3 Plugin - with Encoders</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Mach3 Plugin - with Encoders</h1>

<p>The following describes the use of linear glass scale encoders or rotary shaft encoders with 
Mach3. The setup process described apply for KFLOP/Kogna operating in open loop 
mode with encoders as well as <a href="../ClosedLoopStep/ClosedLoopStepper.htm">
closed loop control.</a></p>

<p>KFLOP/Kogna should first be wired and configured such that the encoders are functional and 
scaled (using the InputGain0 parameter) so that the encoder counts match the 
commanded position in units of &#956;steps. To verify that this is properly 
configured the KMotion.exe <a href="../StepScreen/StepScreen.htm">Step Response 
Screen</a> may be used for verification. The Plot of Position Error should 
show small errors (typically &lt;200 &#956;Steps) for a Move Plot if properly 
configured.</p>

<p>Since the encoder position is already scaledwithin KFLOP/Kogna to match the &#956;steps/Unit 
scale of the motor, the Mach3 Encoder resolution should be set to the same value 
as the Motor &quot;Tuning&quot; as shown below. The Encoder/MPG screen is opened 
using the Config|Ports and Pins Menu. The Port and Pin definitions are not 
relevant when using KFLOP/Kogna  and should be set to some unused Port.</p>

<p><img src="MotorTuningResolution.PNG" width="680" height="427" alt="MotorTuningResolution" /></p>

<p><img src="EncoderResolution.PNG" width="713" height="423" alt="EncoderResolution" /></p>

<h2><a name="Zero_Buttons">Zero Buttons</a></h2>

<p>Mach3 &quot;Zeros&quot; a DRO by adjusting the currently selected work offset such that the DRO will read 
zero. Since the glass scales are the best reference, the commanded 
position is adjusted to match the encoder position, before Mach3 is told to 
compute the new work offset. </p>

<p><img src="ZeroX.PNG" width="92" height="83" alt="ZeroX" /></p>

<pre>
	NotifyPlugins (10100) 	'tell KFlop to set command to encoder
	Sleep 300	 	'make sure mach updates
	DoOEMButton (1008) 	'calculate work offset
</pre>

<p><img src="ZeroY.PNG" width="92" height="87" alt="ZeroY" /></p>

<pre>
	NotifyPlugins (10101) 	'tell KFlop to set command to encoder
	Sleep 300		'make sure mach updates
	DoOEMButton (1009)	'calculate work offset
</pre>

<p><img src="ZeroZ.PNG" width="92" height="87" alt="ZeroZ" /></p>

<pre>
	NotifyPlugins (10102) 	'tell KFlop to set command to encoder
	Sleep 300 		'make sure mach updates
	DoOEMButton (1010)	'calculate work offset
</pre>

<p>In the <strong>Config|Config Plugins|Dynomotion</strong> set an appropriate KFLOP/Kogna  User Program that 
will process the NotifyPlugin Message Codes to set KFLOP's/Kogna's  internal Commanded 
Destination to the Current Encoder Positions. Typical program for 3 axes 
shown below. Note that the Message code is defined to be passed to the 
KFlop User Program via persist.UserData[6]</p>

<p><img src="ConfigNotifyProgram.PNG" width="554" height="93" alt="ConfigNotifyProgram" /></p>

<h2>Example File: &lt;Install Dir&gt;\C Programs\NotifyZeroEncoderMach3.c</h2>

<pre>
	<code class="language-c">
	#include &quot;KMotionDef.h&quot;
	//Plugin calls for Mach3 NotifyPlugins Commands
	#define X 0
	#define Y 1
	#define Z 2

	main()
	{
		int msg = persist.UserData[6]; // Mach3 notify Message 10000-10999
		
		printf(&quot;Mach3 Notify Call, Message = %d\n&quot;,msg);
		
		if (msg==10100)
		{
			// adjust the commanded position to match the glass scale encoder
			DisableAxis(X);
			EnableAxisDest(X,chan[X].Position);
		}
		if (msg==10101)
		{
			// adjust the commanded position to match the glass scale encoder
			DisableAxis(Y);
			EnableAxisDest(Y,chan[Y].Position);
		}
		if (msg==10102)
		{
			// adjust the commanded position to match the glass scale encoder
			DisableAxis(Z);
			EnableAxisDest(Z,chan[Z].Position);
		}
	}
	</code>
</pre>

<h2>REF Buttons</h2>

<p>Mach3 REF buttons are used to set the initial Machine coordinates either by simply Zeroing them or 
performing a home operation into a switch.</p>

<p>The REF X, REF Y, REF Z etc... buttons may require editing using a screen editor. We 
recommend the one written by Klaus Dietz.</p>

<p><img src="KlausAbout.PNG" width="402" height="328"></p>

<p>The Ref buttons should be edited to perform the standard Mach3 Ref operations. See the 
settings selected for the Ref buttons shown below when using Klaus' free Mach 
Screen Editor. The standard Ref operations for Mach3 is to request the 
Plugin to perform the Home Operation (actually labeled purge in the plugin).</p>

<p><img src="XRef.PNG" width="62" height="67"></p>

<p><img src="KlausRefX.PNG" width="288" height="175"></p>

<p><img src="YRef.PNG" width="63" height="67"></p>

<p><img src="KlausRefY.PNG" width="288" height="175"></p>

<p><img src="ZRef.PNG" width="63" height="67"></p>

<p><img src="KlausRefZ.PNG" width="288" height="175"></p>

<p><a name="HomeEncoder"></a>The Dynomotion Plugin passes these Home requests to 
KFLOP/Kogna to handle with a Home User Program. In the <strong>Config|Config 
Plugins|Dynomotion</strong> set an appropriate KFLOP/Kogna  User Home Program. A <strong>
flag</strong> variable is also passed to tell which axis is to be homed (Note that 
the flags is defined to be passed to the KFLOP/Kogna  User Program via 
persist.UserData[5]). In the case with encoders, both the Encoder 
Position and the Commanded Destination should be zeroed. Prior to 
Zeroing if any homing motion (to a switch for example - See: SimpleHome3Axis.c 
in the C Programs directory) may also be added into the program.</p>

<p><strong>Note: </strong>if Homing Inputs are enabled in Mach3 | Config | Ports and Pins | Input Signals | X Home, 
Y Home, Z Home, A Home, B Home, C Home then Mach 3 will NOT call the Plugin to 
do Homing. Please make sure these Inputs are NOT enabled.</p>

<p><img src="ConfigHomeProgram.PNG" width="560" height="83"></p>

<h2>Example File: &lt;Install Dir&gt;\C Programs\HomeEncoderMach3.c</h2>

<pre>
	<code class="language-c">
	#include &quot;KMotionDef.h&quot;

	//Plugin calls for Mach3 Home (actually Purge) Commands>
	//Called from Mach3 &quot;REF&quot; command
	//in this case just Zero the measured position (encoder)
	//and set the commanded destination to zero
	
	#define X 0
	#define Y 1
	#define Z 2
	
	main()
	{
		int flags = persist.UserData[5]; // Mach3 flags bit0=X, bit1=Y, Bit2=Z, etc...
	
		printf(&quot;Mach3 Home Call, flags = %d\n&quot;,flags);

		if (flags &amp; 1)
		{
 			DisableAxis(X);
 			Zero(X);
 			EnableAxisDest(X,0.0);
 		}
 		if (flags &amp; 2)
		 {
 			DisableAxis(Y);
 			Zero(Y);
 			EnableAxisDest(Y,0.0);
 		}
 		if (flags &amp; 4)
 		{
 			DisableAxis(Z);
 			Zero(Z);
 			EnableAxisDest(Z,0.0);
 		}
	}
	</code>
</pre>

	<p>&nbsp;</p>
	</div>
</body>

</html>