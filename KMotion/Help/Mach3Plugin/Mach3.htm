<!DOCTYPE html>

<html>

<head>



<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>

<meta http-equiv="Pragma" content="no-cache"/>

<meta http-equiv="Expires" content="0"/>



<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">

<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">

<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

<meta http-equiv="Content-Language" content="en-us">



<title>Mach3 Plugin + KMotion</title>



<link rel="stylesheet" type="text/css" href="../css/style.css">

<link rel="stylesheet" href="../css/prism.css" data-noprefix />

<script src="../js/prism.js"></script>

</head>



<body>



<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">



<h1>Mach3 Plugin</h1>



	<p><img src="Mach3PlusKFlop.PNG" width="512" height="167" alt="KMotion/KFLOP + Mach3" /></p>

	<div style="clear: both;"></div>

  <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<em><strong> KFLOP/Kogna</strong></em> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<em><strong>Mach3</strong></em></p>





<p><strong>Mach3</strong> is a popular CNC program available for purchase through

<a href="http://www.artsoftcontrols.com/">ArtSoftControls</a>.</p>



<p>Traditionally Mach3 has relied on little hardware support and performed low 

level motion and even stepper motor step pulses directly by the PC. The 

	pulses were output using the PC's parallel port. This required a special Microsoft Windows Kernel driver with a high interrupt rate and was limited to 50~100K steps per second.</p>

<p>Mach3 has the capability for adding &quot;plugins&quot; that allow additional 

functionality and hardware support. <strong><em>DynoMotion</em></strong> has developed a plugin that 

allows Mach3 to work with a <em><strong>Kogna</strong></em> or <em><strong>KFLOP</strong></em> Motion 

Controller. The offloads most of the real-time requirements from the PC, 

allows USB connectivity, much higher step rates, and allows easily adding 

other motor types including brushless servos. </p>



<p>This is an overview of the overall setup process of getting Mach3 and KMotion to play together.</p>



	<ul>

	<li>Install Mach3</li>

	<li>Install KMotion</li>

	<li>Within KMotion configure/tune your motors</li>

	<li>Within KMotion create a configuration and initialization program</li>

	<li>Within Mach3 - configure plugin (enter name of KMotion Init program )</li>

	<li>Within Mach3 - configure IO Bits.</li>

	<li>Within Mach3 - configure motor tuning (set resolution, speeds, and 

	acceleration)</li>

	</ul>

	

	<p>Note: when using encoder feedback see also:<a href="Mach3Encoders.htm">Mach3 Encoder Setup</a></p>

	<p>Note: for configuring probing see also:<a href="Mach3Probe.htm">Mach3 G31 Probe Setup</a></p>

	<p>Note: for information regarding operating steppers in closed loop see also: <a href="../ClosedLoopStep/ClosedLoopStepper.htm">Closed Loop Steppers</a></p>

	<p>Note: For passing Parameters see also: <a href="Mach3DROs.htm">Passing DROs</a></p>

	<p>Note: For Rigid Tapping see also: <a href="Mach3RigidTapping.htm">Mach3 Rigid Tapping</a></p>



		<h2>1. Install Mach3</h2>

	

		<p>Mach3 should be installed <em>before</em> 

		KMotion so that the KMotion installation program can copy the necessary 

		files (Dynomotion.dll) into the Mach3 plugin directory.<p> The 

		KMotion installation will also add a registry entry under &quot;App Paths&quot; so 

		that Mach3.exe will have access to the necessary KMotion DLL libraries, 

		programs, and data files. </p>

		

		<p>It is not necessary to load the Mach3 Kernel driver.</p>

		

		<p>If KMotion has already been installed, it should be re-installed to make the necessary links between the programs.</p>

	

		<h2>2. Install KMotion</h2>

	

		<p>At the end of the KMotion installation an option to install the Mach3 Plugin will be displayed.</p> 

		<p>Check the Mach3 Plugin option and select Next.</p> 

		

		<p><img src="InstallOption.PNG" width="479" height="364" alt="Install Mach3 Plugin" /></p>



		<p>You will be prompted to enter the directory where Mach3 was installed. </p>

		

		<p><img src="Mach3Dir.PNG" width="479" height="364" alt="Mach3Dir" /></p>

		

		<p>A check will be made that a valid Mach3.exe exists in that directory, and the Dynomotion.dll will be 

		copied to the plugins subdirectory.</p>

		

		<h2>3.Within KMotion configure/tune your motors</h2>

	

		<p>Follow the normal procedures to use the KMotion Executive program to 

		configure and tune all of your motor axes.<p> The simplest method to 

		configure the system is to enter and change values in the various 

		KMotion Executive Screens, download them to the KMotion Board, and test 

		and tune for correct operation using the Step Response Screen as well as 

		Console commands.</p> 



	  	<h2>4. Within KMotion create a configuration and initialization program</h2>

	

		<p>After each axis is functioning properly, the configuration for that axis 

		can be copied to the clipboard as a valid C program code.</p>

		

		<p>See the circled button below. </p>

		

		<p><img src="ConfigToClipboard.PNG" alt="ConfigToClipboard" /></p>

		

		<p>C Code to configure axis 0 might look like the code 

		shown below.<p> Detailed knowledge of C programming is not required 

		to paste these into a User Program. The configuration for each 

		axis should be pasted into a single program. Later this program 

		may be executed at any time to completely configure the KMotion Board. 

		The KMotion Executive program would not be needed to do this. The 

		RESET button from within Mach3 will be configured to execute this 

		program. </p>

		<pre>

			<code>

	h0-&gt;InputMode=ENCODER_MODE;

	ch0-&gt;OutputMode=MICROSTEP_MODE;

	ch0-&gt;Vel=100.000000;

	ch0-&gt;Accel=1000.000000;

	ch0-&gt;Jerk=10000.000000;

	ch0-&gt;P=1.000000;

	ch0-&gt;I=0.000000;

	ch0-&gt;D=0.000000;

	ch0-&gt;FFAccel=0.000000;

	ch0-&gt;FFVel=0.000000;

	ch0-&gt;MaxI=200.000000;

	ch0-&gt;MaxErr=200.000000;

	ch0-&gt;MaxOutput=200.000000;

	ch0-&gt;DeadBandGain=1.000000;

	ch0-&gt;DeadBandRange=0.000000;

	ch0-&gt;InputChan0=0;

	ch0-&gt;InputChan1=1;

	ch0-&gt;OutputChan0=0;

	ch0-&gt;OutputChan1=1;

	ch0-&gt;LimitSwitchOptions=0x0;

	ch0-&gt;InputGain0=1.000000;

	ch0-&gt;InputGain1=1.000000;

	ch0-&gt;InputOffset0=0.000000;

	ch0-&gt;InputOffset1=0.000000;

	ch0-&gt;invDistPerCycle=1.000000;

	ch0-&gt;Lead=0.000000;

	ch0-&gt;MaxFollowingError=1000000000.000000;

	ch0-&gt;StepperAmplitude=250.000000;

		

	ch0-&gt;iir[0].B0=1.000000;

	ch0-&gt;iir[0].B1=0.000000;

	ch0-&gt;iir[0].B2=0.000000;

	ch0-&gt;iir[0].A1=0.000000;

	ch0-&gt;iir[0].A2=0.000000;

		

	ch0-&gt;iir[1].B0=1.000000;

	ch0-&gt;iir[1].B1=0.000000;

	ch0-&gt;iir[1].B2=0.000000;

	ch0-&gt;iir[1].A1=0.000000;

	ch0-&gt;iir[1].A2=0.000000;

		

	ch0-&gt;iir[2].B0=1.000000;

	ch0-&gt;iir[2].B1=0.000000;

	ch0-&gt;iir[2].B2=0.000000;

	ch0-&gt;iir[2].A1=0.000000;

	ch0-&gt;iir[2].A2=0.000000;

		</code>

	</pre>

		<p>Besides C code to configure each axis, 

		other commands such as those shown highlighted below may be used to 

		enable each axis (and set the destination) and to define which axis 

		channels are in the coordinated motion system. The DefineCoordSystem(0,1,-1,-1); 

		statement defines a two axis coordinate system where X is axis channel 

		0, Y is axis channel 1, and the Z and A axes are not used. </p>

		

		<p>The circled button can be used to save, 

		compile, download, and run the C program in one step.<p> Note that 

		once a C program has been executed to change configuration settings 

		within the KMotion Board, the values in the KMotion Executive screens 

		may be different from the current settings within the board. To 

		synchronize the screens with what is actually in the board the channel should be 

		&quot;Uploaded&quot;.</p>

		

		<p>Additional initialization operations may 

		also be added to the C Progam.<p> These might include brushless motor 

		phase finding, homing, activating IO bits, etc.. </p>

		

		<p><img src="ProgramScreen.PNG" width="594" height="494" alt="ProgramScreen" /></p>

		

		<p>After the Initialization program is finalized and 

		working it should be saved in a known location so that Mach3 may be 

		configured to execute it as described in the next step.</p>

	

	  	<h2>5. Within Mach3 - configure plugin (enter name of KMotion Init program)</h2>

	

		<p>We are now ready to Execute Mach3.<p> The 

		first time Mach3 is executed after adding the Dynomotion Plugin Mach3 

		will prompt the user which Motion Device should be used. The Dynomotion Plugin should be selected.<p> After the Mach3 Application comes up use the Config|Config Plugins menu to bring up the Config 

		Plugins dialog shown below.</p>

		

		<p><img src="ConfigurePlugin.PNG" width="500" height="347" alt="ConfigurePlugin" /></p>

		

		<p>Next click in the circled area to bring up the Dynomotion Plugin 

		Configuration Screen.</p>

		

		<p><img src="DynoPluginConfig.PNG" alt="DynoPluginConfig" /></p>

		

		<p>Specify the <em>KMotion Initialize User Program</em> that was created in step 4 above (you 

		may browse to the file using the &gt;&gt; button).</p>

		

		<p>Options to automatically run the program on Mach3 Startup or only once 

		after Mach3 Startup may also be selected.</p>

		

		<p>Mach3 generates Spindle Messages for On, Off, and Speed Changes. 

		Specify a KMotion Spindle Speed User Program to handle and perform 

		appropriate actions for the various Mach3 Spindle Messages. A 

		default <strong>SpindleMach3.c</strong> program is included in the default installation 

		that will simply print the messages and desired speeds requested by 

		Mach3. Note that speed is a relative fraction of the max currently 

		selected pulley's speed. Because KFLOP/Kogna is likely to be 

		controlling the motor speed regardless of the selected pulley, this is 

		usually more appropriate. An appropriate User Program to perform 

		the appropriate actions to actually drive the spindle should be created 

		to replace the default program that simply prints the requested 

		operation. There are included examples for Spindles controlled by 

		a DAC output (SpindleMach3DAC.c) and for Spindles controlled by Step/Dir 

		outputs (SpindleMach3Jog.c).</p>

		

		<p>Spindle Speed measurement and Single point threading is also supported. 

		A quadrature encoder is required on the spindle. Specify the 

		Sensor Type as 1 to enable the Spindle measurement. Configure the 

		Axis Channel that is configured to read the encoder (Note this is not 

		the encoder channel, rather it is the axis that has the encoder channel 

		configured as its input). Specify the Update time, Tau, and 

		counts/rev. See <a href="../Cmd.htm#ConfigSpindle">here</a> for 

		more information.</p>

		

		<p>Mach3 Home requests may be passed to a User Program to activate any 

		desired Home Sequence. An example skeleton program which just 

		prints the Mach3 home requests is included as <strong>HomeMach3.c. </strong>Another example for use with encoders is described <a href="Mach3Encoders.htm#Zero_Buttons">here</a>.</p>

		

		<p>Mach3 permits a general purpose mechanism to make custom calls to any 

		Plugin that are passed through to a KFLOP/Kogna Custom Notify User Program. 

		Placing a NotifyPlugins(10xxx) call in VB Script of either a Screen 

		Button or Macro command may then trigger behavior in KFLOP/Kogna .

		Message Codes from 10000 to 10999 will be sent to KFLOP/Kogna (all others are 

		ignored). Plugin executions are automatically queued and executed 

		in the sequence they were requested (the previous must complete before 

		the next is launched). An example skeleton program which just 

		prints the Mach3 notify requests is included as <strong>NotifyMach3.c.

		</strong>Another example for use with encoders is described

		<a href="Mach3Encoders.htm#Zero_Buttons">here</a>.</p>

		

		<p>An I/O bit may be defined that is activated when Mach3 goes into the 

		offline state. Neg True Polarity may be checked if it is desirable 

		for the bit to be driven low in the off-line state rather than high.</p>

		

		<p>The <em>Windows Buffer ahead Time </em>may be changed to keep more or less 

		buffering ahead in the KFLOP/Kogna Board. Using a value too small may 

		cause the buffer to run empty and &quot;starve&quot; for data if Windows becomes 

		non-responsive for longer than that amount of time. Using a value 

		too large will cause feed rate changes and feed hold commands to be less responsive.</p>

		

		<p>The plugin can be configured to <em>Automatically run Initialize on Mach 

		Startup </em>if desired. <span class="warning">Caution:</span> This option should be left 

		off if there is any potential danger with unexpected machine motion when launching Mach3.</p>

		

		<p>After setting all parameters, press OK to save the parameters into the Mach3 XML 

		parameter file and return to the main Mach Screen. Pushing Mach3's 

		Reset button will now execute the Initialize program.</p>

				

		<h2>6. Within Mach3 - configure IO Bits</h2>

        

	    <p>Mach3 was originally designed to directly control Step/Dir drives connected to a PC Parallel Port. When using KFLOP/Kogna this is no longer the case. Select the Menu <strong>Config|Ports &amp; Pins</strong> to bring 

		up the Dialogs shown below. When using the KMotion Plugin, Pin 

		Numbers now correspond to <em>KMotion IO Bit Numbers</em> rather than 

		Parallel port Pins. Some of the terminology on the screen may be 

		misleading as it was designed expecting to use a PC Parallel Port.

		For IO bit numbers less than 128 specify <strong>Port#1 </strong>and use the IO Bit number as the<strong> Pin</strong>. For IO bit numbers 128 or larger, subtract 128 from the bit number and 

		specify <strong>Port #2</strong> instead of Port #1. Extended Virtual IO 

		bits 1024-1151 may also be accessed by specifying <strong>Port #3</strong> and subtracting 1024 from the bit number (note: the first 32 Virtual IO will consume less USB bandwidth because they are uploaded in the KFLOP/Kogna Bulk Status record so use the first 32 if possible).</p>

	    

	    <p>KFLOP/Kogna handles all real-time I/O (Step/Dir, Analog, Limits, etc...) and is configured within KFLOP. So within Mach3 Step/Dir Outputs are not used and should all be configured to non-KFLOP Outputs (ie Port 0 Pin 0). See below. Note that the Enable for each axis in your system must be enabled otherwise Mach3 will not generate motion for the axis.</p>

	    
		<p><img height="420" src="Motor%20Outputs.png" alt="Motor Outputs" /></p>
	

		 <p>Mach3 has an EStop (Emergency Stop) Input to allow the hardware to inform Mach3 that an EStop has occurred so that it will stop any running Job and enter Emergency Stop Mode. If your system is continuously in Emergency Stop Mode and can not be Reset out of Emergency Stop Mode, then it is likely that the configured EStop Input is continuously Active. If your hardware has a EStop signal interfaced to a KFLOP/Kogna Input configure the corresponding KFLOP/Kogna input IO number and the appropriate polarity. If your system does not have an EStop signal configure the EStop Input to an unused IO bit that wil never be active. See below for how to configure to KFLOP IO Bit 46 (a KFLOP/Kogna LED) which is normally always high. </p>

	    
	    <p><img height="420" src="Estop.png" alt="Estop" /></p>
       

        <p>Various M Codes may be used within Mach3 to activate IO bits on KFLOP/Kogna. Note 

		Mach3 typically defaults after an initial install with Output #1 enabled 

		for spindle control on Pin0 (as shown below). Bit 0 is often used 

		on a KMotion board as an Encoder input. Having Mach configure the 

		IO bit as an output will cause the encoder to be inoperable. 

		Disable the output if this is the case.</p>

		

		<p><img src="PortsAndPins.PNG" width="713" height="423" alt="PortsAndPins" /></p>





		<h2>7. Within Mach3 - configure motor tuning (set resolution, speeds, and acceleration)</h2>



		<p>Select <strong>Config|Motor Tuning</strong> to bring up the 

		Motor Tuning Dialog. This screen allows the setting of Machine 

		resolution, Max Velocity, and Max Acceleration for each axis in use. 

		Note that the sliders are typically not very useful since the max step 

		rates are much higher using a KFLOP/Kogna Motion Controller than with the 

		original PC Generated Steps. It's usually best to just enter 

		values directly into the cells. </p>

	

  <p><img src="MotorTuning.PNG" width="680" height="427" alt="MotorTuning" /></p>

		

		<p>After the parameters have been entered and saved, Press OK to return to the main screen.

		<p>That's it! Reset should now properly initialize the machine. Jogging and G Code should now be functional. 



		<p>Refer to the Mach3 documentation for more information on advanced features.</p>



    	<p>Here is how a GCode file appears on Mach3 Mill.</p>

    	

		<p><img src="Mach3Screen.PNG" width="522" height="397" alt="Mach3Screen" /></p>

		

  <p>Here the same example GCode file cut (or more accurately burned) into a piece 

  of wood using a Harbor Freight Mini-mill driven with KMotion and Mach3.</p>



  <p><img src="DynoMotionOnMach.JPG" width="500" height="267" alt="DynoMotionOnMach" /></p>



<p>&nbsp;</p>

</div>

</body>



</html>