<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>


<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<title>Tool Setup Screen - M0 - M30</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">
	
<h1>Tool Setup Screen - M0 - M30</h1>

<p>
<map name="FPMap0">
<area href="#G_Code_Actions_-_M3_-_M9" shape="rect" coords="10, 42, 687, 449">
<area href="ToolSetupScreenM100.htm" shape="rect" coords="52, 22, 103, 43">
<area href="ToolSetupScreenButtons.htm" shape="rect" coords="104, 23, 170, 43">
<area href="ToolSetupScreenFiles.htm" shape="rect" coords="169, 23, 257, 46">
<area href="ToolSetupScreenTP.htm" shape="rect" coords="255, 24, 349, 43">
</map>
<img src="KMotionCNCfiles/ToolSetupM3.PNG" width="700" height="449" usemap="#FPMap0" /><br />
	<span class="small">(Click on image to jump to related help)</span></p>

<p>The Tool Setup Screen allows <em>KMotionCNC</em> to be configured for a 
particular machine tool. Each machine tool is likely to have different 
motion resolution, speeds, and acceleration limits. It is also likely to 
different I/O requirements with regard to Spindle control and such. 
Additionally a machine may have different initialization and homing 
requirements. <em>KMotionCNC</em> has a flexible mechanism for defining what 
type of action is to be performed for various M Codes and Custom Buttons.</p>

<h2><a name="G_Code_Actions_-_M3_-_M9"></a>G Code Actions - M0 - M30</h2>
	
<p><img src="KMotionCNCfiles/GCodeActions.png" alt="G Code Actions" /></p>

<div style="clear: both;"></div>

<p>The M Codes 0 through 9 have functionality commonly used by most machine 
tools. These can also be used as custom or general purpose M codes in the 
same manner as the M100-M119 M codes with the exception of M5 and M9 which are 
automatically executed on Program Stop or Rewind.</p>

<p><strong>M0</strong> - Program Stop</p>
<p><strong>M1</strong> - Optional Program Stop</p>
<p><strong>M2</strong> - Program Stop, Rewind, Reset Interpreter Settings</p>
<p><strong>M3</strong> - Spindle On CW</p>
<p><strong>M4</strong> - Spindle On CCW</p>
<p><strong>M5</strong> - Spindle Off - Note Automatically called on Program Stop/Rewind</p>
<p><strong>M6</strong> - Tool Change (T variable is passed to the C program in the persist variable specified)</p>
<p><strong>M7</strong> - Mist On</p>
<p><strong>M8</strong> - Flood On</p>
<p><strong>M9</strong> - Mist and Flood Off</p>
<p><strong>S</strong> - Spindle Speed Setting. If C Program is specified Speed in RPM is passed to the specified KFLOP/Kogna Var as a 32-bit floating point number</p>
<p><strong>M30</strong> - Program Stop and Rewind</p>
<p>The Actions section of the Tool Setup Screen defines what action is to be performed when a particular G Code Command (Mostly M Codes) is encountered. </p>

<p>Additionally Actions can be performed when certain KMotionCNC functions occur. These include:</p>

<p><strong>Cycle Start</strong> - Action performed when the Cycle Start Button is pressed and before GCode begins execution</p>
<p><strong>Halt</strong> - Action performed when the Halt Button is pressed after GCode stops execution. Commonly used to execute a C Program to move the Z axis to a safe height and turn off the Spindle. See the 
SafeZ_SpindleOff.c as an example.</p>
<p><strong>Stop</strong> - Action performed after Stop Button is pressed</p>
<p><strong>FeedHold</strong> - Action performed after Stop Button is pressed</p>
<p><strong>Resume</strong> - Action performed after FeedHold is released</p>
<p><strong>Program Start</strong> - Action performed at KMotionCNC Program Startup</p>
<p><strong>Program Exit</strong> - Action before KMotionCNC Program Exits</p>

<p>The Action that can be performed can be one of several things:</p>

<ul>
	<li>None</li>
	<li>Set or Reset one I/O Bit</li>
	<li>Set or Reset two I/O Bits</li>
	<li>Set a DAC to a variable's value (S parameter)</li>
	<li>Wait (stall motion) until an Input to be in the specified state</li>
	<li>Execute a C Program in the KMotion Control Board</li>
	<li>Execute a C Program in the KMotion Control Board + wait for it to terminate</li>
	<li>Execute a C Program in the KMotion Control Board + wait for it to terminate + resync Interpreter positions</li>
	<li>Execute a Windows Program</li>
	<li>PC App Callback</li>
	<li>Screen Script File</li>
</ul>

<p>To specify a particular action first select the Action Type. Each 
Action Type requires a different number and type of parameters. Next fill 
in the appropriate parameters. The one and two bit I/O commands are 
inserted directly into the coordinated motion control buffer. In this way 
they are exactly synchronized with any motion before or after the I/O commands. 
This is useful in systems where a fast shutter or other operation is required at 
precise times relative to the motion.</p>

<p>The seven Action Types are described below:</p>

<p>For <strong>one I/O</strong> bit specify the I/O bit number and the state 0 or 1 to set it to.</p>
<p><img src="KMotionCNCfiles/OneBit.png" /></p>

<p>For <strong>two I/O</strong> bits specify the I/O bit numbers and the state 0 or 1 to 
set each to. Often systems with two direction spindle control will require 
setting two outputs that control on/off and cw/ccw. This command is 
designed to handle those situations.</p>

<p><img src="KMotionCNCfiles/TwoBits.png" /></p>

<p>For a special command to pause motion until an external 
Input is activated select <strong>Wait Bit</strong> and specify the I/O bit number and the state 0 or 1 to 
wait for.</p>

<p><img src="KMotionCNCfiles/WaitBit.png" width="449" height="30" /></p>

<p>For <strong>DAC</strong> specify the DAC (Digital to analog converter) channel number, 
how to scale and offset the associated variable, and the minimum and maximum 
allowed DAC settings. This command is primarily designed for use with the 
S (Spindle speed) G Code Command.</p>



<p><img src="KMotionCNCfiles/DAC.png" /></p>



<p>For <strong>Execute Prog</strong> specify the program Thread (1 through 7) where the program is to be downloaded and executed, a Persist Variable (0-199) that will be set before the program executes, and the name of the C Program to be Compiled, Downloaded, and Executed. This method is very powerful in that anything that may be programmed in C may be invoked. See the  KMotion documentation and <a href="http://www.dynomotion.com/wiki/index.php?title=KFLOP_C_Programs">wiki</a> for information on writing C Programs for the KMotion Motion Control Board. There are a number of example C programs in the &lt;Install Dir&gt;\C Programs folder. The Example "\KStep\InitKStep3Axis.c" s an example which completely configures all necessary parameters in the KFLOP/Kogna Board to drive 3 stepping motors using KStep's amplifiers.</p>

<p>Persist Variables are used for passing parameters and information to KFLOP/Kogna before executing the C Program. The parameters are Action Specific. The 'S' Action will pass the Speed as a 32-bit Floating point value. The 'M6" Tool Change Action will pass the Tool Slot and Tool ID as 32-bit integer values in consecutive Persist Variables. MCodes can pass GCode PQR Parameters. See <a href="http://dynomotion.com/Help/KMotionCNC/MCodesWithParams.htm">here</a> for an example. If no parameter is associated with the Action, then the Action Table Index will be passed that can be used to inform the C Program which Action invoked it. Specifying a Var value as &quot;-1&quot; will not write anything into any variable.</p>

<p>Note that normally the *.c Source Program File is specified, which simplifies making any changes as they will automatically be re-compiled and have effect. C Source programs are also independent of KFLOP/Kogna Version as they are always Compiled to the current version before use. However it is possible to specify an *.out binary file that has already been compiled for faster operation since it has already been compiled and only needs to be downloaded. When a file is compiled into binary executable code it is compiled to run in a particular Thread space (memory specific) and also for a particular KFLOP/Kogna Version. The compiler automatically marks the filename with (N).out. Where N is the Thread number that the code has been compiled to run in.</p>

<p>If the Filename is left blank, then it will be assumed that a program has been previously downloaded to the specified Thread and will just be re-executed. It is up to the designer to make sure a valid program has been downloaded and still exists in the specified Thread Space.</p>

<p>Additionally a program filename specified with a *.ngc extension will be treated as GCode and the GCode Interpreter will be invoked to execute the GCode file. Note that the GCode Interpreter is not re-entrant (Interpreter can not call itself). This means that MCodes and other Actions invoked by the Interpreter can not Invoke GCode. This restriction also applies to C Programs that may in turn execute GCodeThis essentially limits User Buttons and Special Commands (ie Program Start) to specifying GCode for execution. This functionality should be limited to simple GCode operations that should execute quickly.</p>

<p><img src="KMotionCNCfiles/ExecuteProg.png" /></p>

<p><strong>PC App Callback</strong> allows a user-compiled Callback Function to be called as an Action. However,  this is a feature not commonly used unless you are modifying/recompiling  KMotionCNC.</p>

<p><img src="KMotionCNCfiles/pc-callback.png" width="510" height="32" alt="PC Callback" /></p>

 <p><strong>Screen Script File</strong> allows users to change/select different screen script files.</p>
 
<p><img src="KMotionCNCfiles/screen script file.png" width="800" height="24" alt="Screen Script File" /></p>


<p>&nbsp;</p>
	</div>

</body>

</html>
