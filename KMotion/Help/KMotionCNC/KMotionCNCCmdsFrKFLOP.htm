<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>


<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<title>Controlling KMotionCNC from KFLOP</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Controlling KMotionCNC from KFLOP/Kogna</h1>

<p>User KFLOP/Kogna C Programs can request actions to be performed 
by the KMotionCNC Application running on the PC by setting various command codes 
into special persist.UserData variables. The special UserData variables 
are being continuously uploaded with the Bulk Status record that KMotionCNC 
requests at approximately 10 times per second to update the DROs and so forth. 
If a command code is uploaded, KMotionCNC attempts to perform the requested 
action, then changes the UserData Command Value to a result code. Zero 
indicates success and a negative value indicates an error code (all commands are 
positive). So the typical process involves:</p>

<ol>
  <li>KFLOP/Kogna stores command into a Persist Var to request an action</li>
  <li>The command is uploaded to KMotionCNC with the next status request</li>
  <li>KMotionCNC performs the action</li>
  <li>KMotionCNC clears the Persist Var to indicate completion </li>
  <li>KFLOP/Kogna detects the command Var has been cleared to know the action was successful and complete</li>
</ol>
<p>The Status uploads several Persist Vars which permits 
  additional parameters to be uploaded with the command to KMotionCNC if required 
  by the action to be performed. If extra parameters or data is required, 
  then one of the uploaded parameters will specify where that data is located.</p>

<p>The number of UserData variables has now been expanded 
from 100 to 200 Variables and Variables 100-107 are the special vars constantly 
uploaded with bulk status. This is defined in the PC-DSP.h file as:</p>

<pre>
	<code class="language-c">
	#define PC_COMM_PERSIST 100 	// First Persist Variable that is uploaded in status
	#define N_PC_COMM_PERSIST 8 	// Number of Persist Variables that are uploaded in status	
	</code>
</pre>

<p>Currently supported actions include:</p>
<ul>
	<li>EStop</li>
	<li>Halt</li>
	<li>Execute</li>
	<li>Single Step</li>
	<li>Set FRO</li>
	<li>Inc/dec FRO</li>
	<li>Set X,Y,Z,A,B,C DROs</li>
	<li>Push a User Defined Action Button</li>
	<li>Execute an M Code</li>
	<li>Display a Message Box</li>
	<li>Get/Set GCode #Vars</li>
	<li>Execute a MDI line of GCode</li>
</ul>

<p>A new example called KFLOPtoPCCmdExamples.c is included 
which demonstrates how to invoke these actions from a KFLOP User C Program. 
The following helper functions are included in the example that simplify 
invoking the actions by setting the proper persist variables. They are:</p>

<pre>
   <code class="language-c">
	// Trigger a message box on the PC to be displayed
	// defines for MS Windows message box styles and Operator
  	// response IDs are defined in the KMotionDef.h file
  	int MsgBox(char *s, int Flags)

	// put the MDI string (Manual Data Input - GCode) in the
	// gather buffer and tell the App where it is
	int MDI(char *s)

	// Put a Float as a parameter and pass the command to the App
	int DoPCFloat(int cmd, float f)
	
	// Put an integer as a parameter and pass the command to the App
	int DoPCInt(int cmd, int i)
	
	// Pass a command to the PC and wait for it to handshake
	// that it was received by either clearing the command
	// or changing it to a negative error code
	int DoPC(int cmd)
	</code>
</pre>

<p>The Example code to make use of the helper functions is in the example as:</p>

<pre>
   <code class="language-c">
   main()
   {
   		int Answer;
		double *pD = (double *)persist.UserData;
		
		DoPC(PC_COMM_ESTOP);
		DoPC(PC_COMM_HALT);
		DoPC(PC_COMM_EXECUTE);
		DoPC(PC_COMM_SINGLE_STEP);
		DoPCFloat(PC_COMM_SET_FRO,0.25f);
		DoPCFloat(PC_COMM_SET_FRO_INC,1.1f);
		DoPCFloat(PC_COMM_SET_X,0.0);
		DoPCFloat(PC_COMM_SET_Y,0.0);
		DoPCFloat(PC_COMM_SET_Z,1.25);
		DoPCInt(PC_COMM_USER_BUTTON,3);
		DoPCInt(PC_COMM_MCODE,3);
		
		Answer = MsgBox(&quot;Hello World&quot;,MB_YESNO|MB_ICONEXCLAMATION);
		if (Answer == IDYES)
			printf(&quot;Answer is Yes\n&quot;);
		else
			printf(&quot;Answer is No\n&quot;);
			
		MDI(&quot;G0 X1.2 Y2.2 Z3.3&quot;);
		
		// put 3 double values in the persist vars
		
		pD[10] = 123.456;
		pD[11] = 1000.0;
		pD[12] = 999.9;
		
		// transfer up to the GCode Vars
		SetVars(100,3,10);  // Upload 3 to GCode 100 from persist 10
		
		MDI(&quot;#100 = [#100 + 1]&quot;);
		
		// read them back into different persist Vars
		GetVars(100,3,13);  // Download 3 from GCode 100 to persist 13
		
		printf(&quot;%f %f %f\n&quot;,pD[13],pD[14],pD[15]);
	}	
	</code>
</pre>


</div>

</body>

</html>
