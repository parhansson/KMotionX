<!DOCTYPE html>

<html>

<head>



<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>

<meta http-equiv="Pragma" content="no-cache"/>

<meta http-equiv="Expires" content="0"/>





<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">

<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">

<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

<meta http-equiv="Content-Language" content="en-us">



<title>Brush Servo with SnapAmp</title>



<link rel="stylesheet" type="text/css" href="../css/style.css">

<link rel="stylesheet" href="../css/prism.css" data-noprefix />

<script src="../js/prism.js"></script>

</head>



<body>



<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">



<h1>Configuring DC Brush Motor with SnapAmp and Single-Ended Encoder to KMotion</h1>



<p>This example will proceed through the following steps:</p>

<ol>

	<li><a href="#Wiring_the_Motor,_encoder,_and_Power">Wiring the Motor, Encoder, and Power</a></li>

	<li><a href="#Configuring_the_Software">Configuring the Software</a></li>

	<li><a href="#Testing_the_encoder">Testing the Encoder</a></li>

	<li><a href="#Testing_the_Motor_Amplifier">Testing the Motor/Amplifier</a></li>

	<li><a href="#Closing_the_loop">Closing the Loop</a></li>

	<li><a href="#Tuning_the_Servo">Tuning the Servo</a></li>

	<li>

    <a href="#Executing_a_simple_C_Program_Motion_Sequence">Executing a simple C Program Motion Sequence</a></li>

</ol>



<p><a href="http://dynomotion.com/Videos/DCBrush.wmv">Here is a video overview</a> (wmv).</p>



<h2><a name="Wiring_the_Motor,_encoder,_and_Power">Wiring the Motor, Encoder, and Power</a></h2>



<p>This example configuration shows a single dc brush motor 

connected to the first of 4 available full bridge drivers on a single SnapAmp 

1000. A single-ended encoder is connected to KMotion's JP3 connector as 

encoder input #0 for Servo feedback. (The KMotion board is hidden 

underneath the SnapAmp in the photo). Note: Encoders typically come 

as one of two types - differential outputs (having A+, A-, B+, B-) or single 

ended outputs (A B). A differential encoder may be used as a single ended 

encoder by only using the A+ and B+ signals (and leaving the A- and B- 

unconnected). However single ended signals are more susceptible to noise 

than differential signals. KMotion has 4 single ended encoder inputs. 

SnapAmp 1000 has 4 differential encoder inputs. In this example a KMotion 

single-ended encoder input is used. Some encoders have a index pulse that 

occurs once per revolution usually labeled as channel Z. In this example 

the index is not used and is not connected.</p>



<p><img src="SnapBrush.jpg" width="800" height="735" alt="Wiring the Motor" /></p>

<p><img src="KMotionEnc0Wiring.PNG" width="755" height="497" alt="Wiring the Motor" /></p>

<p><img src="SnapToBrush.PNG" width="479" height="396" alt="Wiring the Motor" /></p>



<h2><a name="Configuring_the_Software">Configuring the Software</a></h2>



<p>After the motor and encoder connections have been made, the software is 

configured and the encoder feedback and motor is tested.</p>



<p>Although any of KMotion's 8 axes could be used, axis 4 will be configured 

since axes 0-3 are normally used for KMotion's on-board amplifiers.</p>

<p>In the KMotion Executive program three screens involve setting an axis's 

configuration: The Configuration Screen, the Step Response Screen, and the 

Filters Screen. These three screens and our choice of initial settings are 

shown below:</p>



<p>Execute the KMotion executive program and set the Options for a single 

SnapAmp. See below:</p>



<p><img src="SelectSingleSnap.PNG" alt="Configuring the Software" /></p>



<p>On the Configuration screen Axis Channel 4 is selected, the input type is set 

to Encoder at encoder channel 0, the output type is set to DC Servo at PWM 

channel 8, and a very large following error is set.</p>



<p><img src="ConfigEncoderBrush.PNG" width="507" height="515"></p>



<p>On the Filters Screen all filters are disabled by &quot;Clearing&quot; all filters to 

have a gain of 1.</p>



<p><img src="FiltersOff.PNG" width="760" height="491" alt="Filters off" /></p>



<p>The Step Screen servo loop (PID) parameters are set to only very low 

proportional gain. The max output is set to a small value that should 

still allow some motor motion. SnapAmp DC Servo mode outputs current 

commands in the range of -1000 to +1000 which corresponds to approximately 

-30Amps to +30 Amps. So a max output of 100 will limit the current to 3 

Amps. Although the Integrator will not be initially used we set the max 

integrator to also be 100. The max error is set to a large 

number. The motion profile parameters are set to values that we will 

expect to eventually achieve. Our example uses a low speed torque 

motor being driven off of only 12V. This encoder has 4000 counts/rev so a 

speed of 50,000 cnts/sec corresponds to 12.5 rev/sec (750 RPM).</p>

<p>With the Motor Power Supply tuned off, pushing the Enable button will 

download the parameters from all screens and enable the axis without any motor 

motion. This will allow us to ensure the axis is properly wired and 

configured as encoder input and of the correct encoder channel.</p>



<p><img src="StepScreenLowGain.PNG" width="897" height="580" alt="Screen Low Gain" /></p>



<h2><a name="Testing_the_encoder">Testing the Encoder</a></h2>



<p>We can now rotate the motor/encoder shaft by hand and should observe counts 

on Axis Channel 4 on the Analog Status Screen. Note if one of the other 

axis's configurations also is defined as input Encoder channel 0 then that axis 

may count as well. The default configuration for axis 0 is Encoder input 

from channel 0. To avoid confusion, disable any other axis by selecting 

that axis, define the input/output types as &quot;No Input&quot; and &quot;No Output&quot;, then 

download, then disable the axis. To test the encoder, rotate the encoder 

and check if the expected number of counts per rev are obtained. Rotating 

the axis the opposite direction should count in the opposite direction.</p>



<p><img src="CountsChanging.PNG" width="480" height="613" alt="Counts changing" /></p>



<h2><a name="Testing_the_Motor_Amplifier">Testing the Motor Amplifier</a></h2>



<p>In order to test the Motor Amplifier functionality Console commands (PWMC - 

Pulse-Width-Modulation Current Mode) will be entered to drive the motor in the 

forward and reverse direction. The axis should and must be disabled to 

issue these commands, otherwise they will be immediately overwritten with servo 

output commands. Small values should be used initially. Note: 

PWMC commands may only be used with a SnapAmp (Software Version 2.31 or later), the KMotion onboard amplifiers do 

not have current feedback mode so PWM commands should be used instead. 

SnapAmps's PWMC current commands range from -1000 to +1000 which corresponds to 

approximately -30Amps to +30 Amps. So a value such as 100 might be used to 

provide a drive of 3 Amps.</p>



<p>Before issuing the PWMC commands, SnapAmp's peak current fault levels should 

be set. After verifying that the axis is disabled (on the Analog 

Status Screen), load and execute the following program to set the peak 

current limits. The Fault Green LED on the SnapAmp should turn off. 

The &quot;I'm alive&quot; Green LED should remain blinking.</p>



<p><img src="SetHighCurLimits.PNG" width="587" height="328" alt="Set High Current Limits" /></p>





<p>Setup the Console Screen as shown below. Sending the commands should 

drive the motor in one direction, then no motor drive, then drive in the other 

direction respectively.</p>



<p><img src="ConsolePWMC.PNG" width="525" height="446" alt="Console PWMC" /></p>



<h2><a name="Closing_the_loop">Closing the Loop</a></h2>



<p>If the motor and encoder are working we are ready to attempt to close the 

servo feedback loop. All that is required is to enable the axis by 

pressing &quot;Enable&quot; on the Step response Screen. Normally one of two 

things will occur. Either the axis will respond as a weak servo, or the 

servo will have positive instead of negative feedback and runaway from the 

target destination rather than toward the target destination.</p>

<p>If the servo has positive instead of negative feedback, something should be 

reversed. Either the Motor leads may be reversed, the encoder signals may 

be reversed, or a Input Gain of -1 may be entered on the Configuration Screen 

(as shown below).</p>



<p><img src="NegInputGain.PNG" width="346" height="105" alt="Negative Input Gain" /></p>



<p>If the servo has proper feedback and responds as a weak servo, as the 

motor/encoder shaft is turned the servo will cause torque to restore the 

position back to where it was. With the example proportional gain of 0.01, 

turning the sharft 1 turn should generate an error of 4000 counts. 

4000 counts multiplied by a gain of 0.01 = 40 PWMC counts or 40 / 1000 * 30Amps 

= 1.2 Amps.</p>



<h2><a name="Tuning_the_Servo">Tuning the Servo</a></h2>



<p>Once the servo loop is functional Servo Tuning should be performed to move 

the performance, hopefully up to the desired levels. Servo tuning is a 

complex subject that has been written about extensively. The basic idea is 

to increase the feedback gains in order to reduce following errors and speed of 

response without going unstable (oscillating wildly). KMotion 

has extensive plotting tools to help tune and understand how well a set of 

parameters performs.</p>



<p>To test the current performance, disable the axis, manually move it to a 

position where it may move +10000 counts, then push the &quot;Move&quot; button. A 

plot such as that shown below should be observed. Set the plot type and 

axis selections to agree with those shown below. The blue plot is the 

desired path as defined by the motion profile and the motion is made for 10,000 

counts and then a second motion is made back to zero. The red plot is the 

measured encoder position. Note that the red plot attempts to follow the 

blue plot but with a large error of thousands of counts. Gradually 

increase the P gain (possibly by factors of 2) while pushing the Move button and 

the following error should reduce. At some point the system will probably go 

into oscillation and become unstable. It may be necessary to disable the 

axis, reduce the gain, and re-enable the axis.</p>



<p><img src="PoorPlot.PNG" width="897" height="580" alt="Poor Plot" /></p>



<p>Increasing the gain 500X (from 0.01 to 5) results in a much better response. 

Notice the blue (desired) plot is almost completely hidden behind the red measured 

plot. However by zooming in to the purple rectangle (left click 

mouse drag) we can see oscillation. See the second plot below.</p>



<p><img src="BetterPlot.PNG" width="897" height="580" alt="Better Plot" /></p>

<p><img src="Oscillation.PNG" width="897" height="580" alt="Oscillation" /></p>



<p>Increasing the derivative gain can often reduce 

oscillation. In the plot below we have set the D gain to 16. Notice 

the oscillation has been reduced.</p>



<p><img src="DerivativeGain.PNG" width="897" height="580" alt="Derivative Gain" /></p>



<p>A Bode plot is useful in understanding the frequency 

response and for designing advanced servo loop filters. Below is the Bode 

plot response of the system. Important features to look for in a Bode plot 

is where the Magnitude (blue plot) first passes through the 0 db line. 

This is the bandwidth of the system. Another important measure is the 

&quot;phase margin&quot; which is how far away the phase is from -180 degrees when 

the magnitude is at 0db. In this case the phase margin is 28 degrees. 

See the Bode Screen in the main Help section for more information</p>



<p><img src="BodePlot65Hz.PNG" width="857" height="552" alt="Bode Plot 65Hz" /></p>



<h2><a name="Executing_a_simple_C_Program_Motion_Sequence">Executing a simple C Program Motion Sequence</a></h2>



<p>The C program below is an example of a simple program to 

perform a sequence of moves and repeat. There are 5 moves of 8000 counts 

(2 motor revs) and then a move back to the start. After each small 

move there is a wait until the motion is complete followed by a 0.2 second 

delay. <a href="http://dynomotion.com/Videos/DCBrush.wmv">Here</a> is a 

video of the mechanism executing the motion.</p>



<p><img src="MoveMechanism.PNG" width="548" height="644" alt="Move Mechanism" /></p>



<p></p>



	</div>

</body>



</html>

