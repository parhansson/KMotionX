<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>


<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>Configuration and FLASH Screen</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Configuration and FLASH Screen</h1>

<p><img src="ConfigurationScreen.png" alt="" width="563" height="663" usemap="#FPMap0Map"/>
  <map name="FPMap0Map"><area alt="Jump to Axis Parameters Utility Functions description" coords="21,573,377,616" shape="rect" href="#Utilities"><area alt="Jump to Limit Switch Options description" coords="9,411,414,569" shape="rect" href="#Limit_Switch_Options"><area alt="Jump to Output Channel description" coords="7,295,248,404" shape="rect" href="#Output_Channels"><area alt="Jump to Input Channel description" coords="5,191,248,292" shape="rect" href="#Input_Channels"><area alt="Jump to Axis Mode Description" coords="4,70,153,188" shape="rect" href="#Axis_Modes"><area href="#Backlash_Settings" shape="rect" coords="255,279,420,393"><area href="#Master/Slave_Settings" shape="rect" coords="253,157,420,277"><area alt="Jump to Flash memory description" coords="427,240,558,461" shape="rect" href="#FLASH"><area alt="Jump to Launch Threads description" coords="430, 45, 558, 235" shape="rect" href="#Launch_on_Power_U"><area alt="Jump to Lead Compensation description" coords="167,124,415,154" shape="rect" href="#Lead_Compensation"><area alt="Jump to InvDistPerCycle description" coords="165,95,414,123" shape="rect" href="#Inv_Dist_Per_Cycle"><area alt="Jump to Max Following Error description" coords="158,66,420,94" shape="rect" href="#Max_Following_Error"><area alt="Jump to Microstepper Amplitude description" coords="148,28,419,64" shape="rect" href="#Microstepper_Amplitude">
    <area alt="Jump to channel selection description" coords="12, 34, 140, 64" shape="rect" href="#channel_">
  </map>
</p>

<p class="small">(Click on above image to jump to relative topic)</p>

<p>The <em><strong> Configuration and FLASH Screen</strong></em> displays and allows changes 
to <em><strong>KFLOP's</strong></em> configuration and allows the configuration, new 
firmware, or user programs to be FLASH'ed to non volatile memory.</p>

<p><img src="Config1.gif" align="left" />Each axis 
<a name="channel_">channel</a> is configured independently. To view or make changes to a configuration first select the desired axis channel using the channel drop down. Note that changing an axis on any screen switches the active channel on all other screens simultaneously.</p>
<p>The parameters for each axis's configuration are grouped into three classes:Definitions, Tuning, 
and Filters Each class of parameters are displayed on three corresponding screens:</p>
<ul>
  <li>Configuration Screen</li>
  <li>Step Response Screen</li>
  <li>IIR Filter Screen</li>
</ul>
<p>The <em>Configuration Screen</em> contains <em>definition</em> parameters that should be set once 
and remain set unless a physical change to the hardware is made. For 
example, a Stepper motor might be replaced with a Brushless Motor and Encoder.</p>
<p>The <em>Step Response Screen</em> contains parameters that are <em>tuning</em> related and 
are located where the tuning response is most often adjusted and checked. 
For example, PID (proportional, intparameters are located there. </p>
<p>The <em>IIR Filter Screen </em>contains parameters related to servo 
<em>filters</em>.</p>

<h2><a name="Utilities">Utilities</a></h2>

<p><img src="Config13.png" width="362" height="45" alt="Utilities" /></p>

<p>Configuration settings are normally defined and tested using the KMotion 
Screens. After they have been determined to work properly they can be 
converted to C code and placed into a C programthat can then be used by 
applications to configure KFLOP without needing to use KMotion Screens. 
Axis Channel Settings can also be loaded/saved to disk files. See
<a href="../Parameters/index.html">KFLOP Axis Configuration and Parameters</a>.</p>
<p>The buttons along the bottom of the Configuration Screen allow a set of axis 
parameters to be:</p>
<ul>
  <li>Saved or Loaded from a disk file (*.mot)</li>
  <li>Uploaded or Downloaded to KFLOP</li>
  <li>Converted to equivalent C Code for use in a
  <a href="../ProgramScreen/ProgramScreen.htm"><strong><em>KFLOP</em></strong> <em>C 
  Program</em></a><em> (note you will not see anything happen but the data will be 
	placed in the clipboard. Paste it into a C Program to see it)</em></li>
</ul>
<p>Note that these buttons operate on all parameters (for one axis) from all 
screens as a unit. </p>

<p><img src="ImportExportC.png" width="281" height="51" alt="Import / Export C" /></p>

<p>To completely synchronize <strong>all</strong> the Configuration Screens (Config/Flash, 
Step Response, and Filters) for <strong>all</strong> axes to a C Program use the <strong>Export 
All to Open C Program </strong>Button<strong>.</strong> To Import all settings from a C Program 
select the <strong>Import All from Open C Program</strong> Button. The C program 
must be open on the C Program Screen. In both cases the C Program will be 
scannedto find blocks of axis settings and will determine which axis 
exist in the C Program. The results of the scan will be displayed before 
importing or exporting the settings. The dialog box below shows an example 
where 3 channels were found Select OK to proceed with the import.</p>

<p><img src="ImportAxesFound.png" width="377" height="234" alt="Import Axes Found" /></p>

<h2><a name="Axis_Modes">Axis Modes</a></h2>

<p><img src="Config3.png" alt="Configuration" /><img src="Config4.png" alt="Configuration" /></p>

<p>Use the respective dropdown to set either the axis Input or 
Output Mode. The input mode defines the type of position measurement (if 
required) for the axis. Closed loop control always requires some type of position 
measurement. For open loop stepper motor control, position measurement is 
optional.</p>
    
 <p>The output mode determines how the output command should be 
achieved. Either by driving SnapAmp PWMs and Full Bridge Drivers to 
control a specific type of motor, by driving a Kanalog DAC signal that will drive an 
external power amplifier, or by driving Step and Direction digital outputs.</p>
   
<p><strong>No Output</strong> mode is used when no output is required or a User Program will be writing the output to some device not directly supported (ie PWM Outputs).</p>
    
<p><strong>Microstep</strong> mode is used with SnapAmp to apply sine/cosine currents to a stepper motor (this does <strong>not</strong> refer to driving microstepping Step Dir Drives).</p>
    
<p><strong>DC Servo</strong> mode is used with SnapAmp to drive Brushed DC Motors.</p>
    
<p><strong>3PH Servo</strong> mode is used with SnapAmp to drive Brushless 3 Phase Motors.</p>
    
<p><strong>4PH Servo</strong> mode is used with SnapAmp to drive Brushless 4 Phase Motors (ie Steppers as servos).</p>
    
<p><strong>DAC Servo</strong> mode is used with Kanalog DACs to drive Analog Amplifiers.</p>
   
<p><strong>Step Dir</strong> mode is used with open loop Step/Direction Drives (ie KStep or other external Drives) Note KFLOP outputs &quot;steps&quot; to external drives and whether the drive interprets the &quot;steps&quot; as microsteps or full steps or servo steps are dependent on the Drive.</p>
    
<p><strong>CL Step</strong> mode is used with Step/Direction Drives in a closed loop manner with feedback.</p>

<p>For External Step and Direction Outputs see 
<a href="../StepAndDirection/StepAndDir.htm">Step and Direction Output Mode</a> 
and <a href="../ClosedLoopStep/ClosedLoopStepper.htm">Closed Loop Step/Dir Output Mode</a>.</p>
    
<h2><a name="Input_Channels">Input Channels</a></h2>

<p><img src="Config5.gif" alt="Configuration" /></p>

<p>The Input Channels section specifies which channels for the selected input 
device will be used. Some Input Modes require two devices to be specified 
and some Input Modes only require one device. If the selected Input Mode 
only requires one device then the second Input Channel (Input Chan 1) is not 
used and my be set to any number. This may be the channel of an Encoder input or an ADC 
input depending on the selected input mode. Resolvers require two ADC 
input channels (for sine and cosine), for all other modes the second channel 
number is not used.</p>

<p>The gain and offset parameters are applied to the respective input device. 
The gain is applied before the offset, i.e.<em> x' = ax+b, </em>where a is the 
gain and b is the offset.</p>

<p><em>Incremental encoders </em>only utilize the gain parameter which may be used 
to scale or reverse (using a negative gain) the measurement.</p>
<p>A <em>Resolver</em> is a device that generates analog sine and cosine signals 
as its shaft angle changes. Either one or multiple sine and cosine waves 
may be produced per revolution of a resolver. An encoder that generates 
analog sine and cosine signals may also be connected to a <em><strong>KFLOP</strong></em> 
as though it was a resolver. Resolver inputs may utilize both gains and 
offsets and be adjusted such that the sine and cosine ADC measurements are 
symmetrical about zero and have the same amplitude. Gain and offset errors 
may be introduced by either the ADC input circuitry and/or the Resolver itself. 
If one were to plot the sine vs. cosine signals as a resolver's position 
changes, the result should be circle <em><strong>KFLOP</strong></em> computes the 
arctangent of the point on the circle (also keeping track of the number of 
rotations) to obtain the current position. An offset or elliptical 
&quot;circle&quot; will result in a distorted position measurement throughout the cycle. 
Therefore note that adjusting the gains and offsets will result in changing the 
linearity of the position measurement, not the scale of the position measurement 
itself. The scale of a resolver input will always be 2&#960; 
radians per cycle.</p>

<p>An ADC input uses a single absolute ADC channel 
input to obtain the position measurement Gain0 and Offset0 may be used to 
modify the ADC counts from -2048 .. +2047 to and desired range.</p>

<h2><a name="Output_Channels">Output Channels</a></h2>

<p><img src="Config6.png" align="left" hspace="10" height="114" /></p>

<p>The Output Channels section specifies which channels for the selected output 
device will be used. Some Output Modes require two devices to be specified 
and some Output Modes only require one device. For Output modes that only 
require one output device the second device will be disabled. If the selected Output Mode 
only requires one device then the second Output Channel (Output Chan 1) is not 
used and my be set to any number. The specified output device may be the channel of a <a href="../PWM_Description/PWM_Description.htm">PWM</a> connected to an 
on-board power amplifier, a Step/Direction Generator, or a DAC that is used to drive an external power amplifier.  </p>

<p>Stepper mode and 4 phase brushless mode require two channels of PWM to be 
specified.</p>

<p>DC Servo motor (Brush motor type) only require one PWM channel.</p>

<p>3 Phase brushless motors require a consecutive pair of PWM channels In 
3 Phase output mode, only the Output Channel 0 value is used and must be set to 
an even PWM number.</p>

<p>For Step and Direction output mode and CL Step (Closed Loop Step/Dir), the output channel 0 is used to specify which Step/Direction Generator will be used.&nbsp; Also the Output mode (step/Dir, quadrature, or CW/CCW) and drive type (LVTTL active high/low, or open collector, or differential) to be used. Each Step/Direction Generator has assigned I/O Pins. See <a href="../StepAndDirection/StepAndDir.htm">Step and Direction 
Output Mode - KFLOP</a>  and <a href="../StepAndDirection/StepAndDirKogna.htm">Step and Direction Output Mode - Kogna</a>.</p>
<p>Some output devices support the application of a 
gain and offset See also the related Console Commands
<a href="../Cmd.htm#OutputGain">OutputGain</a> and
<a href="../Cmd.htm#OutputOffset">OutputOffset</a>.</p>

<h2><a name="Microstepper_Amplitude">Microstepper Amplitude</a>, Max 
Following Error, Inv Dist Per Cycle, Lead Compensation</h2>

<p><img src="Config10.gif" align="left" /></p>

<p><em>Microstepper Amplitude</em> is only applicable to configurations with 
output mode of Microstepper with SnapAmps (Not Step/Dir Drives). This parameter sets the amplitude (of the 
sine wave) in PWM counts (0 .. 255) that will be output to the sine and cosine 
PWM channels while moving slowly or at rest. Note that at higher speeds <em>
<strong>KFLOP</strong></em> has the ability to increase the amplitude to compensate for 
motor inductance effects and <em>may</em> actually be higher. See <em>Lead 
Compensation</em> in this same section.</p>
<p><em><a name="Max_Following_Error">Max Following Error</a></em> is      applicable to all closed loop servo output modes (DC Servo, 3 Phase      Brushless, 4 Phase brushless, DAC Servo, and Closed Loop Step/Dir).      Whenever the commanded destination and the measured position differ      by greater than this value, the axis will be disabled (if this axis      is a member of the defined coordinate system, then any coordinated      motion will also stop). To disable following errors set this      parameter to a large value.<br>
  <br>
  <em>Max Following Error</em> can be used to protect the system if anything      goes wrong.&nbsp; For example if hitting an obstacle, servo going      unstable, drive disabled, loss of motor power, etc. the Position will      not be able to follow the trajectory and a relatively large error      will occur and the axis will disable.&nbsp; This avoids any violent      corrections that might otherwise occur.&nbsp; The Step Response Screen      might be used to determine the maximum following errors for the axis      under all normal conditions.&nbsp; Then set <em>Max Following Error</em> to a      somewhat larger value.&nbsp; For example if the axis normally always      follows with less than 100 counts of error the <em>Max Following Error</em> might then be set to 150.<br>
<br>
If Following Errors occur under normal operations, the axis should      be either tuned better so that following errors are reduced, or      Velocity, Accelerations, and/or Jerk settings reduced to make the      trajectories less demanding to follow.&nbsp; Otherwise the <em>Max Following      Error</em> should be increased if such errors are tolerable for the      application.</p>
<p><em><a name="Inv_Dist_Per_Cycle">Inv Dist Per Cycle</a></em> applies to 
Stepper, 3 Phase, and 4 Phase motors driven by SnapAmps. Note this parameter has no effect on External Step and Direction Drives. For a stepper motor, the <em>distance 
per cycle</em> defines the distance that the commanded destination should change 
by for a motor coil to be driven through a complete sinusoidal cycle. 
Parameter should be entered as the inverse (reciprocal) of the distance per 
cycle. Stepper motors are most often characterized by shaft angle change 
per &quot;Full Step&quot;. A motor coil is driven through a complete cycle every 
four - &quot;Full Steps&quot;. See the following examples:</p>
<p><strong>Example #1 </strong>: A mechanism moves 0.001&quot; 
for each full step of a step motorIt is desired for commanded distance to 
be in inches.</p>
<p>Result: One Cycle = 4 full steps = 
0.004&quot;,Thus InvDistPerCycle = 1.0/0.004 = 250.0 (cycles/inch) 
Commanding a move of 1.00 will generate 250 sine waves, or the equivalent of 
1000 full steps, or one inch of movement..</p>

<p><strong>Example #2 </strong>: InvDistPerCycle is left 
at the default value of 1.0.</p>
<p>Result: Move units are in cycles 
Commanding a move of 50 will generate 50 sine waves, or the equivalent of 200 
full steps, or one revolution of a 200 Step or 1.8 degree motor.</p>

<p>For 3 Phase or 4 Phase motors, <em>Inv 
Dist Per Cycle</em> represents the inverse of the distance for one complete 
commutation cycle See the example below.</p>

<p><strong>Example #3</strong> : A 3 phase motor/encoder 
has a 4096 count per revolution encoder which is used for position feedback and 
for motor commutation InputGain0 is set to 1.0 so position measurement 
remains as encoder counts. The motor design issuch that the 
commutation goes through 3 complete cycles each motor revolution. </p>
<p>Result: One Cycle = 4096 counts/3.0
Thus InvDistPerCycle = 3.0/4096 = 0.000732421875.</p>

<p>Note that it is important to use a 
high degree of precision to avoid commutation errors after moving to very large 
positions (or at constant velocity for a long period of time). <strong><em> KFLOP
</em></strong> maintains <em>Inv Dist Per Cycle</em> (as well as position) as a 
double precision (64 bit) floating point number for this reason (<em>more than 70 
years</em> at 1 MHz would be required to have 1 count of error).</p>

<p><em><a name="Lead_Compensation">Lead Compensation</a></em> may be used to 
compensate for motor inductance. When a voltage is applied to a coil at a 
low frequencies, the current flow is dictated by the coil's resistance and is 
constant. As the frequency increases at some point, where
<img src="Config14.gif" align="middle">, the inductance, <em>L</em>,
begins to dominate and the current drops (see plot below). <em><strong>KFLOP's</strong></em> 
Lead Compensator has the opposite effect, it has a constant gain of 1 and at 
some point increases with frequency. The Lead Compensation parameter sets 
(indirectly) the frequency where this occurs. If the frequency is set to 
match the frequency of the motor, the effects will cancel, and the motor current 
(and torque) will remain constant to a much higher frequency. </p>
<p>This assumes that the nominal drive voltage is lower than the available 
supply voltage. For example, a 5V stepper motor might be driven with a 15V 
supply to allow head room for the applied voltage to be increased at high 
frequencies (speeds).</p>
<p>
<img src="Lead.PNG" width="367" height="416" align="left" />The 
simple formula that implements the Lead Compensation is:</p>
<p><em>v ' = v + &#916;v L</em></p>
<p>where <em>v</em> is the voltage before the 
compensation, <em>v'</em> is the voltage after the compensation, 
<em>&#916;v </em>is the change in output voltage from the 
last servo sample, and <em>L</em> is the Lead Compensation value.</p>
<p>The following formula will compute the &quot;knee&quot; frequency for a particular <em>
lead</em> and servo sample rate (normally <em>T</em>=90 us). </p>
<p><img src="Config11.gif"></p>
<p>or the inverse of this formula will provide the lead value to position the 
knee at a particular frequency.</p>
<p><img src="Config12.gif"></p>
<p>The Following table generated from the above formula may also be used. 
For most motors the Lead Compensation values will be within the range of 5 - 20.</p>

<div style="clear: both;"></div>

<table class="tableSmall">
	<tr>
		<th>Freq. Hz</th>
		<th>Lead</th>
	</tr>
	<tr>
		<td>50</td>
		<td>35.37</td>
	</tr>
	<tr>
	  <td>60</td>
	  <td>29.47</td>
    </tr>
	<tr>
	  <td>70</td>
	  <td>25.26</td>
    </tr>
	<tr>
	  <td>80</td>
	  <td>22.11</td>
    </tr>
	<tr>
	  <td>90</td>
	  <td>19.65</td>
    </tr>
	<tr>
	  <td>100</td>
	  <td>17.69</td>
    </tr>
	<tr>
	  <td>120</td>
	  <td>14.74</td>
    </tr>
	<tr>
	  <td>140</td>
	  <td>12.63</td>
    </tr>
	<tr>
	  <td>160</td>
	  <td>11.06</td>
    </tr>
	<tr>
	  <td>180</td>
	  <td>9.83</td>
    </tr>
	<tr>
	  <td>200</td>
	  <td>8.85</td>
    </tr>
	<tr>
	  <td>220</td>
	  <td>8.04</td>
    </tr>
	<tr>
	  <td>240</td>
	  <td>7.37</td>
    </tr>
	<tr>
	  <td>260</td>
	  <td>6.81</td>
    </tr>
	<tr>
	  <td>280</td>
	  <td>6.32</td>
    </tr>
	<tr>
	  <td>300</td>
	  <td>5.90</td>
    </tr>
	<tr>
	  <td>350</td>
	  <td>5.06</td>
    </tr>
	<tr>
	  <td>400</td>
	  <td>4.43</td>
    </tr>
	<tr>
	  <td>450</td>
	  <td>3.94</td>
    </tr>
	<tr>
	  <td>500</td>
	  <td>3.55</td>
    </tr>
	<tr>
	  <td>550</td>
	  <td>3.23</td>
    </tr>
	<tr>
	  <td>600</td>
	  <td>2.96</td>
    </tr>
	<tr>
	  <td>650</td>
	  <td>2.74</td>
    </tr>
	<tr>
	  <td>700</td>
	  <td>2.54</td>
    </tr>
	<tr>
	  <td>750</td>
	  <td>2.38</td>
    </tr>
	<tr>
	  <td>800</td>
	  <td>2.23</td>
    </tr>
	<tr>
	  <td>850</td>
	  <td>2.10</td>
    </tr>
	<tr>
	  <td>900</td>
	  <td>1.99</td>
    </tr>
	<tr>
	  <td>950</td>
	  <td>1.88</td>
    </tr>
	<tr>
	  <td>1000</td>
	  <td>1.79</td>
    </tr>	
</table>

<p>&nbsp;</p>
<p><img src="Lead0TimePlot.PNG" width="429" height="326" alt="Lead Time Plot" /></p>
<p>This plot above displays a simple 0.5 second motion with no Lead Compensation 
for a Microstepper Motor. Position axis shown on the primary (left axis) 
for the red plot has units of cycles. PWM output shown on the secondary 
(right axis) for the green plot has units of PWM counts. Move parameters 
are: Vel=200 cycles/sec, Accel=200 cycles/sec<sup>2</sup>, Jerk=10000 
cycles/sec<sup>3</sup>. Note that regardless of velocity PWM amplitude is 
constant.</p>
<p>
<img src="Lead27TimePlot.PNG" width="431" height="324" /></p>
<p>This plot displays the same 0.5 second motion with Lead Compensation = 27.0. 
All other parameters same as above. Note how PWM amplitude increases with 
velocity.</p>

<p>If motor parameters are unknown, a trial and error approach may be used to 
find the best lead compensation value. The following procedure may be used:</p>
<ol>
  <li>Set Lead Compensation to zero</li>
  <li>Increase motor speed until a drop in torque is first detected</li>
  <li>Increase Lead Compensation until normal torque is restored</li>
</ol>
<p>Setting the Lead Compensation too high should be avoided, as it may cause 
over current in the motor at medium speeds or voltage distortion due to 
saturation (clipping).</p>
    <p>Note with current mode drives such as SnapAmp Lead compensation for motor inductance is not normally required.</p>
    
<h2><a name="Master/Slave_Settings">Master/Slave Settings</a></h2>

<p><img src="MasterSlave.png" align="left" />Configures the axis to be slaved to another axis. If slaved when the 
master axis moves, this axis will be commanded to move by an amount as scaled by 
the slave gain. If the Slave Gain is negative the slaved axis will move in 
the opposite direction as the Master. See also Console commands
<a href="../Cmd.htm#SlaveGain">SlaveGain</a> and <a href="../Cmd.htm#MasterAxis">
MasterAxis</a>. Setting the Master axis as -1 will disable slaving for 
this axis.</p>

<div style="clear: both;"></div>

<h2><a name="Backlash_Settings">Backlash Settings</a></h2>

<p><img src="Backlash.png" align="left" /></p>

<p>Configures the Backlash Compensation for the axis. To compensate for 
backlash in an axis, an offset in the commanded position may be applied when 
moving in the positive direction, and not applied when moving in the negative 
direction. The amount and rate at which the offset is applied is specified 
here. See also <a href="../Cmd.htm#BacklashMode">BacklashMode</a>,
<a href="../Cmd.htm#BacklashAmount">BacklashAmount</a> and
<a href="../Cmd.htm#BacklashRate">BacklashRate</a> Console commands. </p>

<div style="clear: both;"></div>

<h2><a name="Limit_Switch_Options">Limit Switch Options</a></h2>
<p>
<img src="Config7.png" align="left" /><em><strong>KFLOP</strong></em> has the ability to monitor limit switch inputs for each 
axis and stop motion when a physical limit switch is detected. The limit 
switch options allow this feature to be enabled or disabled for each limit 
(positive or negative), what specific bit to be monitored for each limit, what 
polarity of the bit indicates contact with the limit, and what action to perform 
when a limit is detected. </p>

<p>Select <em>Watch Limit </em>to enable limit switch monitoring.</p>

<p>Select <em>Stop when low</em> to select negative true logic for the limit 
(motion will be stopped when a low level is detected).</p>

<p>Specify a <em>bit no.</em> for which bit is to be monitored for the limit 
condition. See the <a href="../DigitalIOScreenKFLOP/DigitalIOScreen.htm">
Digital IO Screen</a> for current I/O bit status and a recommended bit 
assignment for limit switches (bits 12 through 19). If in a particular 
application it isn't critical to determine which Limit Switch (either positive 
or negative, or even which axis) the number of digital I/O bits consumed by 
limit switches may be reduced by &quot;wire ORing&quot; (connecting in parallel) multiple 
switches together. In this case, the same bit number may be specified more 
than one place.</p>

<p>The Action drop down specifies what action should be performed when a limit 
is encountered.</p>

<p><em>Kill Motor Drive</em> - will completely disable the axis whenever the limit 
condition is present. Note that it will not be possible to re-enable the 
axis (and move out of the limit) while the limit condition is still present and 
this mode remains to be selected.</p>

<p><em>Disallow drive into limit</em> - will disable the axis whenever the limit 
condition is present <em>and</em> a motion is made into the direction of the 
limit. This mode will allow the axis to be re-enabled while inside the 
limit and will allow a move away from the limit.</p>

<p><em>Stop Movement</em> - this action will keep the axis enabled, but will FeedHold the 
Coordinate System. This will cause commanded positions to decelerate to a 
stop in a controlled manner. Independent motions will decelerate to a stop 
in the same manner as a Jog to zero speed would cause. Coordinated Motion 
will decelerate all axes to a stop along the motion path.</p>

<p>The FeedHold mode will remain and prevent any further motion until cleared 
In KMotion.exe the <img src="ConfigFeedHold.png" width="41" height="36"> 
button will flash and can be pushed to clear the Feedhold In KMotionCNC 
Feedhold can be cleared by pushing
<img src="ConfigFeedHoldCNC.png" width="98" height="87">. If 
further motion is attempted into the Soft Limit another Feedhold will occur. 
However if no motion, or motion out of the Limit, Feedhold will remain clear and 
the motion will be allowed. </p>

<h2><a name="Soft_Limits">Soft Limits</a></h2>

<p>Soft Limits will always prevent motion in the same manner as a Hardware Limit 
with the Stop Movement Action Selected. This occurs regardless of the 
Action Type Selected for the Hardware Limit Switches. To disable Soft 
Limits set them to a huge range which could never occur. Soft Limits 
prevent motion within KFLOP when Jogging, moving and so forth. They also 
are are uploaded by Applications such as KMotionCNC and used to prevent motion 
during Trajectory Planing.</p>

<h2><a name="Launch_on_Power_U">Launch on Power Up</a></h2>

<div style="float: left; margin-right: 30px;"><img src="Config8.gif" align="left" /></div>

<p>The launch on power up configuration specifies which User Programs are to be 
automatically launched on power up for stand alone operation of <em><strong>KFLOP</strong></em> 
See the <a href="../ProgramScreen/ProgramScreen.htm">C Program Screen</a> for 
information on how to Edit, Compile, and Download a C program into <strong><em>KFLOP</em></strong> 
for execution into one (or more) of the 7 Thread program spaces within <em><strong>
KFLOP</strong></em>.</p>

<div style="clear: both;"></div>

<p>To configure a program execute on power up, perform the following steps:</p>
<ol>
  <li><em>Compile and Download</em> a C Program to a particular Thread Space.</li>
  <li>Select <em>Launch on Power Up</em> for the same Thread.</li>
  <li><em>Flash</em> the User Memory (see following section).</li>
  <li><em>Cycle Power</em> on the <em><strong>KFLOP</strong></em>.</li>
</ol>

<h2><a name="FLASH">FLASH - KFLOP</a> <a href="#FLASHKOGNA">(see below for Kogna)</a></h2>
<div style="float: left; margin-right: 30px;"><img src="Config9.gif" align="left" /></div>

<p>The entire user memory space may be Flashed into nonvolatile memory by 
depressing the <em>Flash - User Memory</em> button. This saves all of the 
axis configurations, all user program thread spaces, and the user persistent 
data section. On all subsequent power up resets, <em><strong>KFLOP</strong></em> 
will revert to that saved configuration. (Note that it is preferred to have the 
host, or a user program, configure the board before each use rather than relying 
on the exact state of a KFLOP set to a particular state at some point in the 
past).</p>
<p>To upgrade the system firmware in a <em><strong>KFLOP use </strong></em>the <em>Flash - 
New Version</em> button. The user will be prompted to select a <strong>
DSPKFLOP.out</strong> COFF file from within the <em><strong>KMotion</strong></em> Install 
Directory to download and Flash. Note that all user programs and data will 
be deleted from <em><strong>KFLOP </strong></em>when loading a new version </p>
<p>After the firmware has been flashed it is necessary to re-boot the <em><strong>
KFLOP</strong></em> in order for the new firmware to become active.</p>
<p>It is important that the <strong>&lt;Install Directory&gt;\DSP_KFLOP\DSPKFLOP.out</strong> 
file match the firmware that is flashed into <em><strong>KFLOP</strong></em>. User C 
programs are <em>Linked</em> using this file to make calls and to access data 
located within the <em><strong>KFLOP</strong></em> firmware. Whenever a user program is 
compiled and linked using this file, the timestamp of this file is compared 
against the timestamp of the executing firmware (if a <em><strong>KFLOP</strong></em> is 
currently connected). If the timestamps differ, an error message will 
be displayed, and it is not recommended to continue. The &quot;Version&quot; Console 
Script Command may also be used to check the firmware version.</p>

<p>In all cases while flashing firmware or user programs the process should not 
be interrupted or a corrupted flash image may result which renders the board 
un-bootable. However if this occurs the <em>Flash Recovery </em>mode 
may be used to recover from the situation. To perform the recovery, press 
the <em>Flash Recovery </em>button and follow the dialog prompts to:</p>
<ol>
  <li>Turn off <em><strong>KFLOP</strong></em></li>
  <li>Run <em><strong>KMotion.exe</strong></em><strong>,</strong> Config/Flash Screen, select "Recovery"</li>
  <li>Click OK (see below)</li>
  <li> Select the <strong>DSPKFLOP.out</strong> file to boot (see below)</li>
  <li>Click OK</li>
  <li>When prompted, turn on <strong><em>KFLOP</em></strong></li>
  <li>After <em><strong>KFLOP</strong></em> boots, Flash the New Version</li>
</ol>

<p><img src="Config6.jpg" width="409" height="204" /></p>
<p><img src="Config15.jpg" width="500" height="365" /></p>
<h2><a name="FLASHKOGNA">FLASH Kogna</a></h2>

<div style="float: left; margin-right: 30px;"><img src="Config9.gif" align="left" /></div>

<p>The entire user memory space may be Flashed into nonvolatile memory by 
depressing the <em>Flash - User Memory</em> button. This saves all of the 
axis configurations, all user program thread spaces, and the user persistent 
data section. On all subsequent power up resets, <em><strong>Kogna</strong></em> 
will revert to that saved configuration. (Note that it is preferred to have the 
host, or a user program, configure the board before each use rather than relying 
on the exact state of a <em><strong>Kogna</strong></em> set to a particular state at some point in the 
past).</p>
<p>To upgrade the system firmware in a <em><strong>Kogna</strong></em> use the <em>Flash - 
New Version</em> button. The user will be prompted to select a <strong>
DSPKOGNA.out</strong> COFF file from within the <em><strong>KMotion</strong></em> Install 
Directory to download and Flash. Note that all user programs and data will 
be deleted from <em><strong>Kogna </strong></em>when loading a new version.  This command can be used to remove all User Flashed Programs and data.</p>
<p>After the firmware has been flashed it is necessary to re-boot  <em><strong>
Kogna</strong></em> in order for the new firmware to become active.</p>
<p>It is important that the <strong>&lt;Install Directory&gt;\DSP_KOGNA\DSPKOGNA.out</strong> 
file match the firmware that is flashed into <em><strong>Kogna</strong></em>. User C 
programs are <em>Linked</em> using this file to make calls and to access data 
located within the <em><strong>Kogna</strong></em> firmware. Whenever a user program is 
compiled and linked using this file, the timestamp of this file is compared 
against the timestamp of the executing firmware (if a <em><strong>Kogna</strong></em> is 
currently connected). If the timestamps differ, an error message will 
be displayed, and it is not recommended to continue. The &quot;Version&quot; Console 
Script Command may also be used to check the firmware version.</p>

<p>In all cases while flashing firmware or user programs the process should not 
be interrupted or a corrupted flash image may result which renders the board 
un-bootable. However if this occurs the <em>Flash Recovery </em>mode 
may be used to recover from the situation. To perform the recovery:</p>
<ol>
  <li>Turn off <em><strong>Kogna</strong></em></li>
  <li>Turn on <em><strong>Kogna</strong></em></li>
  <li>While Kogna's LEDs are flashing remove <a href="../SchematicsKogna/ConnectorsKogna.html#JP13">Jumper JP13</a></li>
  <li>Run <em><strong>KMotion.exe</strong></em><strong>,</strong> Config/Flash Screen, select "New Version"</li>
  <li> Select the <strong>DSPKOGNA.out</strong> file to Flash</li>
  <li>Click OK</li>
  <li>After successful, cycle power</li>
</ol>
<p>&nbsp;</p>

	</div>
</body>
</html>
