<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>


<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<title>G Code Screen Features</title>

<link rel="stylesheet" type="text/css" href="css/style.css">
</head>

<body>

<div id="logo"><a href="index.htm"></a></div>

<div id="home">
	<a href="index.htm">Table of contents</a> | 
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Regular Expressions</h1>

<p>Regular Expressions allow a powerful find and replace 
functionality.</p>
<p>[1] char matches itself, unless it is a special character (metachar): . \ [ ] 
* + ^ $</p>
<p>[2] . matches any character.</p>
<p>[3] \ matches the character following it, except when followed by a left or 
right round bracket, a digit 1 to 9 or a left or right angle bracket. (see [7], 
[8] and [9]) It is used as an escape character for all other 
meta-characters, and itself. When used in a set ([4]), it is treated as an 
ordinary character.</p>
<p>[4] [set] matches one of the characters in the set. If the first 
character in the set is &quot;^&quot;, it matches a character NOT in the set, i.e. 
complements the set. A shorthand S-E is used to specify a set of characters S 
upto E, inclusive. The special characters &quot;]&quot; and &quot;-&quot; have no special meaning if 
they appear as the first chars in the set. examples: match: [a-z] 
any lowercase alpha [^]-] any char except ] and - [^A-Z] any char except 
uppercase alpha [a-zA-Z] any alpha</p>
<p>[5] * any regular expression form [1] to [4], followed by closure char (*) 
matches zero or more matches of that form.</p>
<p>[6] + same as [5], except it matches one or more.</p>
<p>[7] a regular expression in the form [1] to [10], enclosed as \(form\) 
matches what form matches. The enclosure creates a set of tags, used for [8] and 
for pattern substitution. The tagged forms are numbered starting from 1.</p>
<p>[8] a \ followed by a digit 1 to 9 matches whatever a previously tagged 
regular expression ([7]) matched. </p>
<p>[9] \&lt; a regular expression starting with a \&lt; construct\&gt; and/or ending with 
a \&gt; construct, restricts the pattern matching to the beginning of a word, 
and/or the end of a word. A word is defined to be a character string beginning 
and/or ending with the characters A-Z a-z 0-9 and _. It must also be preceded 
and/or followed by any character outside those mentioned.</p>
<p>[10] a composite regular expression xy where x and y are in the form [1] to 
[10] matches the longest match of x followed by a match for y.</p>
<p>[11] ^ a regular expression starting with a ^ character $ and/or ending with 
a $ character, restricts the pattern matching to the beginning of the line, or 
the end of line. [anchors] Elsewhere in the pattern, ^ and $ are treated as 
ordinary characters.</p>
<p><em><strong>Example: to replace comment lines that begin with a ; and proceed to 
the end of the line with comments that are enclosed within (*&nbsp; *)</strong></em></p>
<p><em><strong>Change:</strong></em></p>
<p><strong>;This is a comment</strong></p>
<p><em><strong>To:</strong></em></p>
<p><strong>(* This is a comment *)</strong></p>
<p>&nbsp;</p>
<p><em><strong>Specify:</strong></em></p>
<p><strong>Find : (a semicolon, then tag any and all characters to the end of line as 
tag #1) </strong></p>
<p><strong>;\(.*\)$</strong></p>
<p><strong>Replace with ( parenthesis, asterisk, space, the tagged characters,&nbsp; 
space,&nbsp; asterisk, parenthesis)</strong></p>
<strong>(* \1 *)</strong>


<p>Acknowledgements:<br>
<p>Regular expression pattern matching and replacement By: Ozan S. Yigit (oz) Dept. 
of Computer Science York University<br />
Original code available from <a href="http://www.cs.yorku.ca/~oz/" target="_blank">
http://www.cs.yorku.ca/~oz/</a> Translation to C++ by Neil Hodgson neilh@scintilla.org<br>
These routines are the PUBLIC DOMAIN equivalents of regex routines as found in 
4.nBSD UN*X, with minor extensions.<br>
These routines are derived from various implementations found in software tools 
books, and Conroy's grep. They are NOT derived from licensed/restricted 
software.<br />
For more interesting/academic/complicated implementations, see Henry Spencer's 
regexp routines, or GNU Emacs pattern matching module.</p>

	</div>
</body>

</html>
