<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>Data Gathering</title>

<link rel="stylesheet" type="text/css" href="css/style.css">
<link rel="stylesheet" href="css/prism.css" data-noprefix />
<script src="js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="index.htm"></a></div>

<div id="home">
	<a href="index.htm">Table of contents</a> | 
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Data Gathering</h1>

<p><em><strong>KMotion</strong></em> provides a flexible method for capturing data of all 
types every servo sample period (90µs). This same method is how <strong><em>KMotion</em></strong> gathers step response and Bode plot data.</p>

<p>Basically a list of addresses and data types are defined. An end 
address of where to stop capturing data is set, and when triggered the Servo 
Interrupt will capture the specified data values. All values are converted 
to double precision numbers before being placed into the gather buffer. 
The maximum size of the Gather Buffer is 1,000,000 double precision values (8 
MBytes).</p>

<pre>
	<code class="language-c">
	#define MAX_GATHER_DATA 1000000 // Size of gather buffer (number of doubles, 8 bytes each).
	</code>
</pre>

<p>The following example shows how to setup to capture the two PWM drives (for a 
stepper motor) and the commaned destination for a 0.5 second time period, 
trigger the capture, make a simple move, wait until the capture is complete, and 
print the results.</p>

<pre>
	<code class="language-c">
	#include &quot;KMotionDef.h&quot;
	
	main()
	{
		int i,n_Samples = 0.5 / TIMEBASE;
		
		gather.Inject = FALSE; // Don't inject any Data anywhere
		
		gather.list[0].type = GATHER_LASTPWM_TYPE; // Gather PWM 0
		gather.list[0].addr = &amp;LastPWM[0];
		
		gather.list[1].type = GATHER_LASTPWM_TYPE; // Gather PWM 1
		gather.list[1].addr = &amp;LastPWM[1];
		
		gather.list[2].type = GATHER_DOUBLE_TYPE; // Gather Dest axis 0
		gather.list[2].addr = &amp;chan[0].Dest;
		
		gather.list[3].type = GATHER_END_TYPE;
		
		gather.bufptr = (double *)0xfffffffc; // force more than endbuf
		gather.endptr = gather_buffer + 3 * n_Samples;
		
		TriggerGather(); // start capturing data
		
		MoveRel(0,20); // Start a motion
		
		while (!CheckDoneGather()) ; // what till all captured
		
		// print all captured data (every 50th sample)
		
		for (i=0; i&lt;n_Samples; i+=10)
		printf(&quot;%d,%f,%f,%f\n&quot;, i,gather_buffer[i*3],
		gather_buffer[i*3+1],
		gather_buffer[i*3+2]);
  	{
	</code>
</pre>

<p>Data will be printed to the <em><strong>KMotion</strong></em> 
Console Screen which is also written to a permanent log file at:</p>
<p><strong>&lt;KMotionInstallDir&gt;\KMotion\Data\LogFile.txt</strong></p>
<p>Normally data scrolls off of the Console Screen into the permanent log file, to flush all data into the log file, exit the <strong><em>KMotion </em></strong>application.</p>
<p>An Excel plot of the captured data is shown below.</p>

<p><img src="GatherExamplePlot.PNG" width="669" height="352" alt="Gather Example Plot" /></p>

	
</div>
<p>&nbsp;</p>
</body>

</html>
