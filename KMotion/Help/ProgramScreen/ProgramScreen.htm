<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>C Program Screen</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

	<div id="sidebar" class="small">
  
	  <h3>Constants:</h3>
    
	    <p>
	    FALSE 0<br />
	    TRUE 1</p>
      <p>
        PI 3.14159265358979323846264<br />
        PI_F 3.1415926535f<br />
        TWO_PI (2.0 * PI)<br />
        TWO_PI_F (2.0f * PI_F )<br />
        PI_2F (PI_F * 0.5f) <br />
  	  </p>
      <p>
        TRAJECTORY_OFF 0 <br />
        TRAJECTORY_INDEPENDENT 1<br />
        TRAJECTORY_LINEAR 2 <br />
        TRAJECTORY_CIRCULAR 3<br />
        TRAJECTORY_SPECIAL 4
      </p>
      
      <h3>Axis Input Modes</h3>
       
      <p>
       ENCODER_MODE 1<br />
       ADC_MODE 2<br />
       RESOLVER 3<br />
       USER_INPUT_MODE 4
      </p>
   
      <h3>Axis Output Modes</h3>
      	<p>
        MICROSTEP_MODE 1<br />
        DC_SERVO_MODE 2<br />
        BRUSHLESS_3PH_MODE 3<br />
        BRUSHLESS_4PH_MODE 4<br />
        DAC_SERVO_MODE 4<br />
		</p>

  	  <h3>Data Gather/Plot Functions:</h3>
       
       	<p>
        void SetupGatherAllOnAxis(int c, int n_Samples);<br />
        void TriggerGather();<br />
        int CheckDoneGather();<br />
  		</p>
     
      <h3>Analog I/O Functions:</h3>
       
       <p>
        ADC(ch);<br />
        DAC(ch, value);
        </p>

        <h3>Power Amp Functions:</h3>
        
        void WritePWMR(int ch, int v);<br />
        void WritePWM(int ch, int v); <br />
        void Write3PH(int ch, float v, double angle_in_cycles);<br />
        void Write4PH(int ch, float v, double angle_in_cycles);
        </p>
        
        <h3>Timer Functions:</h3>
      	<p>
        double Time_sec();<br />
        void WaitUntil(double time_sec);<br />
        void Delay_sec(double sec);<br />
        double WaitNextTimeSlice(void);>
  		</p>
  		
  		<h3>Axis Move Functions:</h3>
       <p>
        void DisableAxis(int ch);<br />
        void EnableAxisDest(int ch, double Dest);<br />
        void EnableAxis(int ch);<br />
        void Zero(int ch);<br />
        void Move(int ch, double x);<br />
        void MoveRel(int ch, double dx);<br />
        int CheckDone(int ch);<br />
        void MoveXYZ(double x, double y, double z);<br />
        int CheckDoneXYZ();<br />
        void DefineCoordSystem(int axisx, int axisy, int axisz, int axis a);
        </p>
        
        <h3>Digitial I/O Functions:</h3>
        
        <p>
        <a name="SetBitDirection"></a>void SetBitDirection(int bit, int dir);<br />
        int GetBitDirection(int bit);<br />
  		<a name="SetBit"></a>void SetBit(int bit);<br />
  		<a name="ClearBit"></a>void ClearBit(int bit);<br />
  		<a name="SetStateBit"></a>void SetStateBit(int bit, int state);<br />
  		<a name="ReadBit"></a>int ReadBit(int bit);
  		</p>
  		
  		<h3>Print to Console Screen Functions:</h3>
       
        <p>int printf(const char *format, ...);</p>
  
      	<h3>Print to Windows File Functions:</h3>
       	<p>
        FILE *fopen(const char*, const char*); <br />
        int fprintf(FILE *f, const char * format, ...);<br />
        int fclose(FILE *f); 
     	</p>
     	
      	<h3>Thread Functions:</h3>
      	<p>
        void StartThread(int thread);<br />
        void PauseThread(int thread);<br />
        void ThreadDone();<br />
        int ResumeThread(int thread);<br />
  		</p>
      	
      	<h3>Math Functions:</h3>
      	
      	<p> 
      	double sqrt(double x);<br />
        double exp(double x);<br />
        double log(double x);<br />
        double log10(double x);<br />
        double pow(double x, double y);<br />
        double sin(double x);<br />
        double cos(double x);<br />
        double tan(double x);<br />
        double asin(double x);<br />
        double acos(double x);<br />
        double atan(double x);<br />
        double atan2(double y, double x); </p>
      <p>
        float sqrtf (float x);<br />
        float expf (float x);<br />
        float logf (float x);<br />
        float log10f(float x);<br />
        float powf (float x, float y);<br />
        float sinf (float x);<br />
        float cosf (float x);<br />
        float tanf (float x);<br />
        float asinf (float x);<br />
        float acosf (float x);<br />
        float atanf (float x);<br />
        float atan2f(float y, float x); </p>
	</div>
	
	<div id="content">
	  <p><img src="ProgramScreenfiles/ProgramScreen.png" width="565" height="568" alt="Program Screen" /></p>
		
	  <p>The <strong><em>C Program</em></strong><em><strong> Screen</strong></em> allows the user to edit 
      C language programs, compile, link, download, and run them within the <em>
      <strong>KMotion</strong></em> board. C programs executing within the <em><strong>
      KMotion</strong></em> board have direct access to all the Motion, I/O, and other 
      miscellaneous functions incorporated into <em><strong>KMotion</strong></em> System. 
      <p>One of the most powerful features of the <em><strong>KMotion</strong></em> system 
      is the ability for a user to compile and download native DSP programs and 
      have them run in real time. Native DSP code runs faster than 
      interpreted code. The TMS320C67x DSP that powers the <em><strong>KMotion</strong></em> 
      system has hardware support for both 32 bit <em>and</em> 64 bit floating point 
      math. Multiple threads (programs) may execute simultaneously (up to 
      7). The integrated C compiler allows with a single 
      pushbutton <img src="Progra1.gif" align="center" vspace="5" hspace="2" alt="Push button"> / to 
      save, compile, link, download, and execute all within a fraction 
      of a second. After programs have been developed and tested they may 
      be <a href="../ConfigurationScreen/ConfigurationScreen.htm#FLASH">flashed into memory</a> and 
      run stand alone with no host connection.</p>
      
      <div style="float: left; margin-right: 30px;">
      <img src="ProgramScreenfiles/ContextMenuwithValidateSmall.jpg" width="277" height="300">
      </div>
            
      <p>Other features of the <strong><em>C Program</em></strong><strong><em> Screen </em></strong>
      include a rich text editor with syntax highlighting, keyword
      <a href="ShowDropDown.htm">drop down lists</a>, and <a href="ShowTips.htm">
      function tips</a>. </p>
      <p>Right-mouse clicking brings up  the <a href="ShowContextMenu.htm">context menu</a> (undo/redo, find/replace with regular 
      expressions, code  validator and code beautifier).</p>
  
      <div style="clear: both;"></div>
      <p>Information about the  <a href="TICompiler.htm">TI Compiler</a>.</p>
      <p>See list on the left side for available constants and functions.</p>
      <p><img border="0" src="ProgramScreenfiles/Arrow.png" width="88" height="31"><p>For a 
      more details on the functions, see
      the  <a href="../../../DSP_KFLOP/KMotionDef.h">KMotionDef.h</a> header file. 
      This file is normally included into a user program so that all accessible 
      base functions and data structures are defined.<p>See
        <a href="../../../DSP_KFLOP/PC-DSP.h">PC-DSP.h</a> for common
        definitions between the PC host and <em><strong>KMotion</strong></em> DSP.<p></td>
	</div>

	</div>

</body>

</html>