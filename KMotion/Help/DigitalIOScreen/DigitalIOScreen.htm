<!DOCTYPE html>

<html>

<head>



<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>

<meta http-equiv="Pragma" content="no-cache"/>

<meta http-equiv="Expires" content="0"/>





<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">

<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">

<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

<meta http-equiv="Content-Language" content="en-us">



<title>Digital IO Screen</title>



<link rel="stylesheet" type="text/css" href="../css/style.css">

<link rel="stylesheet" href="../css/prism.css" data-noprefix />

<script src="../js/prism.js"></script>

</head>



<body>



<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">



<h1>Digital I/O Screen</h1>



<p><img src="DigitalIOScreen.PNG" width="319" height="422" alt="Digital IO Screen" /></p>



<p>The <em><strong>Digital I/O Screen</strong></em> displays and allows changes to the 

current state of the <em><strong>KMotion</strong></em> digital I/O bits. </p>



<p><em><strong>KMotion</strong></em> has a number of digital I/O bits that may be used as <em>

GPIO</em> (General Purpose Inputs or Outputs) or as specific dedicated functions 

(encoder inputs). There are 28 bits that may be utilized as GPIO (bits 0 - 

27). Each bit may be independently defined as either an input or an 

output. On Power UP <em><strong>KMotion</strong></em> defines all I/O as inputs by 

default. Any bit may be configured as an output by checking the 

corresponding box in the &quot;Output&quot; columns. Alternately, the bits may be 

configured by a C program running within the <em><strong>KMotion</strong></em> (See

<a href="../ProgramScreen/ProgramScreen.htm#SetBitDirection">

SetBitDirection()</a>) or by Script commands (See

<a href="../ConsoleScreen/ConsoleScreen.htm#SETBITDIRECTION">

SetBitDirection</a>) sent to the <em><strong>KMotion</strong></em>. </p>



<p>The <em>State</em> of each I/O bit may be observed in the corresponding 

checkbox under the &quot;State&quot; columns. If the bit is defined as an output, 

clicking on the &quot;State&quot; checkbox will toggle the bit. Alternately, the 

bits may be read, set, or cleared by a C program running within the <em><strong>

KMotion</strong></em> (See <a href="../ProgramScreen/ProgramScreen.htm#ReadBit">

ReadBit()</a>, <a href="../ProgramScreen/ProgramScreen.htm#SetBit">

SetBit()</a>, <a href="../ProgramScreen/ProgramScreen.htm#ClearBit">

ClearBit()</a>, or

<a href="../ProgramScreen/ProgramScreen.htm#SetStateBit">SetStateBit()</a>) 

or by Script commands (See

<a href="../ConsoleScreen/ConsoleScreen.htm#READBIT">ReadBit</a>,

<a href="../ConsoleScreen/ConsoleScreen.htm#SETBIT">SetBit</a>,

<a href="../ConsoleScreen/ConsoleScreen.htm#CLEARBIT">ClearBit</a>, or

<a href="../ConsoleScreen/ConsoleScreen.htm#SETSTATEBIT">SetStateBit</a>) 

sent to the <em><strong>KMotion</strong></em>. </p>



<p>Additionally, <em>buffered</em> commands may change the state of Digital I/O 

bits. <em>Buffered</em> I/O commands are I/O commands that are inserted into 

the coordinated motion buffer. When it is required that I/O bits be 

changed at exact times within a motion sequence, <em>buffered</em> I/O commands 

may be inserted into the motion buffer (see

<a href="../ConsoleScreen/ConsoleScreen.htm#SETBITBUF">SetBitBuf</a>,

<a href="../ConsoleScreen/ConsoleScreen.htm#CLEARBITBUF">ClearBitBuf</a>, 

and <a href="../ConsoleScreen/ConsoleScreen.htm#SETSTATEBITBUF">

SetStateBitBuf</a>). In this case the I/O commands occur when they are 

encountered within the motion sequence. The <em><strong>KMotion</strong></em> GCode 

interpreter allows buffered I/O commands to be inserted within motion sequences 

by using a special form of GCode comment (See

<a href="../GCodeScreen/GCodeScreen.htm#BUF">buffered GCode Commands</a>).</p>



<p>The Digital I/O 0 - 21 are routed to connector

<a href="../Schematics/Connectors.htm#JP3">JP3</a>, and Digital I/O 20 - 27 are 

routed to connector <a href="../Schematics/Connectors.htm#JP4">JP4</a> all as LVTTL 

signals (which are also 5V TTL compliant and tolerant). Note that Digital 

I/O 20 and 21 are routed to both connectors.</p>

<p>Digital I/O bits 0 - 7 are wired internally to the 4 quadrature encoder inputs 

(2 bits - Phase A and Phase B for each encoder). For each encoder that is 

intended to be used, the corresponding Digital I/O bits must be defined as 

inputs.</p>



<p>Digital I/O bit 28 is dedicated as the +/-15V enable. Setting this bit 

activates the <em><strong>KMotion</strong></em> on-board +/- 15V generator. The +/- 

15V is derived from the 5V supply and is able to source ~ 2 Watts of power on 

each supply (~ 130ma). This supply is required to be enable when using the 

+/- 10V ADC inputs or +/- 10V DAC outputs. </p>



<p class="warning">Caution: Shorting + or - 15V to any Digital I/O 

bit will cause permanent damage.</p>



<p>Digital I/O bit 29 is dedicated as the <em>Fan Control</em> bit. 

Applications that supply high currents (&gt; ~ 2Amps) for extended periods (&gt; ~10 

seconds) on any axis should enable the fan to cool the output stages and avoid 

thermal shutdown of the output stages.</p>



<p>Digital I/O bit 30 is dedicated as the <em>Aux Control Switch</em>. The 

Aux Control Switch may be used to switch some medium power (&lt; 30V @ 2A) device 

like a lamp or solenoid (<a href="../Schematics/Connectors.htm#Auxillary Switch Example">See 

example</a>).</p>



<p>Digital I/O bit 31 is a dedicated input of <em>Thermal Warning Status</em>. 

Any output stage that is overheating (internal junction temperature &gt; 145 

degrees C) will trigger the thermal warning and cause shutdown of all output 

stages.</p>

<p></p>



</body>



</html>

