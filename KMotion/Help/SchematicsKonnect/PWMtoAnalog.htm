<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">

<title>Konnect - PWM to Analog Example</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">

<h1>Konnect - PWM to Analog Example</h1>

<p>KFLOP/Kogna+Konnect+Simple Filter Circuit can be used to produce 
a programmable analog signal. This might be used as a basic Spindle Speed 
Control Signal if no others are available.</p>

<p>This demonstrates the flexibility of the Konnect Outputs 
which are Isolated, can sink or source current, fast, medium power, and low 
impedance</p>

<h2>Results</h2>

<p>Analog Oscilloscope traces of Analog signals generated by 
a KFLOP/Kogna Software generated PWM Signal controlling two optically isolated Konnect 
Outputs that are then passed through a simple low pass filter. </p>

<p>High resolution and response rates easily usable for speed 
control applications</p>

<p><img src="SineWave.png" width="800" height="480" alt="SineWave" /></p>

<p>Square wave to test large signal changes. Significant change in &lt; 25ms</p>

<p><img src="SquareWave.png" width="806" height="486" alt="SquareWave" /></p>

<p>Reasonable linearity. This would require calibration if higher accuracy is needed.</p>

<p><img src="LinearityChart.png" width="695" height="572" alt="LinearityChart" /></p>

<h2>Circuit</h2>

<p>Simple cascaded dual low pass filters. Only 5 
components. One resistor type and one capacitor type. Component 
values are not critical (R1 and R2 should be matched).</p>

<p>One Konnect Output charges the capacitors and one output 
discharges them. Both should not be turned on simultaneously (but no 
damage will occur if they are as R1+R2 will limit the current).</p>

<p>The relatively low resistance values (100 Ohms) provides 
low output impedance so that any connected load should have a minimal effect. 
A load of 10Kohms or higher should work well.</p>

<p>Double filtering provides low output ripple, while still 
having relatively quick response to changes, uses reasonably small capacitors, 
even with relatively low PWM rates.  </p>

<p>Konnect Outputs can be updated every 180us. So 180us 
is the basic PWM quantum. This results in ~ 10mV p-p ripple.</p>

<p><img src="LowPassCircuit.png" alt="LowPassCircuit" /></p>
<p><img src="WiredCircuit.png" width="600" height="450" alt="WiredCircuit" /></p>
<p><img src="CircuitTop.png" width="400" height="325" alt="CircuitTop" /></p>

<h2>Software</h2>

<p>This software example simulates how an RC circuit would 
respond to an applied, switched, high/low voltage.</p>

<p>If the simulated voltage is below the desired output 
voltage then the output is switched high to charge up the capacitor, otherwise 
it is switched low to discharge the capacitor.</p>

<p>The same state that is simulated is also sent to the 
Konnect Outputs to drive the real circuit. The real circuit is a bit more 
complex but the simple model works reasonably well. The two RC circuits 
will eventually evolve to the same voltage as the average PWM Voltage in the 
steady state. Only the transient response will be slightly different. 
Similarly, somewhat incorrect component values will only affect the transient 
response. The progra values were adjusted to get the best response.</p>

<p>The #define statements may require changes for your 
specific circuit and I/O Bit used.</p>

<p>The Vout value is coded to create a sine wave, but more 
typically the value would be passed in through a global persist variable as a 
Spindle Speed Setting. </p>

<pre>
	<code class="language-c">
	#include &quot;KMotionDef.h&quot;
	
	// Enables a Konnect on KFLOP JP4 Aux Port then
	// PWM's two outputs as push-pull drivers such that
	// when low passed filtered with an RC circuit becomes
	// a variable analog source.
	//
	// Configure KFLOP to service Konnect 32 Input 16 output IO board
	// Board address is 0,
	// 16 Outputs are mapped to Virtual IO 48-63 (VirtualBits)
	// 32 Inputs are mapped to Virtual IO 1024-1055 (VirtualBits[0])
	//
	// Attach Service to Aux0 Port (KFLOP JP4) instead of standard Aux1 Port (KFLOP JP6)
	//
	
	void ServiceKonnectPWM(void);
	
	double T,T0=0;
	float Vout=0.0;		// desired voltage

	main()
	{
		InitAux();
		AddKonnect_Aux0(0,&amp;VirtualBits,VirtualBitsEx);
		
		for(;;)
		{
			T=WaitNextTimeSlice();
			ServiceKonnectPWM();

			// Fixed
			// 		Vout = 0.1;

			//Generate a 5 Hz 3V Sine Wave
			Vout = 3.0f*sin(T * TWO_PI * 5.0) + 5.0;

			//Generate a Saw Tooth wave
			// 		Vout = 2 + 6.0* (5.0*T - ((int)(5.0*T)));

			//Generate a 5 Hz Square wave
			// 		Vout = (5.0*T - ((int)(5.0*T))) &gt; 0.5 ? 8 : 2;
		 }
	}
	
	#define C 0.00029f	// 1000uF
	#define R 100.0f	// 100 ohms
	#define Vcc 11.230f // supply voltage
	#define HIGH_BIT 62 // This output drives Cap high
	#define LOW_BIT 63	// This output drives Cap low

	void ServiceKonnectPWM(void)
	{
		static int FirstTime=TRUE;
		static float Vc=0.0f;
		static double T0;
		static int State;
		double T=Time_sec();
		
		if (FirstTime)
		{
			FirstTime=FALSE;
			T0=T;
 			State=0;
		}
		else
 		{
			float V,I;

			// Compute Voltage applied to Cap
			V=Vcc*State;

			// Compute current
			I=(V-Vc)/R;
			
			// Compute new Cap Voltage
			Vc += I/C*(T-T0);

			// determine next state

 			if (Vc &gt; Vout)
 			{ 
 				ClearBit(HIGH_BIT);
				SetBit(LOW_BIT);
				State=0;
			}
			else
			{ 
				ClearBit(LOW_BIT);
				SetBit(HIGH_BIT);
				State=1;
			}

			T0=T;	// save time when applied
			}
	}
	</code>
</pre>

	</div>
	<p>&nbsp;</p>
</body>

</html>