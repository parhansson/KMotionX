<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Expires" content="0"/>

<meta name="keywords" content="ethernet 16-axis controller, cnc control, motion control, cnc boards, 4-axis, 8-axis, stepper, brushless, DC motor, servo, encoder, adc, dac, motion controller, automated motion, manufacturing, Mach3">
<meta name="description" content="Manufacturer of premium motion control products for CNC Manufacturing, Robotics and Automation">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<title>KMotion DLL Driver</title>

<link rel="stylesheet" type="text/css" href="../css/style.css">
<link rel="stylesheet" href="../css/prism.css" data-noprefix />
<script src="../js/prism.js"></script>
</head>

<body>

<div id="logo"><a href="../index.htm"></a></div>

<div id="home">
<a href="../index.htm">Table of contents</a> |  
	<script>
		if (navigator.userAgent.indexOf("NT 6.2") == -1){
			document.write('<a href="https://www.dynomotion.com">Dynomotion home page</a>')
		} else {
			document.write('<a href="https://www.dynomotion.com" target="_blank">Dynomotion home page</a>')
		}
	</script>
</div>
	
<div id="searchNav">

	<div class="gcse-search">
					<script>
					  if (document.location.protocol  ==  'https:') {
					  (function() {
					  var cx = '012657033059195044748:9fmjmlufts0';
					  var gcse = document.createElement('script');
					  gcse.type = 'text/javascript';
					  gcse.async = true;
					  gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
					      '//cse.google.com/cse.js?cx=' + cx;
					  var s = document.getElementsByTagName('script')[0];
					  s.parentNode.insertBefore(gcse, s);
					})();
					  }
				      </script> 
				      <gcse:search> </gcse:search>  

	       </div>
</div>	

	


<div id="google_translate_element" style="background: transparent;" align="right"><script type="text/javascript">
if (navigator.userAgent.indexOf("NT 6.2") == -1) {
		function googleTranslateElementInit() {
	  new google.translate.TranslateElement({pageLanguage: 'en', includedLanguages: 'en,de,fr,it,es,pt,ru,uk,ar,zh-CN,zh-TW,ko,iw,hi,ja,tr', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
		}						}
	</script>
	<script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
	</script>
</div>		
<div id="main">
	
	<div id="sidebarKMDLL" class="small">
	
	<h2>KMotion Quick Reference</h2>
		
	<h3>Send Commands</h3>
	
	<p><a href="#WriteLine0">WriteLine</a></p>
	<p><a href="#WriteLineReadLine">WriteLineReadLine</a></p>
	<p><a href="#ReadLineTimeOut">ReadLineTimeOut</a></p>
	
	<h3>Board Locks</h3>
	
	<p><a href="#WaitToken">WaitToken</a></p>
	<p><a href="#KMotionLock">KMotionLock</a></p>
	<p><a href="#ReleaseToken">ReleaseToken</a></p>
	<p><a href="#Failed">Failed</a></p>
	
	<h3>Console</h3>
	
	<p><a href="#ServiceConsole">ServiceConsole</a></p>
	<p><a href="#SetConsoleCallback">SetConsoleCallback</a></p>
	
	<h3>Coff Loader</h3>
	
	<p><a href="#LoadCoff">LoadCoff</a></p>
	
	<h3>Compiler</h3>
	
	<p><a href="#CompileAndLoadCoff">CompileAndLoadCoff</a></p>
	
	<h3>USB</h3>
	
	<p><a href="#ListLocations">ListLocations</a></p>
	
	</div>

	<div id="content">
		
	<h1>KMotionDLL</h1>	
		
		<h4>CKKMotionDLL(int board);</h4>
		
		<p>Creates a CKMotionDLL object to be used to communicate to a specific board.</p>
		<p><em>board</em></p>
		<p class="indent">specifies which board in the system the object is associated with</p>
		<hr />
		
		<h4><a name="WriteLine0"></a>int WriteLine(const char *s);</h4>
		
		<p>Writes a null terminated string of characters to a specified <em><strong>KMotion</strong></em> Board. There is no wait for any response.</p>
        <p><strong>Return Value</strong></p>
		<p>0 if successful, non-zero if unsuccessful (invalid board specified)</p>
        <p><strong>Parameters</strong></p>
        <p>s</p>
        <p class="indent">Null terminated string to send</p>
          
        <p><strong>Example</strong></p>
        <pre>
        <code class="language-c">
		#include "KMotionDll.h"
		CKMotionDLL KM(0);
        
		if (KM.WriteLine(&quot;Move0=1000&quot;) MyError();
        </code>
        </pre>        
        <hr />
        
        <h4><a name="WriteLineReadLine"></a>int WriteLineReadLine(const char *s, char *response);</h4>
        
        <p>Writes a null terminated string of characters to a
        specified <em><strong>KMotion</strong></em> Board. Waits for a response string. This
        command is thread safe. It waits for the token for the specified
        board, sends the command, waits for the response, then releases the
        board.</p>
        <p><strong>Return Value</strong></p>
        <p>0 if successful, non-zero if unsuccessful (invalid
        board specified, timeout on the response)</p>
        <p><strong>Parameters</strong></p>
        <p>s</p>
        <p class="indent">Null terminated string to send</p>
        <p><em>response</em></p>
        <p class="indent">Buffer to receive the null terminated string received as response</p>
        <p><strong>Example</strong></p>
        <pre>
        <code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        char resp[256];
		
       	while (1)
        {
        	if (KM.WriteLineReadLine(0, &quot;CheckDone0&quot;,resp) MyError();
		if (strcmp(resp,&quot;1&quot;)==0) break;
        }
        </code>
        </pre>
        <hr />
        
        <h4><a name="ReadLineTimeOut"></a>int ReadLineTimeOut(char *buf, int TimeOuts);</h4>
        
      <p>Waits for a response string from a
      previously issued command. Note in a multi-process or multi thread
      environment the <em><strong>KMotion</strong></em> board should be locked prior to issuing a command
      that has a response(s), Otherwise there is a possibility that another
      process or thread may receive the expected response.</p>
      <p><strong>Return Value</strong></p>
      <p>0 if successful, non-zero if unsuccessful
      (invalid board specified, timeout on the response)</p>
      <p><strong>Parameters</strong></p>
        <p>buf</p>      
        <p class="indent">Buffer to receive the Null terminated string received as response</p>
        <p>TimeOutms</p>
        <p>Amount of time to receive a response</p>
        <p class="indent"><strong>Example</strong></p>  
        <pre>
        <code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        char resp1[256];
        char resp2[256];
        char resp3[256];
        
        // first get the token for the board to allow uninterrupted access
        if (KM.WaitToken()!=KMOTION_LOCKED) MyError();
        
		// tell the board to send 24 (32 bit) words at offset 0
        if (KM.WriteLine(&quot;GetGatherHex 0 24&quot;)) MyError();
		
        // receive the data (8 hex words per line)
        if (KM.ReadLineTimeout(resp1)) MyError();
        if (KM.ReadLineTimeout(resp2)) MyError();
        if (KM.ReadLineTimeout(resp3)) MyError();
       
        // release our access to the board
        KM.ReleaseToken();
		</code>
       </pre>
        <hr />
        
        <h4><a name="WaitToken"></a>int WaitToken();</h4>
        
      <p>Waits until the token for the specified <em><strong>KMotion</strong></em>
      board can be obtained. Call this function whenever uninterrupted
      access to a <em><strong>KMotion</strong></em> board is required. For example before a command
      where several lines of response will be returned. Release the token
      as quickly as possible by calling the <a href="#ReleaseToken">ReleaseToken</a>
      function as all other access to the locked board will be blocked until
      released.</p>
      <p><strong>Return Value</strong></p>
      <p>0 if successful, non-zero if unsuccessful (invalid board specified)</p>
      <p><strong>Parameters</strong></p>
	  <p><em>none</em></p>
      <p><strong>Example</strong></p>
      <pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        char resp1[256];
        char resp2[256];
        char resp3[256];
		
        // first get the token for the board to allow uninterrupted access
        if (KM.WaitToken()!=KMOTION_LOCKED) MyError();
        
		// tell the board to send 24 (32 bit) words at offset 0
        if (KM.WriteLine(&quot;GetGatherHex 0 24&quot;)) MyError();
        
		// receive the data (8 hex words per line)
        if (KM.ReadLineTimeout(resp1)) MyError();
        if (KM.ReadLineTimeout(resp2)) MyError();
        if (KM.ReadLineTimeout(resp3)) MyError();
        
        // release our access to the board
        
		KM.ReleaseToken();
	  </code>
       </pre>
        <hr />  
        
        <h4><a name="KMotionLock"></a>int KMotionLock();</h4>
        
        <p>Attempts	to obtain the token of the specified <em><strong>KMotion</strong></em> board.. Call this
      	function whenever uninterrupted access to a <em><strong>KMotion</strong></em> board is
      	required. For example before a command where several lines of
      	response will be returned. Release the token as quickly as possible
      	by calling the <em><a href="#ReleaseToken">ReleaseToken</a></em> function as
      	all other access to the locked board will be blocked until released.
      	This function is similar to the <em><a href="#WaitToken">WaitToken</a></em>
        function, except that it returns immediately (instead of waiting) if the
      	board is already locked.</p>
      	
      	<p><strong>Return Value</strong></p>
      	
      	<pre>
      	<code>
      	KMOTION_LOCKED=0,        // (and token is locked) if KMotion is available for use
      	KMOTION_IN_USE=1,        // if already in use
      	KMOTION_NOT_CONNECTED=2  // if error or not able to connect
     	</code>
		</pre>
     	
      	<p><strong>Parameters</strong></p>
      	<p><em>none</em></p>
      	
     	<p><strong>Example</strong></p>
     	
      	<pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        char resp1[256];
        char resp2[256];
        char resp3[256];
        int result;
        	
        // first get the token for the board to allow uninterrupted access
        do
        {
        	result = KM.KMotionLock();
			if (result == KMOTION NOT CONNECTED) MyError();
			if (result == KMOTION IN USE) DoOtherProcessing();
		} while
        (result != KMOTION_LOCKED)
        
		// receive the data (8 hex words per line)
        if (KM.ReadLineTimeout(resp1)) MyError();
        if (KM.ReadLineTimeout(resp2)) MyError();
        if (KM.ReadLineTimeout(resp3)) MyError();
        
        // release our access to the board
        
        KM.ReleaseToken();
     	</code>
		</pre>
        <hr />
        
        <h4><a name="ReleaseToken"></a>void ReleaseToken();</h4>
       <p>Releases the previously obtained token of the
      specified <em><strong>KMotion</strong></em> board. See <a href="#WaitToken">WaitToken</a> and <a href="#KMotionLock">LockKMotion</a> functions. The token should always be released as quickly as
      possible as all other access to the locked board will be blocked until released.</p>
      
      <p><strong>Return Value</strong></p>
      <p>none - the function can not fail</p>
      
      <p><strong>Parameters</strong></p>
      <p><em>none</em></p>
      
      <p><strong>Example</strong></p>      
      	<pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        char resp1[256];
        char resp2[256];
        char resp3[256];
        int result;
        	
        // first get the token for the board to allow uninterrupted access
        do
        {
        	result = KM.KMotionLock();
			if (result == KMOTION NOT CONNECTED) MyError();
			if (result == KMOTION IN USE) DoOtherProcessing();
		} while
        (result != KMOTION_LOCKED)
        
        // tell the board to send 24 (32 bit) words at offset 0
		if (KM.WriteLine("GetGatherHex 0 24")) MyError();
       
        // receive the data (8 hex words per line)
        if (KM.ReadLineTimeout(resp1)) MyError();
        if (KM.ReadLineTimeout(resp2)) MyError();
        if (KM.ReadLineTimeout(resp3)) MyError();
        
		// release our access to the board
        
		KM.ReleaseToken();
		</code>
       </pre>
        <hr /> 
        
        <h4><a name="Failed"></a>int Failed();</h4>
             
        <p>This function should be called whenever an error is detected with a <em><strong>KMotion</strong></em>
        board. This function disconnects the driver, flags the board as
        disconnected, and displays the error message shown below. A user
        program may typically detect a timeout error or invalid data error if
        the <em><strong>KMotion</strong></em> board is powered down or unplugged while communication is in
        progress. Calling this function will force any subsequent attempts
        to access the board to wait for a board to be connected, re-connect, flush any buffers, etc...</p>
        
        <p>"Read Failed - Auto Disconnect"</p>
        <p><strong>Return Value</strong></p>
        <p>always 0 - the function can not fail</p>
        
        <p><strong>Parameters</strong></p>
        <p><em>none</em></p>
        
        <p><strong>Example</strong></p>         
        <pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;	
        CKMotionDLL KM(0);
        
		if (KM.KMotionLock() == KMOTION_LOCKED) // see if we can get access
        {
			// upload bulk status
			if (UploadStatus())
			{
       			// error reading status
       			KM.Failed();
			}
			KM.ReleaseRoken();
		}
        </code>
        </pre>
        <hr />
        
        <h4><a name="LoadCoff"></a>int LoadCoff(int Thread, const char *Name, bool PackToFlash);</h4>
        
        <p>This function downloads a compiled C program to the memory of the specified
        <em><strong>KMotion</strong></em> board.</p>
        
        <p>C Programs that run in the <em><strong>KMotion</strong></em> Board are normally compiled using the
        included and integrated compiler in the <em><strong>KMotion</strong></em> Application.
        Using the <em><strong>KMotion</strong></em> Application the user's C Program should be loaded into
        a selected thread and compiled. This will automatically generate a
        COFF executable with the same name and in the same directory as the C
        Source code, but with a .out extension. It is the users
        responsibility to keep track of which thread the COFF executable was
        compiled to execute in.</p>
        
        <p>The downloaded code may then be executed by issuing the &quot;Execute&quot;
        command</p>
        
        <p><strong>Return Value</strong></p>
        <p>returns 0 - if successful</p>
        
        <p><strong>Parameters</strong></p>
        
        <p><em>Thread</em></p>
        <p class="indent">KMotion Thread that the program should be loaded into</p>
        
        <p><em>Name</em></p>
        <p class="indent">Filename of coff file to download</p>
        
        <p><em>PackToFlash</em></p>
        <p class="indent">Internal system command always specify as false</p>   
            
        <p><strong>Example</strong></p>

		<pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        unsigned int EntryPoint;
        
        if (KM.LoadCoff(1, &quot;C:\\test.out&quot;, false)) return 1;
        KM.WriteLine(&quot;Execute 0&quot;);
        </code>
        </pre>
		<hr />

	  <h4><a name="ServiceConsole"></a>int ServiceConsole();</h4>
     
      <p>Services the <em><strong>KMotion</strong></em> <em>Console</em> data
      stream. The <em>Console</em> is a place where all unsolicited data,
      such as errors, or data &quot;Printed&quot; by user programs goes
      to. In between processing commands, <em><strong>KMotion</strong></em> uploads any unsolicited
      data it may have up to the host. The KMotionDLL driver buffers this
      data until some process declares itself as a <em>Console Handler (See </em><strong>SetConsoleCallback)</strong> and makes calls to this function <em>ServiceConsole</em>.</p>
      
      <p>This function should be called at regular intervals. If console data is
      available a call back to the Console Handler will occur with one line of data.</p>
      
      <p><strong>Return Value</strong></p>
      <p>returns 0 - if successful</p>
      
      <p><strong>Parameters</strong></p>
      
      <p><strong>Example</strong></p>
      <pre>
      <code class="language-c">
      #include &quot;KMotionDLL.h&quot;
       CKMotionDLL KM(0);
      
      int ConsoleHandler(const char *buf)
	  {
	  	MyLogData(buf);
	  	return 0;
	  }
	  KM.SetConsoleCallback(ConsoleHandler);
	  KM.ServiceConsole();
      </code>
      </pre>
      <hr />
      
      <h4><a name="SetConsoleCallback"></a>int SetConsoleCallback(CONSOLE_HANDLER *ch);</h4>
      <p>Sets the user provided console callback function.</p>
      
      <p><strong>Return Value</strong></p>
      <p>returns 0 - if successful</p>
      
      <p><strong>Parameters</strong></p>
      <p><em>ch</em></p>
      
      <p class="indent">name of console handler function</p>
      
      <p><strong>Example</strong></p>
        <pre>
      	<code class="language-c">
       #include &quot;KMotionDLL.h&quot;
       CKMotionDLL KM(0);
       int ConsoleHandler(const char *buf)
	   {
	   		MyLogData(buf);
	   		return 0;
	   }
       .
       .
       .
       KM.SetConsoleCallback(ConsoleHandler);
       KM.ServiceConsole();
     	</code>
      </pre>
      <hr />
		
		<h4><a name="CompileAndLoadCoff"></a>CompileAndLoadCoff(const char *Name, int Thread);</h4>
   		<p>or</p>
       <h4>int CompileAndLoadCoff(const char *Name, int Thread, char *Err, int MaxErrLen);</h4>
        
        <p>Compiles the specified <a href="../ProgramScreen/ProgramScreen.htm">C Program</a> file, 
        downloads the object code to the specified Thread space, and sets the 
        Entry Point, for the specified thread. Two versions of the 
        function are supplied; one returns any error messages, the other does not.</p>
        
        <p>The downloaded code may then be executed by issuing the <a href="../Cmd.htm#Execute">Execute</a>
        command.</p>
        
        <p><strong>Return Value</strong></p>
        <p>returns 0 - if successful</p>
        
        <p><strong>Parameters</strong></p>
      	<p><em>Name</em></p>
      	
        <p class="indent">Filename of C Program to compile and download</p>
        <p><em>Thread</em></p>
        <p class="indent">Thread number where the program is to be compiled for and downloaded 
        into. Valid range 1...7.</p>
        <p><em>Err</em></p>
        
        <p class="indent">Caller's supplied buffer for any error messages</p>
        <p><em>MaxErrLen</em></p>
        
        <p class="indent">Length of caller's supplied buffer for any error messages</p>
        
        <p><strong>Example</strong></p>
        <pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
       	CKMotionDLL KM(0);
       	
        if (KM.CompileAndLoadCoff(&quot;C:\\MyProgram.c&quot;, 1) MyError();
        if (KM.WriteLine(&quot;Execute1&quot;) MyError();
       </code>
      </pre>
	  <hr />
      
      <h4><a name="ListLocations"></a>int ListLocations(int *nlocations, int *list);</h4>
      <p>Returns the number of currently connected KMotion boards and a list of their USB location identifiers</p>
      
      <p><strong>Return Value</strong></p>
      <p>returns 0 - if successful</p>
      
      <p><strong>Parameters</strong></p>
      <p><em>nlocations</em></p>
      
      <p class="indent">pointer to integer where the number of locations should be returned</p>
      <p><em>List</em></p>
      <p class="indent">pointer to array to be filled in with the list of USB location identifiers</p>
      
      <p><strong>Example</strong></p>
      
        <pre>
      	<code class="language-c">
        #include &quot;KMotionDLL.h&quot;
        CKMotionDLL KM(0);
        
		int n_boards;>
        int BoardList[256];
        
		if (KM.ListLocations(&amp;n_boards, BoardList) MyError();
        </code>
      </pre>
      
 <p>&nbsp;</p>
</div>


	</div>
</body>

</html>