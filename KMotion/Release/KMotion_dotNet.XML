<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KMotion_dotNet</name>
    </assembly>
    <members>
        <member name="T:KMotion_dotNet.KM_Axis">
            <summary>
            Axis class for KM_Controller
            Use to control a single axis channel
             
            The axis channel can be configured via a c program and the KM_Controller
            
            or
            
            Use the configuration methods to set the desired parameters
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams">
            <summary>
            KFLOP Axis Channel parameters for Tuning and motion profiles
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams._Controller">
            <summary>
            KM_Controller Object for used for device access
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams._ID">
            <summary>
            Axis Channel Number
            Valid range = ( 0 - 7 )
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.ID">
            <summary>
            Axis Channel Number
            Valid range = ( 0 - 7 )
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.Jerk">
            <summary>
            Get or Set the max jerk  (for independent moves and jogs)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.Pgain">
            <summary>
            Get or Set PID Proportional Gain.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.Igain">
            <summary>
            Get or Set PID Integral Gain.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.Dgain">
            <summary>
            Get or Set PID Derivative Gain.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.FFAccel">
            <summary>
            Set or get Acceleration feed forward for the axis.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.FFVel">
            <summary>
            Set or get Velocity feed forward for the axis.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.BacklashAmount">
            <summary>
             Sets or gets the amount of Backlash Compensation Offset to be applied.
             See also BacklashMode and BacklashRate.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.BacklashRate">
            <summary>
             Sets or gets the rate at which the amount of Backlash Compensation Offset will be applied.
             See also BacklashMode and BacklashAmount.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.BacklashMode">
            <summary>
              Sets or gets the Backlash Compensation mode from either BACKLASH_OFF (0) to BACKLASH_LINEAR (1).  
              When the backlash mode is set to Linear mode, whenever the commanded destination begins moving 
              in the positive direction, a positive offset of the amount, BacklashAmount, will be applied.  
              The offset will be ramped upward as a linear function of time at the rate specified as the BacklashRate.  
              Whenever the commanded destination begins moving in the negative direction the offset will be 
              removed by ramping downward toward zero at the same rate.  If the the Backlash Compensation mode 
              is set to BACKLASH_OFF (0), no backlash compensation will be applied.
              See also BacklashRatee and BacklashAmount.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.CommutationOffset">
             <summary>
             Get or Set 3 or 4 phase commutation offset.  When brushless commutation is performed, the desired Output Magnitude is distributed and applied to the various motor coils as a function of position.  The commutation offset shifts the manner in which the Output Magnitude is applied.
             For a 3 phase brushless output mode, commutation offset is used in the following manner.
             PhaseA = OutputMagnitude * sin((Position+CommutationOffset)*invDistPerCycle*2π)
             PhaseB = OutputMagnitude * sin((Position+CommutationOffset)*invDistPerCycle*2π + 2π/3)
             PhaseC = OutputMagnitude * sin((Position+CommutationOffset)*invDistPerCycle*2π + 4π/3)
            
             For a 4 phase brushless output mode, commutation offset is used in the following manner.
             PhaseA = OutputMagnitude *  sin((Position+CommutationOffset)*invDistPerCycle*2π)
             PhaseB = OutputMagnitude * cos((Position+CommutationOffset)*invDistPerCycle*2π)
            
             See also invDistPerCycle and Configuration Parameters.
             </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.DeadBandGain">
            <summary>
             Get or Set gain while error is within the deadband range.  See DeadBand Description.
             See Servo Flow Diagram.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.DeadBandRange">
            <summary>
             Get or Set range where deadband gain is to be applied.  See DeadBand Description.
             See Servo Flow Diagram.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputMode">
            <summary>
             Set or get the position input mode for an axis.  See description of this parameter on the 
             Configuration Screen.  Valid modes are (from PC-DSP.h): 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputOffset0">
            <summary>
             Set or get first Input Offset of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputOffset1">
            <summary>
             Set or get second Input Offset of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputChan0">
            <summary>
             Set or get first Input Channel of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputChan1">
            <summary>
             Set or get second Input Channel of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputGain0">
            <summary>
             Set or get first Input Gain of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InputGain1">
            <summary>
             Set or get second Input Gain of an axis.  See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.InvDistPerCycle">
            <summary>
             Get or Set distance per cycle (specified as an inverse) of an axis.  
             May specify the cycle of either a Stepper of Brushless Motor.  
             See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.Lead">
            <summary>
             Set or get Lead Compensation for an axis.  Lead Compensation is used to compensate for lag caused by motor inductance.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.LimitSwitch">
            <summary>
            Configures Limit Switch Options.  Specify Hex value as decribed in KMotionDef.h
            See also Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.MasterAxis">
            <summary>
             Sets or gets the axis to which the current axis is to be slaved.  
             The current axis becomes a slave and will follow the motion of the specified 
             Master Axis.  More than one axis can be slaved to a single master axis if 
             desired.  When slaved, changes in the commanded destination of the master axis 
             will be mirrored as changes in the slaved axis's destination however scaled 
             by the SlaveGain (as specified in the Slave Axis).  The SlaveGain my be 
             negative if opposing motion is desired.
             
            Setting the Master Axis value to -1 disables the Slave mode.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.MaxErr">
            <summary>
             Set or get Maximum Error for axis (Limits magnitude of error entering PID).
             See Servo Flow Diagram and Step Response Screen for more information. 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.MaxFollowingError">
            <summary>
             Set or get the maximum allowed following error before disabling the axis. 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SoftLimitNeg">
            <summary>
             Set or get the Soft Limit Setting for the Negative direction in Counts. 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SoftLimitPos">
            <summary>
             Set or get the Soft Limit Setting for the Positive direction in Counts. 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.MaxI">
            <summary>
             Set or get Maximum Integrator "wind up" for axis.  Integrator saturates 
             at the specified value.   See also Servo Flow Diagram and Step Response 
             Screen for further information.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.MaxOutput">
            <summary>
             Set or get Maximum Output for an axis.  Limits magnitude of servo output.  
             Output saturates at the specified value.  See also Servo Flow Diagram 
             and Step Response Screen for further information.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.OutputMode">
            <summary>
             Set or get the position output mode for an axis.  
             See description of this parameter on the Configuration Screen.
             Valid modes are (from PC_DSP.h): 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.OutputOffset">
            <summary>
             Get or Set the Output Offset of an axis.  For DAC Servo output mode the 
             output (DAC) signal can be offset.   The Output Offset is applied after 
             any Output Gain value.  The Output Offset can be used to reduce any DAC 
             output offset or Amplifier input offset that may cause motor axis drift 
             occurs when the DAC is commanded to zero (disabled).  In other output 
             modes the OutputGain value will have no effect.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.OutputChan0">
            <summary>
             Get or Set the first Output Channel of an axis.   
             See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.OutputChan1">
            <summary>
             Get or Set the second Output Channel of an axis.   
             See description of this parameter on the Configuration Screen.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.OutputGain">
            <summary>
             Get or Set the Output Gain of an axis.  For Axes of Step/Dir,
             CL Step Dir, or MicroStep output mode, the output motion can be scaled or reversed.
             Normally there is no need to use a value other than -1.0 or +1.0.  
             For DAC Servo output mode the output signal (DAC) can be scaled or reversed.   
             Again, normally there is no need to use a value other than -1.0 or +1.0.  
             In other output modes the OutputGain value will have no effect.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SlaveGain">
            <summary>
             Sets or gets the Slave Gain for the axis.  See also MasterAxis for more information
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.StepperAmplitude">
            <summary>
             Set or get the nominal output magnitude used for axis if in MicroStepping 
             Output Mode to the specified value.  This will be the output amplitude when 
             stopped or moving slowly.  If Lead Compensation is used, the amplitude 
             while moving may be higher.
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.#ctor(KMotion_dotNet.KM_Controller,System.Int32)">
            <summary>
            Associate KFLOP Axis Channel with Parameters
            </summary>
            <param name="controller">KM_Controller object to axxociate the Axis with</param>
            <param name="id">Axis ID</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SetIIR0(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set or get IIR Z domain servo filter #0
            </summary>
            <param name="p1">A1 Coefficient</param>
            <param name="p2">A2 Coefficient</param>
            <param name="p3">B0 Coefficient</param>
            <param name="p4">B1 Coefficient</param>
            <param name="p5">B2 Coefficient</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SetIIR1(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set or get IIR Z domain servo filter #1
            </summary>
            <param name="p1">A1 Coefficient</param>
            <param name="p2">A2 Coefficient</param>
            <param name="p3">B0 Coefficient</param>
            <param name="p4">B1 Coefficient</param>
            <param name="p5">B2 Coefficient</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_TuningParams.SetIIR2(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set or get IIR Z domain servo filter #2
            </summary>
            <param name="p1">A1 Coefficient</param>
            <param name="p2">A2 Coefficient</param>
            <param name="p3">B0 Coefficient</param>
            <param name="p4">B1 Coefficient</param>
            <param name="p5">B2 Coefficient</param>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._Controller">
            <summary>
            KM_Controller Object for used for device access
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._ID">
            <summary>
            Axis Channel Number
            Valid range = ( 0 - 7 )
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._Name">
            <summary>
            Call Name
            Use to describe what the Axis controls
            i.e.
            Positioning Fence 1, X, etc...
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._Velocity">
            <summary>
            Velocity to use during positioning
            Jogging uses its own velocity passed in
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._CPU">
            <summary>
            Multiplier for the velocity
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._JogPercent">
            <summary>
            The level of jog percenatage computed from the commanded jog velocity
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._JogVelocity">
            <summary>
            Commanded jog velocity
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._HomingParams">
            <summary>
            Data memeber for thr homing sequence attributes
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Axis._TuningParams">
            <summary>
            Accessor to the axis channel's tuning parameters
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.ID">
            <summary>
            Axis Channel Number
            Valid range = ( 0 - 7 )
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.Name">
            <summary>
            Call Name
            Use to describe what the Axis controls
            i.e.
            Positioning Fence 1, X, etc...
            </summary>
            
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.Velocity">
            <summary>
            Commanded velocity to use during positioning 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.Acceleration">
            <summary>
            Acceleration to use during positioning
            Jogging uses its own velocity passed in
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.CPU">
            <summary>
            Counts per unit
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.JogPercent">
            <summary>
            The level of jog percenatage computed from the commanded jog velocity
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.JogVelocity">
            <summary>
            Commanded jog velocity
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.HomingParams">
            <summary>
            Data memeber for thr homing sequence attributes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.TuningParams">
            <summary>
            Accessor to the axis channel's tuning parameters
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.#ctor(KMotion_dotNet.KM_Controller,System.Int32,System.String)">
            <summary>
            Default constructor for the Axis Object
            </summary>
            <param name="controller">KM_Controller object to associate the axis</param>
            <param name="id">identifier</param>
            <param name="name">friendly name</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.ZeroAxis">
            <summary>
            Sets the Axis' current 0.0 point
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.SetCurrentPosition(System.Double)">
            <summary>
            Sets the axis node's current position
            Can be used to "zero" the axis
            </summary>
            <param name="pos">new value for the current position</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.SetCommandedDest(System.Double)">
            <summary>
            Sets the axis node's commanded Destination
            Caution: changing this may result in a sudden jump in the axis position
            </summary>
            <param name="dest">new value for the commanded destination</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.MoveTo(System.Double)">
            <summary>
            Calls a move to a given absolute position and blocks the calling thread until the position has been acheived
            </summary>
            <param name="pos">absolute position to move to</param> 
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.StartMoveTo(System.Double)">
            <summary>
            Calls a non-blocking move to a given absolute position
            </summary>
            <param name="pos">absolute position to move to</param> 
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.RelativeMoveTo(System.Double)">
            <summary>
            Calls a move to a given relative position and blocks the calling thread until the position has been acheived
            </summary>
            <param name="pos">position delta from current position to move to</param> 
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.StartRelativeMoveTo(System.Double)">
            <summary>
            Calls a non-blocking move to a given relative position
            </summary>
            <param name="pos">position delta from current position to move to</param> 
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.MotionComplete">
            <summary>
            Checks if the commanded axis motion is completed
            </summary>
            <returns>true if the axis is idle</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.WaitforMotionComplete(System.Int32)">
            <summary>
            Blocks the calling thread until the axis is in position
            within a specified time limit
            </summary>
            <param name="timeout">time in ms to wait for axis to acheive position, 0 will wait indefinitely</param>
            <returns>true if completed</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.Jog(System.Double)">
            <summary>
            Jog axis at a given velocity
            </summary>
            <param name="velocity">velocity to jog at : a negative value will reverse the motion</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.Jog">
            <summary>
            Jog axis at the commanded preset jogvelocity * jogpercentage
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.Stop">
            <summary>
            Stop the current motion
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.EStop">
            <summary>
            Stop the current motion and disable the axis
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.Enable">
            <summary> 
            Bring an axis to an enabled state
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.EnableDest(System.Double)">
            <summary> 
            Bring an axis to an enabled state and specify the commanded destination for the axis
            dest is multiplied by CPU and sent to KFLOP
            </summary>
            <param name="dest">Target Destination for the axis</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.Disable">
            <summary>
            Disable the axis 
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.CheckEnabled">
            <summary>
            Check if the axis is enabled
            </summary>
            <returns>true if enabled</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetActualPositionCounts">
            <summary>
            Querys the axis channel for the actual position in counts
            </summary>
            <returns>raw counts from the channel's POS</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetActualPosition">
            <summary>
            Querys the axis channel for the actual position in user units
            </summary>
            <returns>user units from the channel's POS</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetCommandedPositionCounts">
            <summary>
            Querys the axis channel for the commanded position in counts
            </summary>
            <returns>raw counts from the channel's DEST</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetCommandedPosition">
            <summary>
            Querys the axis channel for the commanded position in user units
            </summary>
            <returns>user units from the channel's DEST</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.DoHome">
            <summary>
            Executes a homing sequence based on the settings within the HomingParams variable and waits until the execution is complete
            </summary>
            <returns>true if home routine was successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.StartDoHome">
            <summary>
            Executes a homing sequence based on the settings within the HomingParams variable
            </summary> 
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetAutoHomingFileSource">
            <summary>
            Generates the automated simple homing routine for this axis
            </summary>
            <returns>complete source code for homing .c file</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetHomeSequence">
            <summary>
            Creates the lines of code to place in the main() method
            </summary>
            <returns>partial source code for homing .c file</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetHomeFileSource">
            <summary>
            Creates the source code for the .c file with an empty main() method
            </summary>
            <returns>partial source code for homing .c file</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.GetMoveToStateAtVel">
            <summary>
            Auto Generates KFLOP C Code to move until an input bit changes
            </summary>
            <returns>generated code as a string</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.WriteHomingToFile(System.String)">
            <summary>
            Creates a new text file in ASCII format containing the source code
            </summary>
            <param name="filesourcecode">source code for the file</param>
            <returns>complete path to generated file</returns>
        </member>
        <member name="T:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams">
            <summary>
            Multiple parameters to describe the homing sequence for the axis
            so that a proper sequence can be auto-generated in some circumstances.
            (This has not been fully implemented)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.StatusBit">
            <summary>
            Which bit is to be used as Home input
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.DefaultThread">
            <summary>
            Which KFLOP Thread should be used to run the Home C Program in
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.SequencePriority">
            <summary>
            Determines the order of axes to be homed
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.HomeNegative">
            <summary>
            Direction to be homed
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.RepeatHomeAtSlowerRate">
            <summary>
            Determines if Home sequence is to be performed twice
            with the second pass at a slower speed
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.SequenceType">
            <summary>
            Enumerated Code describing the overall homing type for the axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.HomeLimitBit">
            <summary>
            Which bit is to be used as a Limit while Homing
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.HomeLimitState">
            <summary>
            State (polarity) when Input is actively in sensor
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.EncoderBit">
            <summary>
            Which Input Bit is to be used for any encoder index mark homing 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.HomeFastVel">
            <summary>
            Initial Fast Homing Velocity
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.HomeSlowVel">
            <summary>
            Secondary Slow Homing Velocity
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.Origin">
            <summary>
            Origin value to be set after homing
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.SensorOffset">
            <summary>
            Amount to move after finding Home Switch
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.SetToZero">
            <summary>
            Option to Zero Command and Position
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.SourceType">
            <summary>
            Determines method of homing - Fixed C file or Autogenerated C code
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.Homing_c_Program">
            <summary>
            C Program Filename for Homing
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.Homing_c_Program_Dir">
            <summary>
            C Program Filename Directory for Homing
            if unspecified the Directory of the DLL assembly will be used
            for writing and reading the auto created C Program
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.GetDirection">
            <summary>
            Returns direction to move for homing
            </summary>
            <returns>HOMING_DIRECTION.NEGATIVE or HOMING_DIRECTION.POSITIVE</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Axis.KM_Axis_HomingParams.GetPolarity(System.Boolean)">
            <summary>
            State (polarity) when Input is actively in sensor - optionally inverted
            </summary>
            <param name="reverse">whether the polarity should be returned inverted</param>
            <returns>Limit State Polarity</returns>
        </member>
        <member name="T:KMotion_dotNet.KM_MotionParams">
            <summary>
            Trajectory Planner Motion Parameter Settings
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.BreakAngle">
            <summary>
            Max angle before Trajectory Planner locks the segment list and optimizes next entities
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CollinearTolerance">
            <summary>
            If the angle between consecutive linear segments is less than this value, they will be treated as the same segment
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CornerTolerance">
            <summary>
            Maximum variance when smoothed cornering is applied
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.FacetAngle">
            <summary>
            Max anglular deviation for arc segments
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.TPLookahead">
            <summary>
            How many seconds can be previewed for Trajectory Planning optimization
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.RadiusA">
            <summary>
            Radius Associated with Axis A
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.RadiusB">
            <summary>
            Radius Associated with Axis B
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.RadiusC">
            <summary>
            Radius Associated with Axis C
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelX">
            <summary>
            Maximum Acceleration for the mapped "X" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelY">
            <summary>
            Maximum Acceleration for the mapped "Y" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelZ">
            <summary>
            Maximum Acceleration for the mapped "Z" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelA">
            <summary>
            Maximum Acceleration for the mapped "A" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelB">
            <summary>
            Maximum Acceleration for the mapped "B" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxAccelC">
            <summary>
            Maximum Acceleration for the mapped "C" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelX">
            <summary>
            Maximum Velocity for the mapped "X" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelY">
            <summary>
            Maximum Velocity for the mapped "Y" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelZ">
            <summary>
            Maximum Velocity for the mapped "Z" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelA">
            <summary>
            Maximum Velocity for the mapped "A" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelB">
            <summary>
            Maximum Velocity for the mapped "B" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxVelC">
            <summary>
            Maximum Velocity for the mapped "C" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchX">
            <summary>
            Counts/Steps per Inch for the mapped "X" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchY">
            <summary>
            Counts/Steps per Inch for the mapped "Y" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchZ">
            <summary>
            Counts/Steps per Inch for the mapped "Z" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchA">
            <summary>
            Counts/Steps per Inch for the mapped "A" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchB">
            <summary>
            Counts/Steps per Inch for the mapped "B" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.CountsPerInchC">
            <summary>
            Counts/Steps per Inch for the mapped "C" axis
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.MaxLinearLength">
            <summary>
            Longest allowable segment length before dividing into smaller segments
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.UseOnlyLinearSegments">
            <summary>
            Converts Arcs to linear segments (Kinematic Setting)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.ArcsToSegs">
            <summary>
            Converts Arcs to linear segments (User Setting)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.DegreesA">
            <summary>
            Whether Axis A is in units of Degrees
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.DegreesB">
            <summary>
            Whether Axis B is in units of Degrees
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.DegreesC">
            <summary>
            Whether Axis C is in units of Degrees
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MotionParams.TCP_Active">
            <summary>
            Whether RTCP (Kinematics) is Active or not.
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.#ctor(System.IntPtr)">
            <summary>
            Primary constructor for the KM_MotionParams object
            </summary>
            <param name="handle">Pointer to the associated CoordMotion object</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_BreakAngle">
            <summary>
            Property getter Accessor for BreakAngle
            </summary>
            <returns>Current BreakAngle</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_BreakAngle(System.Double)">
            <summary>
            Property setter Accessor for BreakAngle
            </summary>
            <param name="value">BreakAngle to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CollinearTol">
            <summary>
            Property getter Accessor for CollinearTol
            </summary>
            <returns>Current CollinearTol</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CollinearTol(System.Double)">
            <summary>
            Property setter Accessor for CollinearTol
            </summary>
            <param name="value">CollinearTol to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CornerTol">
            <summary>
            Property getter Accessor for CornerTol
            </summary>
            <returns>Current CornerTol</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CornerTol(System.Double)">
            <summary>
            Property setter Accessor for CornerTol
            </summary>
            <param name="value">CornerTol to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_FacetAngle">
            <summary>
            Property getter Accessor for FacetAngle
            </summary>
            <returns>Current FacetAngle</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_FacetAngle(System.Double)">
            <summary>
            Property setter Accessor for FacetAngle
            </summary>
            <param name="value">FacetAngle to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_TPLookahead">
            <summary>
            Property getter Accessor for TPLookahead
            </summary>
            <returns>Current TPLookahead</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_TPLookahead(System.Double)">
            <summary>
            Property setter Accessor for TPLookahead
            </summary>
            <param name="value">TPLookahead to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_RadiusA">
            <summary>
            Property getter Accessor for RadiusA
            </summary>
            <returns>Current RadiusA</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_RadiusA(System.Double)">
            <summary>
            Property setter Accessor for RadiusA
            </summary>
            <param name="value">RadiusA to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_RadiusB">
            <summary>
            Property getter Accessor for RadiusB
            </summary>
            <returns>Current RadiusB</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_RadiusB(System.Double)">
            <summary>
            Property setter Accessor for RadiusB
            </summary>
            <param name="value">RadiusB to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_RadiusC">
            <summary>
            Property getter Accessor for RadiusC
            </summary>
            <returns>Current RadiusC</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_RadiusC(System.Double)">
            <summary>
            Property setter Accessor for RadiusC
            </summary>
            <param name="value">RadiusC to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelX">
            <summary>
            Property getter Accessor for MaxAccelX
            </summary>
            <returns>Current MaxAccelX</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelX(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelX
            </summary>
            <param name="value">MaxAccelX to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelY">
            <summary>
            Property getter Accessor for MaxAccelY
            </summary>
            <returns>Current MaxAccelY</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelY(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelY
            </summary>
            <param name="value">MaxAccelY to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelZ">
            <summary>
            Property getter Accessor for MaxAccelZ
            </summary>
            <returns>Current MaxAccelZ</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelZ(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelZ
            </summary>
            <param name="value">MaxAccelZ to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelA">
            <summary>
            Property getter Accessor for MaxAccelA
            </summary>
            <returns>Current MaxAccelA</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelA(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelA
            </summary>
            <param name="value">MaxAccelA to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelB">
            <summary>
            Property getter Accessor for MaxAccelB
            </summary>
            <returns>Current MaxAccelB</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelB(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelB
            </summary>
            <param name="value">MaxAccelB to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxAccelC">
            <summary>
            Property getter Accessor for MaxAccelC
            </summary>
            <returns>Current MaxAccelC</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxAccelC(System.Double)">
            <summary>
            Property setter Accessor for MaxAccelC
            </summary>
            <param name="value">MaxAccelC to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelX">
            <summary>
            Property getter Accessor for MaxVelX
            </summary>
            <returns>Current MaxVelX</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelX(System.Double)">
            <summary>
            Property setter Accessor for MaxVelX
            </summary>
            <param name="value">MaxVelX to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelY">
            <summary>
            Property getter Accessor for MaxVelY
            </summary>
            <returns>Current MaxVelY</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelY(System.Double)">
            <summary>
            Property setter Accessor for MaxVelY
            </summary>
            <param name="value">MaxVelY to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelZ">
            <summary>
            Property getter Accessor for MaxVelZ
            </summary>
            <returns>Current MaxVelZ</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelZ(System.Double)">
            <summary>
            Property setter Accessor for MaxVelZ
            </summary>
            <param name="value">MaxVelZ to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelA">
            <summary>
            Property getter Accessor for MaxVelA
            </summary>
            <returns>Current MaxVelA</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelA(System.Double)">
            <summary>
            Property setter Accessor for MaxVelA
            </summary>
            <param name="value">MaxVelA to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelB">
            <summary>
            Property getter Accessor for MaxVelB
            </summary>
            <returns>Current MaxVelB</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelB(System.Double)">
            <summary>
            Property setter Accessor for MaxVelB
            </summary>
            <param name="value">MaxVelB to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxVelC">
            <summary>
            Property getter Accessor for MaxVelC
            </summary>
            <returns>Current MaxVelC</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxVelC(System.Double)">
            <summary>
            Property setter Accessor for MaxVelC
            </summary>
            <param name="value">MaxVelC to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchX">
            <summary>
            Property getter Accessor for CountsPerInchX
            </summary>
            <returns>Current CountsPerInchX</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchX(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchX
            </summary>
            <param name="value">CountsPerInchX to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchY">
            <summary>
            Property getter Accessor for CountsPerInchY
            </summary>
            <returns>Current CountsPerInchY</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchY(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchY
            </summary>
            <param name="value">CountsPerInchY to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchZ">
            <summary>
            Property getter Accessor for CountsPerInchZ
            </summary>
            <returns>Current CountsPerInchZ</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchZ(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchZ
            </summary>
            <param name="value">CountsPerInchZ to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchA">
            <summary>
            Property getter Accessor for CountsPerInchA
            </summary>
            <returns>Current CountsPerInchA</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchA(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchA
            </summary>
            <param name="value">CountsPerInchA to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchB">
            <summary>
            Property getter Accessor for CountsPerInchB
            </summary>
            <returns>Current CountsPerInchB</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchB(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchB
            </summary>
            <param name="value">CountsPerInchB to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_CountsPerInchC">
            <summary>
            Property getter Accessor for CountsPerInchC
            </summary>
            <returns>Current CountsPerInchC</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_CountsPerInchC(System.Double)">
            <summary>
            Property setter Accessor for CountsPerInchC
            </summary>
            <param name="value">CountsPerInchC to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_MaxLinearLength">
            <summary>
            Property getter Accessor for MaxLinearLength
            </summary>
            <returns>Current MaxLinearLength</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_MaxLinearLength(System.Double)">
            <summary>
            Property setter Accessor for MaxLinearLength
            </summary>
            <param name="value">MaxLinearLength to set</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_UseOnlyLinearSegments">
            <summary>
            Property getter Accessor for UseOnlyLinearSegments (Converts Arcs to Linear Segments based on Kinematic Setting)
            </summary>
            <returns>Current UseOnlyLinearSegments</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_UseOnlyLinearSegments(System.Boolean)">
            <summary>
            Property setter Accessor for UseOnlyLinearSegments (Converts Arcs to Linear Segments based on Kinematic Setting)
            </summary>
            <param name="value">UseOnlyLinearSegments to set (Converts Arcs to Linear Segments based on Kinematic Setting)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_ArcsToSegs">
            <summary>
            Property getter Accessor for ArcsToSegs (Converts Arcs to Linear Segments based on User Setting)
            </summary>
            <returns>Current ArcsToSegs</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_ArcsToSegs(System.Boolean)">
            <summary>
            Property setter Accessor for ArcsToSegs (Converts Arcs to Linear Segments based on User Setting)
            </summary>
            <param name="value">ArcsToSegs to set (Converts Arcs to Linear Segments based on User Setting)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_DegreesA">
            <summary>
            Property getter Accessor for DegreesA (whether axis is in units of degrees)
            </summary>
            <returns>Current DegreesA</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_DegreesA(System.Boolean)">
            <summary>
            Property setter Accessor for DegreesA
            </summary>
            <param name="value">DegreesA to set (whether axis is in units of degrees)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_DegreesB">
            <summary>
            Property getter Accessor for DegreesB (whether axis is in units of degrees)
            </summary>
            <returns>Current DegreesB</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_DegreesB(System.Boolean)">
            <summary>
            Property setter Accessor for DegreesB
            </summary>
            <param name="value">DegreesB to set (whether axis is in units of degrees)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_DegreesC">
            <summary>
            Property getter Accessor for DegreesC (whether axis is in units of degrees)
            </summary>
            <returns>Current DegreesC</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_DegreesC(System.Boolean)">
            <summary>
            Property setter Accessor for DegreesC
            </summary>
            <param name="value">DegreesC to set (whether axis is in units of degrees)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Get_TCP_Active">
            <summary>
            Property getter Accessor for TCP_Active (Kinematics)
            </summary>
            <returns>Current TCP_Active</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.Set_TCP_Active(System.Boolean)">
            <summary>
            Property setter Accessor for TCP_Active
            </summary>
            <param name="value">DegreesC to set (whether axis is in units of degrees)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_MotionParams.SetTPParams">
            <summary>
            Force the Trajectory Planner to update it's parameters
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter">
            <summary>
            Interpreter class representing the GCodeInterpreter.cpp object
            from the C++ Dynotion Code
            
            Use to control multiple axis motion from the 
            
            NIST RS274 Interpreter
             
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams">
            <summary>
            Direct settings access for the EMC internal settings
            Warning, use at own risk
            Make sure to examine the Interpreter.cpp and related files to ensure
            you are aware of the reprecutions when using these parameters
            </summary>
            <summary>
            Direct settings access for the EMC internal settings
            Warning, use at own risk
            Make sure to examine the Interpreter.cpp and related files to ensure
            you are aware of the possible repercussions when using these parameters
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.#ctor(System.IntPtr)">
            <summary>
            Constructor for GCode interpreter internal setup parameters interface
            </summary>
            <param name="handle">Associated Interpreter Handle</param>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.A_AxisOffset">
            <summary>
            A Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.A_AxisPosition">
            <summary>
            Current A Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.A_OriginOffset">
            <summary>
            A axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.B_AxisOffset">
            <summary>
            B Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.B_AxisPosition">
            <summary>
            Current B Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.B_OriginOffset">
            <summary>
            B axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.C_AxisOffset">
            <summary>
            C Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.C_AxisPosition">
            <summary>
            Current C Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.C_OriginOffset">
            <summary>
            C axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.X_AxisOffset">
            <summary>
            X Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.X_AxisPosition">
            <summary>
            Current X Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.X_OriginOffset">
            <summary>
            X axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Y_AxisOffset">
            <summary>
            Y Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Y_AxisPosition">
            <summary>
            Current Y Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Y_OriginOffset">
            <summary>
            Y axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Z_AxisOffset">
            <summary>
            Z Axis Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Z_AxisPosition">
            <summary>
            Current Z Axis Positon
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Z_OriginOffset">
            <summary>
            Z axis Origin Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ControlMode">
            <summary>
            Cannon Control Mode 
            CANON_EXACT_STOP = 1,
            CANON_EXACT_PATH = 2,
            CANON_CONTINUOUS = 3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.LengthUnits">
            <summary>
            Canon Length Units
            CANON_UNITS_INCHES = 1, 
            CANON_UNITS_MM = 2,
            CANON_UNITS_CM = 3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.OriginIndex">
            <summary>
            Origin Index
            G54, 55, etc...
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.WorkPlane">
            <summary>
            Canon Work Plane
            CANON_PLANE_XY = 1,
            CANON_PLANE_YZ = 2,
            CANON_PLANE_XZ = 3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.PercentFlag">
            <summary>
            Flags true if the file had a percentage sign
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ProbeComplete">
            <summary>
            Gets and sets whether a probe operation is complete
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ProgramX">
            <summary>
            Program's X position
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ProgramY">
            <summary>
            Program's Y position
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SequenceNumber">
            <summary>
            Current sequence of the file being interpreted
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.CurrentLine">
             <summary>
            Current line number of the file being interpreted
             </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.TraverseSpeed">
            <summary>
            Spped to use during G00 traverse operations
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.LineLength">
            <summary>
            Character length of the current line
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.FileName">
            <summary>
            Current File name being interpreted
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.LineText">
            <summary>
            Text of the currently interpreted line
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.CurrentMotionMode">
            <summary>
            Current G code for motion
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Active_GCodes">
            <summary>
            All currently active G codes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Active_MCodes">
            <summary>
            All currently active M codes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Active_Settings">
            <summary>
            Need clarification
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.DistanceMode">
            <summary>
            Unit distance mode
            MODE_ABSOLUTE = 0,
            MODE_INCREMENTAL = 1
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.FeedMode">
            <summary>
            G_93 (inverse time) or G_94 units/min
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.FloodCoolantOn">
            <summary>
            Flood Coolant State from Interpreter
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.MistCoolantOn">
            <summary> 
            Gets and sets whether Mist Coolant is on
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.BlockDelete">
            <summary>
            Enable/Disable Block Delete
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.CurrentToolSlot">
            <summary>
            Tool Changer slot number of current tool
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SelectedToolSlot">
            <summary>
             Tool slot selected but not active
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ToolLengthOffset">
            <summary>
            Current tool length offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ToolXOffset">
            <summary>
            Current tool X offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ToolYOffset">
            <summary>
            Current tool Y offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.ToolLengthOffsetIndex">
            <summary>
            Row in tool table for current Length Offset
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.RadiusComp">
            <summary>
            Radius compensation mode
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.RadiusCompValue">
            <summary>
            Radius compensation value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.RadiusCompSide">
            <summary>
            Radius compensation side
            CANON_SIDE_RIGHT = 1,
            CANON_SIDE_LEFT = 2,
            CANON_SIDE_OFF = 3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.AllowSpindleSpeedOverride">
            <summary>
            Gets/sets whether to allow spindle feed override
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SpindleSpeed">
            <summary>
            Current Spindle Speed
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.FeedRate">
            <summary>
            Current FeedRate
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SpindleDirection">
            <summary>
            Spindle rotation direction
            CANON_STOPPED = 1,
            CANON_CLOCKWISE = 2,
            CANON_COUNTERCLOCKWISE = 3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_CC">
            <summary>
            Gets/sets canned Cycle C value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_I">
            <summary>
            Gets/sets canned Cycle I value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_J">
            <summary>
            Gets/sets canned Cycle J value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_K">
            <summary>
            Gets/sets canned Cycle K value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_L">
            <summary>
            Gets/sets canned Cycle L value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_P">
            <summary>
            Gets/sets canned Cycle P value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_Q">
            <summary>
            Gets/sets canned Cycle Q value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_R">
            <summary>
            Gets/sets canned Cycle R value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_Z">
            <summary>
            Gets/sets canned Cycle Z value
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.Cycle_RetractMode">
            <summary>
            Gets/sets canned Retract Mode
            R_PLANE = 0,
            OLD_Z = 1
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_p_flag">
            <summary>
            Gets p flag (p word present) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_p_number">
            <summary>
            Gets p number (p word) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_q_flag">
            <summary>
            Gets q flag (q word present) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_q_number">
            <summary>
            Gets q number (q word) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_r_flag">
            <summary>
            Gets r flag (r word present) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_r_number">
            <summary>
            Gets r number (r word) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_d_flag">
            <summary>
            Gets d flag (d word present) in current GCode Block
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.block_d_number">
            <summary>
            Gets d number (d word) in current GCode Block
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SetTool(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the given tool table location
            </summary>
            <param name="index">Table Index</param>
            <param name="slot">Tool changer slot referenced in GCode as 2 digit number</param>
            <param name="id">Tool ID referenced in GCode as 4 digit number</param>
            <param name="length">Tool Length Offset</param>
            <param name="diameter">Tool Diameter Offset</param>
            <param name="xoffset">Tool X Offset</param>
            <param name="yoffset">Tool Y Offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.GetTool(System.Int32,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get info on specific tool
            </summary>
            <param name="index">Table Index</param>
            <param name="slot">Tool changer slot referenced in GCode as 2 digit number</param>
            <param name="ID">Tool ID referenced in GCode as 4 digit number</param>
            <param name="length">Tool Length Offset</param>
            <param name="diameter">Tool Diameter Offset</param>
            <param name="xoffset">Tool X Offset</param>
            <param name="yoffset">Tool Y Offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.GetParameter(System.Int32)">
            <summary>
            Get GCode parameter by index.
            </summary>
            <param name="index">Parameter index.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.KM_Interpreter_SetupParams.SetParameter(System.Int32,System.Double)">
            <summary>
            Set parameter value.
            </summary>
            <remarks>Will return false if out of range.</remarks>
            <param name="index">Index of parameter.</param>
            <param name="value">Value of parameter.</param>
            <returns>True is successful.</returns>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterCompleteHandler">
            <summary>
            Delegate reperesenting the
            
            KM_dotNet_Interop  netG_COMPLETE_CALLBACK Function Pointer
            </summary>
            <param name="status">Exit Status Code</param>
            <param name="lineno">Final processed line number</param>
            <param name="sequence_number">Block sequence</param>
            <param name="err">Error message ( if any )</param>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterStatusHandler">
            <summary>
            Delegate reperesenting the
            
            KM_dotNet_Interop  netG_STATUS_CALLBACK Function Pointer
            </summary>
            <param name="lineno">current line number of the interpreted block</param>
            <param name="msg">Block Data</param>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterUserCallbackHandler">
            <summary>
            Delegate reperesenting the
            
            KM_dotNet_Interop  netG_USER_CALLBACK Function Pointer
            </summary>
            <param name="msg">Interpreted User Callback Message</param>
        </member>
        <member name="T:KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterUserMcodeCallbackHandler">
            <summary>
            Delegate reperesenting the
            
            KM_dotNet_Interop  netG_USER_MCODE_CALLBACK Function Pointer
            </summary>
            <param name="code">Interpreted User MCODE Callback code</param>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter._InstanceHandle">
            <summary>
            CCoordMotion class instance pointer
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter._ErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter._Loaded">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter._SetupParams">
            <summary>
            Direct Access to the EMC Setup Parameters
            Use caution when setting any of these properties during run
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter.InterpreterCompletedHandler">
            <summary>
            Internal Interpreter Complete callback handler for the GCodeInterpreter.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter.InterpreterStatusUpdatedHandler">
            <summary>
            Internal Interpreter Status callback handler for the GCodeInterpreter.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter.InterpreterUserCallbackRequestedHandler">
            <summary>
            Internal Interpreter UserCallback callback handler for the GCodeInterpreter.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Interpreter.InterpreterUserMCodeCallbackRequestedHandler">
            <summary>
            Internal Interpreter UserMcodeCallback callback handler for the GCodeInterpreter.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Interpreter.InterpreterCompleted">
            <summary>
            Event handler to signal that Interpreter has completed
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Interpreter.InterpreterStatusUpdated">
            <summary>
            Event handler to signal that Interpreter Status has been updated
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Interpreter.InterpreterUserCallbackRequested">
            <summary>
            Event handler to signal that a User Callback has been issued
            Blocks interpretation until handled by subscriber(s)
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Interpreter.InterpreterUserMCodeCallbackRequested">
            <summary>
            Event handler to signal that a User MCode Callback has been issued
            Blocks interpretation until handled by subscriber(s)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.Handle">
            <summary>
            CCoordMotion class instance pointer
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.MaxErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.Loaded">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.IsAbort">
            <summary>
            Returns true if the CoordMotion is aborting
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.IsHalt">
            <summary>
            Returns true if the CoordMotion is halted
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.SetupParams">
            <summary>
            Direct Access to the EMC Setup Parameters
            Use caution when setting any of these properties during run
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.CanResume">
            <summary>
            Enables Resuming after a Halt or Tool Change
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeSafeZ">
            <summary>
            Safe Z height to be raised to.
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeSafeRelAbs">
            <summary>
            Specifies if the Z heights are Absolute or Relative 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeMoveToSafeZ">
            <summary>
             Specifies whether or not the Z should be first moved up 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeTraverseXY">
            <summary>
            Specifies whether it is OK to move back to an XY position
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeTraverseSafeX">
            <summary>
            Position in X on Resume
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeTraverseSafeY">
            <summary>
            Position in Y on Resume
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeSafeStartSpindle">
            <summary>
            Specifies if the Spindle should be re-started 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeSafeSpindleCWCCW">
            <summary>
            Specifies Spindle direction if it is to be re-started 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeDoSafeFeedZ">
            <summary>
            specifies if the Z should then be fed down to some height 
            </summary>
            <returns>true if feed should be performed</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeFeedSafeZ">
            <summary>
            Specifies height Z should be fed down to 
            </summary>
            <returns>height in inches</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeFeedRate">
            <summary>
            Specifies Rate at which feed rate should be restored to before continuing GCode
            </summary>
            <returns>Rate in ips</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeZFeedRate">
            <summary>
            Specifies Rate at which Z feed rate should be set at
            </summary>
            <returns>Rate in ips</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ResumeRestoreFeedRate">
            <summary>
            Specifies whether or not the specified feed rate should be restored 
            </summary>
            <returns>true if feed should be restored</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.InitializeOnExecute">
            <summary>
            Specifies whether or not the Interpreter should be intialized before execution 
            </summary>
            <returns>true if the Interpreter should be initialized</returns>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.InterpretThreadID">
            <summary>
            The Worker Thread ID of the GCode Interpreter 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.InvokeThreadID">
            <summary>
            The Worker Thread ID of the GCode Interpreter Invoke Action 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ReadToolFile">
            <summary>
            Specifies whether or not the Interpreter should read the Tool file before execution 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.ToolFile">
            <summary>
            File path for the EMC style Tool File
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.SetupFile">
            <summary>
            File path for the EMC setup parameters
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Interpreter.VarsFile">
            <summary>
            File path for the EMC Vars file
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.#ctor(KMotion_dotNet.KM_CoordMotion)">
            <summary>
            Primary constructor for the KM_Interpreter object
            </summary>
            <param name="coordmotion">KM_CoordMotion object to associate the Interpreter with</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.GetIsAbort">
            <summary>
            KM_Interpreter Abort Condition
            </summary>
            <returns>true if Aborted</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.GetIsHalt">
            <summary>
            KM_Interpreter Halt Condition
            </summary>
            <returns>true if Halted</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_CanResume">
            <summary>
            Get KM_Interpreter possible to resume after a halt
            </summary>
            <returns>true if resume sequence should be executed before beginning GCode</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_CanResume(System.Boolean)">
            <summary>
            Set KM_Interpreter possible to resume after a halt
            </summary>
            <param name="value">true if possible to resume</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeSafeZ">
            <summary>
            Get KM_Interpreter Safe Z height for Resume sequence
            </summary>
            <returns>true if Safe Z Motion is to be performed</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeSafeZ(System.Double)">
            <summary>
            Set KM_Interpreter Safe Z height for Resume sequence
            </summary>
            <param name="value">true if Safe Z Motion is to be performed</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeSafeRelAbs">
            <summary>
            Get KM_Interpreter Safe Z Motion Relative vs Absolute setting
            1=abs 0=rel
            </summary>
            <returns>1=abs 0=rel</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeSafeRelAbs(System.Int32)">
            <summary>
            Set KM_Interpreter Safe Z Motion Relative vs Absolute setting
            1=abs 0=rel
            </summary>
            <param name="value">1=abs 0=rel</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeMoveToSafeZ">
            <summary>
            Get KM_Interpreter Safe Z Motion to be performed or not
            </summary>
            <returns>true if motion is to be performed</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeMoveToSafeZ(System.Boolean)">
            <summary>
            Set KM_Interpreter Safe Z Motion to be performed
            </summary>
            <param name="value">true to perform Z feed</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeTraverseXY">
            <summary>
            Get KM_Interpreter XY Traverse Motion to be performed
            </summary>
            <returns>true to perform Traverse Motion</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeTraverseXY(System.Boolean)">
            <summary>
            Set KM_Interpreter XY Traverse Safe Motion to be performed
            </summary>
            <param name="value">true to perform Traverse Motion</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeTraverseSafeX">
            <summary>
            Get KM_Interpreter XY Traverse Safe Motion to be performed
            </summary>
            <returns>x position in inches</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeTraverseSafeX(System.Double)">
            <summary>
            Set KM_Interpreter Traverse Safe Motion X Position
            </summary>
            <param name="value">X Position in inches</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeTraverseSafeY">
            <summary>
            Get KM_Interpreter Traverse Safe Motion Y Position
            </summary>
            <returns>Y position in inches</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeTraverseSafeY(System.Double)">
            <summary>
            Set KM_Interpreter Traverse Safe Motion Y Position
            </summary>
            <param name="value">Y Position in inches</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeSafeStartSpindle">
            <summary>
            Get KM_Interpreter Safe Resume Start Spindle to be performed
            </summary>
            <returns>true to perform Start Spindle</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeSafeStartSpindle(System.Boolean)">
            <summary>
            Set KM_Interpreter Safe Resume Start Spindle to be performed
            </summary>
            <param name="value">true if Spindle Start should be performed</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeSafeSpindleCWCCW">
            <summary>
            Get KM_Interpreter Safe Resume Start Spindle Direction to be performed
            </summary>
            <returns>0=CW 1=CCW</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeSafeSpindleCWCCW(System.Int32)">
            <summary>
            Set KM_Interpreter Safe Resume Start Spindle Direction to be performed
            </summary>
            <param name="value">0=CW 1=CCW</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeDoSafeFeedZ">
            <summary>
            Get KM_Interpreter Safe Resume Z Feed to be performed
            </summary>
            <returns>true if to be performed</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeDoSafeFeedZ(System.Boolean)">
            <summary>
            Set KM_Interpreter Safe Resume Z Feed to be performed
            </summary>
            <param name="value">true to perform Z feed</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeFeedSafeZ">
            <summary>
            Get KM_Interpreter Safe Resume Z Feed Rate to be used
            </summary>
            <returns>Feed Rate in ips</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeFeedSafeZ(System.Double)">
            <summary>
            Set KM_Interpreter Safe Resume Z Feed Rate to be used
            </summary>
            <param name="value">Rate in ips</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeFeedRate">
            <summary>
            Get KM_Interpreter Safe Resume Feed Rate to be used
            </summary>
            <returns>Rate ips</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeFeedRate(System.Double)">
            <summary>
            Set KM_Interpreter Safe Resume Feed Rate to be used
            </summary>
            <param name="value">rate ips</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeZFeedRate">
            <summary>
            Get KM_Interpreter Safe Resume Z Feed Rate to be used
            </summary>
            <returns>Feed Rate in ips</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeZFeedRate(System.Double)">
            <summary>
            Set KM_Interpreter Safe Resume Z Feed Rate to be used
            </summary>
            <param name="value">rate ips</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_ResumeRestoreFeedRate">
            <summary>
            Get KM_Interpreter Safe Resume Feed Rate to be restored or not
            </summary>
            <returns>true if to be restored</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_ResumeRestoreFeedRate(System.Boolean)">
            <summary>
            Set KM_Interpreter Safe Resume Feed Rate to be restored or not
            </summary>
            <param name="value">rate ips</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ChangeFixtureNumber(System.Int32)">
            <summary>
            Set the current fixture
            </summary>
            <param name="fixture">Fixture Index</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.SetOrigin(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the origin offset
            </summary>
            <param name="index">Origin index - 0 for G92 offsets, 1-9 for fixture offsets</param>
            <param name="x">X offset</param>
            <param name="y">Y offset</param>
            <param name="z">Z offset</param>
            <param name="a">a offset</param>
            <param name="b">b offset</param>
            <param name="c">c offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.GetOrigin(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the Origin offset
            </summary>
            <param name="index">Origin index - 0 for G92 offsets, 1-9 for fixture offsets</param>
            <param name="x">X offset</param>
            <param name="y">Y offset</param>
            <param name="z">Z offset</param>
            <param name="a">a offset</param>
            <param name="b">b offset</param>
            <param name="c">c offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.SetMcodeAction(System.Int32,KMotion_dotNet.MCODE_TYPE,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Sets an MCode Action definition
            </summary>
            <param name="index">mcode ex(M6 = 6)</param>
            <param name="type">MCODE_TYPE for this action</param>
            <param name="val1">double param 1 for action</param>
            <param name="val2">double param 2 for action</param>
            <param name="val3">double param 3 for action</param>
            <param name="val4">double param 4 for action</param>
            <param name="val5">double param 5 for action</param>
            <param name="name">mcode name</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.GetMcodeAction(System.Int32,KMotion_dotNet.MCODE_TYPE@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
            Gets an MCode Action definition
            </summary>
            <param name="index">mcode ex(M6 = 6)</param>
            <param name="type">MCODE_TYPE for this action</param>
            <param name="val1">double param 1 for action</param>
            <param name="val2">double param 2 for action</param>
            <param name="val3">double param 3 for action</param>
            <param name="val4">double param 4 for action</param>
            <param name="val5">double param 5 for action</param>
            <param name="name">mcode name</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.InchesToUserUnits(System.Double)">
            <summary>
            Takes in an inch value and returns the value in
            Interpreter's current units
            </summary>
            <param name="inches">input inch value</param>
            <returns>Current User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.UserUnitsToInches(System.Double)">
            <summary>
            Takes in a value as Interpreter's current units and returns the value in Inches
            </summary>
            <param name="units">input unit value</param>
            <returns>Inches</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsX(System.Double)">
            <summary>
            Takes ABS "X" value and translates to Iterpreter User Units
            </summary>
            <param name="x">ABS value</param>
            <returns>Current X value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsY(System.Double)">
            <summary>
            Takes ABS "Y" value and translates to Iterpreter User Units
            </summary>
            <param name="y">ABS value</param>
            <returns>Current Y value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsZ(System.Double)">
            <summary>
            Takes ABS "Z" value and translates to Iterpreter User Units
            </summary>
            <param name="z">ABS value</param>
            <returns>Current Z value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsA(System.Double)">
            <summary>
            Takes ABS "A" value and translates to Iterpreter User Units
            </summary>
            <param name="a">ABS value</param>
            <returns>Current A value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsB(System.Double)">
            <summary>
            Takes ABS "B" value and translates to Iterpreter User Units
            </summary>
            <param name="b">ABS value</param>
            <returns>Current B value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsToUserUnitsC(System.Double)">
            <summary>
            Takes ABS "C" value and translates to Iterpreter User Units
            </summary>
            <param name="c">ABS value</param>
            <returns>Current C value in User Units</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.InvokeAction(System.Int32,System.Boolean)">
            <summary>
            Invokes a preset "Action"
            Will need clarification on how to setup these Actions
            </summary>
            <param name="i">Action index?</param>
            <param name="flushbeforeunbufferedoperation">Flush current operations before execution</param>
            <returns>1 if successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Interpret(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interpret a File with the functionality to only interpret a portion of the file
            (useful for resuming execution after a program stoppage)
            </summary>
            <param name="fname">Full path of the file to interpret</param>
            <param name="start">first line to execute</param>
            <param name="end">Last line to execute</param>
            <param name="restart">Reinitializes Interpreter Settings</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Interpret(System.String)">
            <summary>
            Interpret an entire File
            </summary>
            <param name="fname">Full path of the file to interpret</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.InitializeInterpreter">
            <summary>
            Resets the interpreter params to the inital state
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ExecutePC(System.String)">
            <summary>
            Calling this spawns a Windows PC Application by the specified name 
            </summary>
            <param name="name">Path Name of Executable</param>
            <returns>1 if successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.DoExecute">
            <summary>
            Internal Use only?
            </summary>
            <returns>1 if successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Halt">
            <summary>
            Halt Intpreter Execution
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Abort">
            <summary>
            Abort Intpreter Execution
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ReadAndSynchCurInterpreterPosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Syncronizes the Interpreter Position to the current Axes Positions
            </summary>
            <param name="x">X sync'ed position</param>
            <param name="y">Y sync'ed position</param>
            <param name="z">Z sync'ed position</param>
            <param name="a">a sync'ed position</param>
            <param name="b">b sync'ed position</param>
            <param name="c">c sync'ed position</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ReadCurInterpreterPosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Syncronizes the Interpreter Position to the current Axes Positions
            </summary>
            <param name="x">X sync'ed position</param>
            <param name="y">Y sync'ed position</param>
            <param name="z">Z sync'ed position</param>
            <param name="a">a sync'ed position</param>
            <param name="b">b sync'ed position</param>
            <param name="c">c sync'ed position</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ReadCurMachinePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Read Hardware and convert to Absolute Machine Coordinates
            </summary>
            <param name="x">X returned Machine Coordinate</param>
            <param name="y">Y returned Machine Coordinate</param>
            <param name="z">Z returned Machine Coordinate</param>
            <param name="a">a returned Machine Coordinate</param>
            <param name="b">b returned Machine Coordinate</param>
            <param name="c">c returned Machine Coordinate</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsoluteToMachine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert Absolute to Machine Coordinates
            </summary>
            <param name="x">X Passed in Absolute Coordinate</param>
            <param name="y">Y Passed in Absolute Coordinate</param>
            <param name="z">Z Passed in Absolute Coordinate</param>
            <param name="a">a Passed in Absolute Coordinate</param>
            <param name="b">b Passed in Absolute Coordinate</param>
            <param name="c">c Passed in Absolute Coordinate</param>
            <param name="xp">X returned Machine Coordinate</param>
            <param name="yp">Y returned Machine Coordinate</param>
            <param name="zp">Z returned Machine Coordinate</param>
            <param name="ap">a returned Machine Coordinate</param>
            <param name="bp">b returned Machine Coordinate</param>
            <param name="cp">c returned Machine Coordinate</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.ConvertAbsoluteToInterpreterCoord(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert Absolute to Interpreter Coordinates
            </summary>
            <param name="x">X Passed in Absolute Coordinate</param>
            <param name="y">Y Passed in Absolute Coordinate</param>
            <param name="z">Z Passed in Absolute Coordinate</param>
            <param name="a">a Passed in Absolute Coordinate</param>
            <param name="b">b Passed in Absolute Coordinate</param>
            <param name="c">c Passed in Absolute Coordinate</param>
            <param name="xp">X returned Interpreter Coordinate</param>
            <param name="yp">Y returned Interpreter Coordinate</param>
            <param name="zp">Z returned Interpreter Coordinate</param>
            <param name="ap">a returned Interpreter Coordinate</param>
            <param name="bp">b returned Interpreter Coordinate</param>
            <param name="cp">c returned Interpreter Coordinate</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_InterpretWin32ThreadID">
            <summary>
            Return the current Thread ID as a Win32 Identifier
            useful in comparing Thead IDs with Interpreter Worker Thread
            </summary>
            <returns>Returns the current Thread ID</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Get_VarsFile">
            <summary>
            Gets the file to be used to store/restore Interpreter GCode Variables
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_VarsFile(System.String)">
            <summary>
            Sets the file to be used to store/restore Interpreter GCode Variables
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_G_COMPLETE_CALLBACK">
            <summary>
            Sets the internal Interpreter Complete callback for the GcodeInterpreter.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_G_STATUS_CALLBACK">
            <summary>
            Sets the internal Interpreter Status callback for the GcodeInterpreter.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_G_USER_CALLBACK">
            <summary>
            Sets the internal Interpreter User Callback callback for the GcodeInterpreter.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Set_G_USER_MCODE_CALLBACK">
            <summary>
            Sets the internal Interpreter User MCode  callback for the GcodeInterpreter.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer to be destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.OnInterpreterCompleted(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Dispatches Interpreter Completed callback values to 
            InterpreterCompleted event subscribers
            
            </summary>
            <param name="status">Completion Status Code</param>
            <param name="lineno">last processed line number of Gcode file</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="err">Error (if any)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.OnInterpreterStatusUpdated(System.Int32,System.String)">
            <summary>
            Dispatches Status Updated callback values to 
            InterpreterStatusUpdated event subscribers
            
            </summary>
            <param name="lineno">processed line number of Gcode file</param>
            <param name="msg">Gcode Block Data</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.OnInterpreterUserCallbackRequested(System.String)">
            <summary>
            Dispatches User Callback Requested callback values to 
            InterpreterUserCallbackRequested event subscribers
            
            </summary>
            <param name="msg">Imbedded User Callback</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.OnInterpreterUserMcodeCallbackRequested(System.Int32)">
            <summary>
            Dispatches User MCode Callback Requested callback values to 
            InterpreterUserMcodeCallbackRequested event subscribers
            
            </summary>
            <param name="mcode">MCode number </param>
        </member>
        <member name="M:KMotion_dotNet.KM_Interpreter.Dispose">
            <summary>
            Releases the object resources
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionStraightTraverseHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netSTRAIGHT_TRAVERSE_CALLBACK Function Pointer
            </summary>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="sequence_number">User supplied sequence</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionStraightTraverseSixAxisHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netSTRAIGHT_TRAVERSE_SIX_AXIS_CALLBACK Function Pointer
            </summary>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="a">A destination</param>
            <param name="b">B destination</param>
            <param name="c">C destination</param>
            <param name="sequence_number">User supplied sequence</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionStraightFeedHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netSTRAIGHT_FEED_CALLBACK Function Pointer
            </summary>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionStraightFeedSixAxisHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netSTRAIGHT_FEED_SIX_AXIS_CALLBACK Function Pointer
            </summary>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="a">A destination</param>
            <param name="b">B destination</param>
            <param name="c">C destination</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionArcFeedHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netARC_FEED_CALLBACK Function Pointer
            </summary>
            <param name="ZeroLenAsFullCircles"></param>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="plane">CANON_PLANE arc is being commanded</param>
            <param name="first_end">Localized "X" end point</param>
            <param name="second_end">Localized "Y" end point</param>
            <param name="first_axis">Localized "X" center point</param>
            <param name="second_axis">Localized "Y" center point</param>
            <param name="rotation">Rotation of arc 0=CW 1 = CCW</param>
            <param name="axis_end_point">Final Z position for helix calls</param>
            <param name="first_start">Localized "X" start point</param>
            <param name="second_start">Localized "Y" start point</param>
            <param name="axis_start_point">Initial Z position for helix calls</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotionArcFeedSixAxisHandler">
            <summary>
            Delegate reperesenting the KM_dotNet_Interop  netARC_FEED_CALLBACK Function Pointer
            </summary>
            <param name="ZeroLenAsFullCircles"></param>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="plane">CANON_PLANE arc is being commanded</param>
            <param name="first_end">Localized "X" end point</param>
            <param name="second_end">Localized "Y" end point</param>
            <param name="first_axis">Localized "X" center point</param>
            <param name="second_axis">Localized "Y" center point</param>
            <param name="rotation">Rotation of arc 0=CW 1 = CCW</param>
            <param name="axis_end_point">Final Z position for helix calls</param>
            <param name="a">Final A position </param>
            <param name="b">Final B position </param>
            <param name="c">Final C position </param>
            <param name="first_start">Localized "X" start point</param>
            <param name="second_start">Localized "Y" start point</param>
            <param name="axis_start_point">Initial Z position for helix calls</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="T:KMotion_dotNet.TraverseCompletedHandler">
            <summary>
            Delegate that gets fired off on an async Straight Traverse return call
            </summary>
            <param name="callback">User supplied object that gets returned when complete.  This can be used to keep track of several calls</param>
        </member>
        <member name="T:KMotion_dotNet.KM_CoordMotion">
            <summary>
            Coordinated Motion class representing the CoordMotion.cpp object
            from the C++ Dynotion Code
            
            Use to directly control multiple axis motion
            
            Notably::
            
            Straight Traverse
            
            Straight Feed
            
            Arc Feed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion._InstanceHandle">
            <summary>
            CCoordMotion class instance pointer
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion._ErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion._Loaded">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion._MotionParams">
            <summary>
            Accessor to the various MotionParams
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightTraverseHandler">
            <summary>
            Internal Straight Traverse callback handler for the CoordMotion.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightFeedHandler">
            <summary>
            Internal Straight Feed callback handler for the CoordMotion.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion.CoordMotionArcFeedHandler">
            <summary>
            Internal Arc Feed callback handler for the CoordMotion.cpp class
            
            this delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightTraverse">
            <summary>
            Event handler to signal the download of a Straight Traverse segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightTraverseSixAxis">
            <summary>
            Event handler to signal the download of a Straight Traverse segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightFeed">
            <summary>
            Event handler to signal the download of a Straight Feed segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionStraightFeedSixAxis">
            <summary>
            Event handler to signal the download of a Straight Feed segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionArcFeed">
            <summary>
            Event handler to signal the download of a Arc Feed segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.CoordMotionArcFeedSixAxis">
            <summary>
            Event handler to signal the download of a Arc Feed segment into the Coordmotion buffer
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_CoordMotion.AsyncTraverseCompleted">
            <summary>
            Event handler to signal calling application when an async traverse has completed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_CoordMotion._Interpreter">
            <summary>
            RS274 Interpreter Component
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.InstanceHandle">
            <summary>
            CCoordMotion class instance pointer
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.MaxErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.BoardNumber">
            <summary>
            Board number (for use in multiple board scenarios)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.Loaded">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.FeedRateOverride">
            <summary>
            Gets/Sets the Feedrate override for all axes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.FeedRateRapidOverride">
            <summary>
            Gets/Sets the Feedrate Rapid override for all axes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.SpindleRateOverride">
            <summary>
            Gets/Sets the Spindlerate override for all axes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.HardwareFRORange">
            <summary>
            Gets/Sets the Hardware FRO Range for all axes
            Below this value FRO is handled by hardware (no delay)
            Above this value FRO is handle by the Trajectory Planner (proper accelerations)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.IsAbort">
            <summary>
            Returns true if the CoordMotion is aborting
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.IsHalt">
            <summary>
            Returns true if the CoordMotion is halted
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.IsSimulation">
            <summary>
            Flags whether to Simulate commands or not
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.IsPreviouslyStopped">
            <summary>
            Result of previous Interpreter Halt
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.MotionParams">
            <summary>
            Accessor to the various MotionParams
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.Interpreter">
            <summary>
            RS274 Interpreter Component
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.#ctor(KMotion_dotNet.KM_Controller)">
            <summary>
            Primary constructor for KM_CoordMotion object
            </summary>
            <param name="controller">KM_Controller object to associate the CoodMotion object with</param>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.BufferedSegments">
            <summary>
            Gets how may segments are currently loaded into the CoordMotion buffer
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.TotalTimeInBuffer">
            <summary>
            Gets time Total time downloaded into the CoordMotion buffer
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.TimeExecuted">
            <summary>
            Gets how many seconds have already been executed
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_CoordMotion.RemainingTimeInBuffer">
            <summary>
            Gets time Total time downloaded into the CoordMotion buffer
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DownloadInit">
            <summary>
            Initializes download
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.CheckMotionHalt(System.Boolean)">
            <summary>
            Cehecks for a motion halt
            </summary>
            <param name="coord"> specify axis mapped axes only</param>
            <returns>true if a halt exists</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ExecutionStop">
            <summary>
            Stop the execution of current motion in a controlled number
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetFeedRateOverride">
            <summary>
            Gets the current Feedrate override
            </summary>
            <returns>override percentage</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetFeedRateRapidOverride">
            <summary>
            Gets the current Feedrate Rapidoverride
            </summary>
            <returns>override percentage</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetFeedRateOverride(System.Double)">
            <summary>
            Sets the current Feedrate override
            </summary>
            <param name="value">override percentage</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetFeedRateRapidOverride(System.Double)">
            <summary>
            Sets the current Rapid Feedrate override
            </summary>
            <param name="value">override percentage</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetSpindleRateOverride">
            <summary>
            Gets the current Spindlerate override
            </summary>
            <returns>override percentage</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetSpindleRateOverride(System.Double)">
            <summary>
            Sets the current Spindlerate override
            </summary>
            <param name="value">override percentage</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetHardwareFRORange">
            <summary>
            Gets the Hardware FRO Range for all axes
            Below this value FRO is handled by hardware (no delay)
            Above this value FRO is handle by the Trajectory Planner (proper accelerations)
            </summary>
            <returns>override percentage</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetHardwareFRORange(System.Double)">
            <summary>
            Sets the Hardware FRO Range for all axes
            Below this value FRO is handled by hardware (no delay)
            Above this value FRO is handle by the Trajectory Planner (proper accelerations)
            </summary>
            <param name="value">override percentage</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetAxisDestination(System.Int32)">
            <summary>
            Gets the axis destination
            </summary>
            <param name="axis">Axis map index</param>
            <returns>actual axis destination</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetAxisPosition(System.Int32)">
            <summary>
            Gets the axis position
            </summary>
            <param name="axis">Axis map index</param>
            <returns>actual axis position</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetIsAbort">
            <summary>
            Property accessor to query Abort condition
            </summary>
            <returns>true if device is in an Abort state</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Abort">
            <summary>
            Abort causes all motion to abruptly stop usually due to something catastrophic like a communication error
            Use in an E-Stop condition
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ClearAbort">
            <summary>
            Clears any existing Abort conditions
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetIsHalt">
            <summary>
            Property accessor to query Halt condition
            </summary>
            <returns>true if device is in an Halt state</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Halt">
            <summary>
            Halt cause motion to stop in a controlled manner.  A feed hold is commanded so that the motion decellerates along the intended path. 
            After the system completely stops, the exact point in the Coordinated Motion Buffer where the stop actually happened is uploaded and the GCode Interpreter is rewound to that point. 
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ClearHalt">
            <summary>
            Clear any exisiting halts
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.FlushSegments">
            <summary>
            Flushes the segment buffer 
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.WaitForSegmentsFinished(System.Boolean)">
            <summary>
            Waits for all buffered segments to complete
            Blocks calling thread until the buffer is complete
            </summary>
            <param name="suppressdisablederror">suppress errors cause by commanding a disabled axis</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.WaitForMoveXYZABCFinished">
            <summary>
            Blocks calling thread until all commanded motion is complete
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DoKMotionCmd(System.String,System.Boolean)">
            <summary>
            Processes a console script command
            </summary>
            <param name="command">console script</param>
            <param name="flushbufferfirst">Flush current buffered commands before adding a new one</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.KinematicsReadGeoTable(System.String)">
            <summary>
            Loads Coordinated Motion Kinematics Geo Correction Table
            </summary>
            <param name="filename">Geo Correction File Name to load</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DoKMotionBufCmd(System.String)">
            <summary>
            Inserts a console script command in the buffer
            </summary>
            <param name="command">command</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.MeasurePointAppendToFile(System.String)">
            <summary>
            Write position data to file
            </summary>
            <param name="command">file name to append to</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.StartTraverse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Object)">
            <summary>
            Fires an async delegate to move axes at traversal speeds non-interpolated
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <param name="z">z position</param>
            <param name="a">a position</param>
            <param name="b">b position</param>
            <param name="c">c position</param>
            <param name="suppresscallback">Prevents callback information from being dispatched</param>
            <param name="usercallback">User supplied object that gets returned when traverse is complete</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.OnTraverseCompletes(System.IAsyncResult)">
            <summary>
            Returns after the Async Traverse is called
            </summary>
            <param name="result">User supplied object that gets returned when traverse is complete</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.StraightTraverse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Move axes at traversal speeds non-interpolated
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <param name="z">z position</param>
            <param name="a">a position</param>
            <param name="b">b position</param>
            <param name="c">c position</param>
            <param name="suppresscallback">Prevents callback information from being dispatched</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ArcFeed(System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Perform arc motion at a specified feed rate (in/sec)
            </summary>
            <param name="feedrate">Desired feed rate</param>
            <param name="plane">plane to perform arc (determines axis pair to use)</param>
            <param name="planarXend">X end point of arc</param>
            <param name="planarYend">Y end point of arc</param>
            <param name="planarXcenter">X center of rotation of arc</param>
            <param name="planarYcenter">Y center of rotation of arc</param>
            <param name="rotation">CW or ACW</param>
            <param name="planarZ">End point of perpindicular axis(for helical motion)</param>
            <param name="a">final end position of a axis</param>
            <param name="b">final end position of a axis</param>
            <param name="c">final end position of a axis</param>
            <param name="sequence_number">internal reference</param>
            <param name="ID">internal reference</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ArcFeedAccel(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Perform arc motion at a specified feed rate (in/sec) and Acceleration (in/sec2)
            </summary>
            <param name="feedrate">Desired feed rate</param>
            <param name="accel">Desired acceleration rate</param>
            <param name="plane">plane to perform arc (determines axis pair to use)</param>
            <param name="planarXend">X end point of arc</param>
            <param name="planarYend">Y end point of arc</param>
            <param name="planarXcenter">X center of rotation of arc</param>
            <param name="planarYcenter">Y center of rotation of arc</param>
            <param name="rotation">CW or ACW</param>
            <param name="planarZ">End point of perpindicular axis(for helical motion)</param>
            <param name="a">final end position of a axis</param>
            <param name="b">final end position of a axis</param>
            <param name="c">final end position of a axis</param>
            <param name="sequence_number">internal reference</param>
            <param name="ID">internal reference</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.StraightFeed(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Perform linear motion at a specified feed rate (in/sec)
            </summary>
            <param name="feedrate">Desired feed rate</param>
            <param name="x">X end point</param>
            <param name="y">Y end point</param>
            <param name="z">Z end point</param>
            <param name="a">A end point</param>
            <param name="b">B end point</param>
            <param name="c">C end point</param>
            <param name="sequence_number">internal reference</param>
            <param name="ID">internal reference</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.StraightFeedAccel(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Perform linear motion at a specified feed rate (in/sec) and Acceleration (in/sec2)
            </summary>
            <param name="feedrate">Desired feed rate</param>
            <param name="accel">Desired acceleration rate</param>
            <param name="x">X end point</param>
            <param name="y">Y end point</param>
            <param name="z">Z end point</param>
            <param name="a">A end point</param>
            <param name="b">B end point</param>
            <param name="c">C end point</param>
            <param name="sequence_number">internal reference</param>
            <param name="ID">internal reference</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DownloadDoneSegments">
            <summary>
            Download all computed segments from the Trajectory Planner to the device buffer
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.OutputSegment(System.Int32)">
            <summary>
            Output given segment
            </summary>
            <param name="segment">segment index to output</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DoSpecialCommand(System.Int32)">
            <summary>
            Perform segment execution
            </summary>
            <param name="segment">segment index</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.DoRateAdjustments(System.Int32,System.Int32,System.Double)">
            <summary>
            Update the Trajectory Planner's segment feedrates.
            </summary>
            <param name="i0">starting segment</param>
            <param name="i1">ending segment (inclusive)</param>
            <param name="feedrate">Desired Feedrate in in/sec</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetAxisDefinitions(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the assignment of KFLOP axis Channels to GCode Axes XYZABC, -1 indicates unused/unassigned axis
            </summary>
            <param name="x">KFLOP Axis number for x axis</param>
            <param name="y">KFLOP Axis number for y axis</param>
            <param name="z">KFLOP Axis number for z axis</param>
            <param name="a">KFLOP Axis number for a axis</param>
            <param name="b">KFLOP Axis number for b axis</param>
            <param name="c">KFLOP Axis number for c axis</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.GetAxisDefinitions(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the assignment of KFLOP axis Channels to GCode Axes XYZABC, -1 indicates unused/unassigned axis
            </summary>
            <param name="x">KFLOP Axis number for x axis</param>
            <param name="y">KFLOP Axis number for y axis</param>
            <param name="z">KFLOP Axis number for z axis</param>
            <param name="a">KFLOP Axis number for a axis</param>
            <param name="b">KFLOP Axis number for b axis</param>
            <param name="c">KFLOP Axis number for c axis</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetTPParams">
            <summary>
            Force the Trajectory Planner to update it's parameters
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Dwell(System.Double,System.Int32)">
            <summary>
            Pause motion fow given amount of time 
            </summary>
            <param name="seconds">time in seconds</param>
            <param name="sequence_number">sequence number to be associated with the dwell</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.UpdateCurrentPositionsABS(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Sets the passed variables to the CoordMotion's Absolute positions
            </summary>
            <param name="x">X axis value</param>
            <param name="y">Y axis value</param>
            <param name="z">Z axis value</param>
            <param name="a">A axis value</param>
            <param name="b">B axis value</param>
            <param name="c">C axis value</param>
            <param name="snap">snap to exact previously commanded postion (if close) to avoid rounding errors</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.ReadAndSyncCurPositions(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            First Syncs the Coor Motion Library to the current axis destinations then 
            sets the passed variables to the CoordMotion's Absolute positions
            </summary>
            <param name="x">X axis value</param>
            <param name="y">Y axis value</param>
            <param name="z">Z axis value</param>
            <param name="a">A axis value</param>
            <param name="b">B axis value</param>
            <param name="c">C axis value</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetStraightTraverseCallback">
            <summary>
            Sets the internal Straight Traverse callback for the CoordMotion.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetStraightFeedCallback">
            <summary>
            Sets the internal Straight Feed callback for the CoordMotion.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.SetArcFeedCallback">
            <summary>
            Sets the internal Arc Feed callback for the CoordMotion.cpp object
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.OnCoordMotionStraightTraverse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Dispatches Straight Traverse callback values to 
            CoordMotionStraightTraverse event subscribers
            
            </summary>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="a">A destination</param>
            <param name="b">B destination</param>
            <param name="c">C destination</param>
            <param name="sequence_number">User supplied sequence</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.OnCoordMotionStraightFeed(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Dispatches Straight Feed callback values to 
            CoordMotionStraightFeed event subscribers
            
            </summary>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="x">X destination</param>
            <param name="y">Y destination</param>
            <param name="z">Z destination</param>
            <param name="a">A destination</param>
            <param name="b">B destination</param>
            <param name="c">C destination</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.OnCoordMotionArcFeed(System.Boolean,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Dispatches Arc Feed callback values to 
            CoordMotionArcFeed event subscribers
            
            </summary>
            <param name="ZeroLenAsFullCircles"></param>
            <param name="DesiredFeedRate_in_per_sec">Requested Feedrate (may have been adjusted by the Tplanner)</param>
            <param name="plane">CANON_PLANE arc is being commanded</param>
            <param name="first_end">Localized "X" end point</param>
            <param name="second_end">Localized "Y" end point</param>
            <param name="first_axis">Localized "X" center point</param>
            <param name="second_axis">Localized "Y" center point</param>
            <param name="rotation">Rotation of arc 0=CW 1 = CCW</param>
            <param name="axis_end_point">Final Z position for helix calls</param>
            <param name="a">Final A position</param>
            <param name="b">Final B position</param>
            <param name="c">Final C position</param>
            <param name="first_start">Localized "X" start point</param>
            <param name="second_start">Localized "Y" start point</param>
            <param name="axis_start_point">Initial Z position for helix calls</param>
            <param name="sequence_number">User supplied sequence</param>
            <param name="ID">User supplied geometry ID</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Get_Simulate">
            <summary>
            Property getter Accessor for simulation
            </summary>
            <returns>true if CoordMotion is simulating</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Set_Simulate(System.Boolean)">
            <summary>
            Property setter Accessor for simulation
            </summary>
            <param name="value">flag to determine simulation state</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Get_PreviouslyStopped">
            <summary>
            Property getter Accessor for PreviouslyStopped
            </summary>
            <returns>code indicating type of stop that occurred</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Set_PreviouslyStopped(KMotion_dotNet.PREV_STOP_TYPE)">
            <summary>
            Property setter Accessor for PreviouslyStopped
            </summary>
            <param name="value">code indicating type of stop that occurred</param>
        </member>
        <member name="M:KMotion_dotNet.KM_CoordMotion.Dispose">
            <summary>
            Releases object resources
            </summary>
        </member>
        <member name="T:KMotion_dotNet.HexEncoding">
            <summary>
            Helper class for working with hex-binary stack objects
            </summary>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.#ctor">
            <summary>
            Default constructor for HexEncoding
            </summary>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.GetByteCount(System.String)">
            <summary>
            Counts the byte length of a Hex value
            </summary>
            <param name="hexString">Hex number in string format</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.GetBytes(System.String,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.ToString(System.Byte[])">
            <summary>
            Converts an array of bytes to a hexidecimal value represented by a string
            </summary>
            <param name="bytes">byte array</param>
            <returns>string representing the hexidecimal value from a byte array</returns>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.InHexFormat(System.String)">
            <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
            <param name="hexString">the hexidecimal string</param>
            <returns>true if in proper format</returns>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.IsHexDigit(System.Char)">
            <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
            <param name="c">Character to test</param>
            <returns>true if hex digit, false if not</returns>
        </member>
        <member name="M:KMotion_dotNet.HexEncoding.HexToByte(System.String)">
            <summary>
            Converts 1 or 2 character string into equivalant byte value
            </summary>
            <param name="hex">1 or 2 character string</param>
            <returns>byte</returns>
        </member>
        <member name="T:KMotion_dotNet.BOARD_TYPE">
            <summary>
            Type of Board Currently KFLOP or Kogna
            
            <remarks>
            Used where the Controllers Capabilities differ
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.BOARD_TYPE.UNKNOWN">
            <summary>
            Board type not yet determined
            </summary>
        </member>
        <member name="F:KMotion_dotNet.BOARD_TYPE.KFLOP">
            <summary>
            Controller is KFLOP
            </summary>
        </member>
        <member name="F:KMotion_dotNet.BOARD_TYPE.KOGNA">
            <summary>
            Controller is Kogna
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_PLANE">
            <summary>
            Represents the axis pair for executing arc segments
            
            <remarks>
            This enum can be parsed to the NIST enums
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_PLANE.CANON_PLANE_XY">
            <summary>
            Constrains an arc to be executed via X-Y interpolation
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_PLANE.CANON_PLANE_YZ">
            <summary>
            Constrains an arc to be executed via Y-Z interpolation
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_PLANE.CANON_PLANE_XZ">
            <summary>
            Constrains an arc to be executed via X-Z interpolation
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_UNITS">
            <summary>
            Units used by the g code file
            
            <remarks>
            The RS274 interpreter will translate these to inches relative to the CPI
            parameters in struct MotionParam
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_UNITS.CANON_UNITS_INCHES">
            <summary>
            Inches 1:1
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_UNITS.CANON_UNITS_MM">
            <summary>
            Milimeters 25.4:1
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_UNITS.CANON_UNITS_CM">
            <summary>
            Centimeters 2.54:1
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_MOTION_MODE">
            <summary>
            Motion profile for contouring
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_MOTION_MODE.CANON_EXACT_STOP">
            <summary>
            Exact Stop
            <remarks>
            Will perform accel/slew/decel on each segment
            <para>
            Most accurate type of motion
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_MOTION_MODE.CANON_EXACT_PATH">
            <summary>
            Exact Path
            <remarks>
            Creates an optimized path limited by vector accels and velocities
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_MOTION_MODE.CANON_CONTINUOUS">
            <summary>
            Continuous Contouring
            <remarks>
            Maintains a constant velocity over a series of path segments
            This is not an accurate machining profile, but useful for fast, smooth motion
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_SPEED_FEED_MODE">
            <summary>
            Feed synchronization mode
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_SPEED_FEED_MODE.CANON_SYNCHED">
            <summary>
            Synchronized
            <remarks>
             slaves an axis with a spindle encoder
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_SPEED_FEED_MODE.CANON_INDEPENDENT">
            <summary>
            Independent Feed
            
            <remarks>
            Motion is commanded without regard to external signals
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_DIRECTION">
            <summary>
            Spindle Direction
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_DIRECTION.CANON_STOPPED">
            <summary>
            Stopped
            
            <remarks>
            This is the state for the spindle when not spinning
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_DIRECTION.CANON_CLOCKWISE">
            <summary>
            Clockwise
            
            <remarks>
            This is the state for the spindle when spinning Clockwise
            <para>
            The rotation is relative from the tool's view
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_DIRECTION.CANON_COUNTERCLOCKWISE">
            <summary>
            CounterClockwise
            
            <remarks>
            This is the state for the spindle when spinning CounterClockwise
            <para>
            The rotation is relative from the tool's view
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_FEED_REFERENCE">
            <summary>
            Feed reference
            
            <remarks>
            The meaning of feed rate changes depending on the feed reference mode
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_FEED_REFERENCE.CANON_WORKPIECE">
            <summary>
            Workpiece Relative
            
            <remarks>
            Feed rate is from the point of view of the workpiece
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_FEED_REFERENCE.CANON_XYZ">
            <summary>
            XYZ Relative
            <remarks>
            Feedrate is in terms of axis motion
            <para>
            Some (perhaps most or all) existing dialects of RS274 use only the CANON_XYZ mode
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_SIDE">
            <summary>
            Canon Comp Side
            
            <remarks>
            Defines the tool offset direction
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_SIDE.CANON_SIDE_RIGHT">
            <summary>
            Right Comp
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_SIDE.CANON_SIDE_LEFT">
            <summary>
            Left Comp
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_SIDE.CANON_SIDE_OFF">
            <summary>
            No Comp
            </summary>
        </member>
        <member name="T:KMotion_dotNet.CANON_AXIS">
            <summary>
            Canon Axis
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_X">
            <summary>
            X Axis
            <remarks>
            Traverse Axis
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_Y">
            <summary>
            Y Axis
            <remarks>
            Transverse Axis
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_Z">
            <summary>
            Z Axis
            <remarks>
            Depth Axis
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_A">
            <summary>
            A Axis
            <remarks>
            Rotary Axis
            <para>
            Rotation is paralell to the X Axis
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_B">
            <summary>
            B Axis
            <remarks>
            Rotary Axis
            <para>
            Rotation is paralell to the Y Axis
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.CANON_AXIS.CANON_AXIS_C">
            <summary>
            C Axis
            <remarks>
            Rotary Axis
            <para>
            Rotation is paralell to the Z Axis
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.RETRACT_MODE">
            <summary>
            Retract Mode
            
            <remarks>
            Used for canned cycles
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.RETRACT_MODE.R_PLANE">
            <summary>
            R Plane
            
            <remarks>
            Uses a supplied R value for retracting
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.RETRACT_MODE.OLD_Z">
            <summary>
            Previous Z
            
            <remarks>
            Uses the previous Z value for retracting
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.DISTANCE_MODE">
            <summary>
            Distance Mode
            
            <remarks>
            Defines how coordinates are interpreted
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.DISTANCE_MODE.MODE_ABSOLUTE">
            <summary>
            Absolute
            
            <remarks>
            Coordinate values are absolute to the machine datum
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.DISTANCE_MODE.MODE_INCREMENTAL">
            <summary>
            Incremental
            
            <remarks>
            Coordinate values are deltas from previous positions
            </remarks>
            </summary>
        </member>
        <member name="T:KMotion_dotNet.IO_TYPE">
            <summary>
            IO Types
            
            <remarks>
            Defines the direction of IO
            <para>
            Currently only digital inputs and digital outputs are supported
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.IO_TYPE.UNDEFINED">
            <summary>
            Undefined
            <remarks>
            Default value of uninitialized IO
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.IO_TYPE.DIGITAL_IN">
            <summary>
            Digital Input
            </summary>
        </member>
        <member name="F:KMotion_dotNet.IO_TYPE.DIGITAL_OUT">
            <summary>
            Digital Output
            </summary>
        </member>
        <member name="F:KMotion_dotNet.IO_TYPE.ANALOG_IN">
            <summary>
            Analog Input
            </summary>
        </member>
        <member name="F:KMotion_dotNet.IO_TYPE.ANALOG_OUT">
            <summary>
            Analog Output
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KMOTION_TOKEN">
            <summary>
            KMotionLocked Return Codes
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_TOKEN.KMOTION_LOCKED">
            <summary>
            (token is locked) if KMotion is available for use
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_TOKEN.KMOTION_IN_USE">
            <summary>
            if already in use
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_TOKEN.KMOTION_NOT_CONNECTED">
            <summary>
            if no board connected
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KMOTION_CHECK_READY">
            <summary>
            KMotion CheckReady  Return Codes
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_CHECK_READY.OK">
            <summary>
            All OK but ready not received
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_CHECK_READY.TIMEOUT">
            <summary>
            if timed out waiting to receive Ready
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_CHECK_READY.READY">
            <summary>
            Ready has been successfully received
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KMOTION_CHECK_READY.ERROR">
            <summary>
            if no board connected or other error
            </summary>
        </member>
        <member name="T:KMotion_dotNet.MCODE_TYPE">
            <summary>
            Possible M Code Action Types 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_None">
            <summary>
            do nothing 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Setbit">
            <summary>
            Set a bit high or low
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_SetTwoBits">
            <summary>
            Set two bits either high or low
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_DAC">
            <summary>
            output a value to a DAC
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Program">
            <summary>
            run a KMotion User C program
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Program_wait">
            <summary>
            run a KMotion User C program wait til finished
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Program_wait_sync">
            <summary>
            run a KMotion User C program wait til finished, resync positions
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Program_PC">
            <summary>
            run a Windows program wait til finished
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Callback">
            <summary>
            Callback to the User Application
            </summary>
        </member>
        <member name="F:KMotion_dotNet.MCODE_TYPE.M_Action_Waitbit">
            <summary>
            Wait/Hold until a bit is high or low
            </summary>
        </member>
        <member name="T:KMotion_dotNet.PREV_STOP_TYPE">
            <summary>
            Possible Previously Stopping Types after an Interpreter Halt 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.PREV_STOP_TYPE.Prev_Stopped_None">
            <summary>
            Was not stopped or should attempt to resume 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.PREV_STOP_TYPE.Prev_Stopped_Indep">
            <summary>
            Was Halted while doing an indpendent motion (Rapid)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.PREV_STOP_TYPE.Prev_Stopped_Coord">
            <summary>
            Was Halted while doing a coordinated motion
            </summary>
        </member>
        <member name="F:KMotion_dotNet.PREV_STOP_TYPE.Prev_Stopped_Coord_Finished">
            <summary>
            Was Halted while doing a coordinated motion - but completely finished the motion
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_Controller">
            <summary>
            This is the primary object for interfacing with a Dynomotion product in code
            
            You can think of this object as representing the board and an access point for features of the hardware
            
            There should only be one KM_Controller object per board, per application domain at any given time
            
            To set project to update the GAC: "$(FrameworkSdkDir)\bin\gacutil.exe" /i "$(TargetPath)" /f
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._InstanceHandle">
            <summary>
            KMotion_DLL class instance pointer
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._ErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._BoardID">
            <summary>
            Board USB ID
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._BoardNumber">
            <summary>
            Board number (for use in multiple board scenarios)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._BoardType">
            <summary>
            Dynomotion board device type
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._MessageLog">
            <summary>
            Contains all messages until cleared
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._ErrorLog">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller.KMCallBackhandler">
            <summary>
            Internal callback handler for the c++ interop KMotion.DLL class
            
            <remarks>
            <para>
            This delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller.KMErrorHandler">
            <summary>
            Internal error message pump for the c++ interop KMotion.DLL class
            
            <remarks>
            <para>
            This delegate for the callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </para>
            </remarks>
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Controller.MessageReceived">
            <summary>
            All general messages are pumped out from the internal callback handler thru this event
            </summary>
        </member>
        <member name="E:KMotion_dotNet.KM_Controller.ErrorReceived">
            <summary>
            Error Messages are routed through this event
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._CoordMotion">
            <summary>
            Coordinated Motion Component
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._LockStatusOnUpdate">
            <summary>
            Flags whether to obtain a lock token while gathering the status data
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._StatusUpdateInterval">
            <summary>
            Maximum time in ms between refreshing the status
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_Controller._CurrentStatus">
            <summary>
            Locally maintained Main_Status struct
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.InstanceHandle">
            <summary>
            KMotion_DLL class instance pointer
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.MaxErrorLength">
            <summary>
            Maximum allowed return error string length
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.ThrowExceptions">
            <summary>
            If this flag is true, exceptions will be generated from the ErrorMsg handler
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.BoardID">
            <summary>
            Board USB ID
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.BoardNumber">
            <summary>
            Board number (for use in multiple board scenarios)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.BoardType">
            <summary>
            Dynomotion board device type
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.Loaded">
            <summary>
            Flag to determine that this object has been properly initialized
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.MessageLog">
            <summary>
            Contains all messages until cleared
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.ErrorLog">
            <summary>
            Contains all error messages until cleared
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.CoordMotion">
            <summary>
            Coordinated Motion Component
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.LockStatusOnUpdate">
            <summary>
            Flags whether to obtain a lock token while gathering the status data
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.StatusUpdateInterval">
            <summary>
            Maximum time in ms between refreshing the status
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_Controller.CurrentStatus">
            <summary>
            Locally maintained Main_Status struct
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.#ctor(System.Boolean)">
            <summary>
            Default constructor for the KM_Controller object
            
            Use this for single board applications
            </summary>
            <param name="DoNotObtainConsoleMessages">Set true
            if Console Messages should not be handled by this App
            Defaults to false.</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.#ctor(System.Int32,System.Boolean)">
            <summary>
            Multiple board constructor for attaching this object to a specific board address
            </summary>
            <param name="boardnumber">device ID 
            0=any KFLOP/Kogna found
            less than or equal to 0x00FFFFFF assume USB Location ID
            greater than or equal to 0xFF00XXXX Kogna with Serial Number XXXX
            Otherwise assume Static IP Address ie.
            0xC0A80A64 -> 192.168.10.100</param>
            <param name="DoNotObtainConsoleMessages">Set true
            if Console Messages should not be handled by this App
            Defaults to false.</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.WriteLineReadLine(System.String)">
            <summary>
            Sends a console command to the board and waits for the return value
            </summary>
            <param name="command">script command to send</param>
            <returns>return value (if any)</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.WriteLine(System.String)">
            <summary>
            Sends a console command to the board
            </summary>
            <param name="command">script command to send</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.WriteLineWithEcho(System.String)">
            <summary>
            Sends a console command to the board while echoing commands back to the callback handler
            </summary>
            <param name="command">script command to send</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ReadLineTimeout(System.String@,System.Int32)">
            <summary>
            Block the calling thread while waiting for the response to complete within a specified timeout
            </summary>
            <param name="message">return message value</param>
            <param name="timeout_ms">time in ms to wait for message return to complete</param>
            <returns>true is completed within the timeout</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ServiceConsole">
            <summary>
            Flushes the console buffer
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetCommandValue``1(System.String,System.Boolean)">
            <summary>
            Returns the value of a WriteLineReadLine(), converted to the requested type
            </summary>
            <typeparam name="T">System.Type to convert return value to</typeparam>
            <param name="command">Console script statement</param>
            <param name="throwexception">flag determine whether or not to throw an exception</param>
            <returns>the returned string value of the command converted to the requested type</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.WaitToken(System.Int32)">
            <summary>
            Prevents outside access to the board until ReleaseToken is commanded
            </summary>
            <param name="timeout">ms to wait</param>
            <returns>true if lock was successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.KMotionLock">
            <summary>
            Prevents outside access to the board
            This function is similar to the WaitToken function, except that it returns immediately (instead of waiting) if the board is already locked
            </summary>
            <returns>
            KMOTION_LOCKED=0,        // (and token is locked) if KMotion is available for use
            KMOTION_IN_USE=1,        // if already in use
            KMOTION_NOT_CONNECTED=2, // if error or not able to connect
            </returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.RecoverKMotionLock">
            <summary>
            Recovers controller from a motion lock state
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ReleaseToken">
            <summary>
            Allow normal access to the board
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.CheckConnected(System.Action[])">
            <summary>
            Tries to obtain a lock, and if a lock is obtained can execute optional actions before releasing the lock token.
            </summary>
            <param name="actions">delegates to execute while the board is locked</param>
            <returns>true if the lock status was not KMOTION_TOKEN.KMOTION_NOT_CONNECTED</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetBoards(System.Int32@)">
            <summary>
            Get Boards checks the list of connected board locations and returns the total board count
            </summary>
            <param name="numberofboards">returned total board count</param>
            <returns>array of USB locations for all boards</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetUSBLocation">
            <summary>
            USB tree node location
            </summary>
            <returns>USB location address</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.SetFailed">
            <summary>
            Places the controller in a failed state, prevents further commands from processing
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.Disconnect">
            <summary>
            Disconnect the application from the board
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.CheckIsReady">
             <summary>
             Call this to check if a "Ready" response came back
             after a command was manually typed in and we don't
             know what the response will be if any
             
             Note:There is a possibility that other DSP threads are
             printing to the console screen
            
             First check if any input is available
             if not, return instantly (KMOTION_OK)
             if so, then a whole line might not be available
             but should be in transmission and be in very soon,
             so wait up to a short while to get in an entire line
             if the line doesn't come in for some reason return (KMOTION_TIMEOUT)
             check if the line should go to the console (esc)
             if so print it and repeat the above as long as 
             there is still input available
             if the line is not console data, check for "Ready",
             if it is "Ready" send it to the console and return KMOTION_READY;
             otherwise send it to the console        /// </summary>
             <returns>true if board has received "Ready"</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetFirmwareVersion">
            <summary>
            Query device for the loaded firmware version
            </summary>
            <returns>Firmware version</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.CheckCoffSize(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Determines and returns the section sizes of various sections in a KFLOP coff (common object file format) file
            </summary>
            <param name="name">file name of KFLOP coff</param>
            <param name="size_text">variable to return the text (code) size in bytes</param>
            <param name="size_bss">variable to return the bss (global variables) size in bytes</param>
            <param name="size_data">variable to return the data (global constants) size in bytes</param>
            <param name="size_total">variable to return the total size of all 3 sections in bytes</param>
            <returns>integer 0 if sucessful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetBoardType">
            <summary>
            Gets the board type
            BOARD_TYPE.KFLOP = 2 = KFlop  8 Axes Controller
            BOARD_TYPE.KOGNA = 3 = Kogna 16 Axis Controller
            </summary>
            <returns>Board Type we are talking to</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetStatus(System.Boolean)">
            <summary>
            Generates and returns an updated copy of the MAIN_STATUS structure
            </summary>
            <param name="locked">flag to determine whether to place a lock on the card while generating the MAIN_STATUS data</param>
            <returns>KM_MainStatus, which is member compatible with the unmanaged MAIN_STATUS struct</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ThreadExecuting(System.Int32)">
            <summary>
            Checks whether a User Program Thread is currently executing.  
            </summary>
            <param name="thread">Which User Thread 1-7 to check</param>
            <returns>Returns true if executing, false if not executing</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.WaitForThreadComplete(System.Int32,System.Int32)">
            <summary>
            Waits for a User Program Thread to finish executing.  
            </summary>
            <param name="thread">Which User Thread 1-7 to check</param>
            <param name="timeout">time to wait in milliseconds</param>
            <returns>Returns true if successful, false if timed out</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.LoadCoff(System.Int32,System.String)">
            <summary>
            Load a compiled C program into the board
            </summary>
            <param name="thread">thread address to load into(must match the thread the C program was compiled to)</param>
            <param name="programname">file name of the C program</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.LoadCoff(System.Int32,System.String,System.Int32)">
            <summary>
            Load a compiled C program into the board (with PackToFlash arg)
            </summary>
            <param name="thread">thread address to load into(must match the thread the C program was compiled to)</param>
            <param name="programname">file name of the C program</param>
            <param name="PackToFlash">flag for packing in special format for bootup firmware</param>
            <returns>Returns 0 if successful</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.CompileAndLoadCoff(System.Int32,System.String,System.Boolean)">
            <summary>
            Compiles a source file and loads it into the board
            </summary>
            <param name="thread">thread address to load into</param>
            <param name="programname">file name of the C program</param>
            <param name="bypasserror">determines whether to collect any error returns</param>
            <returns>return message from the C program's execution, including any errors</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.Compile(System.Int32,System.String)">
            <summary>
            Compiles a source file
            </summary>
            <param name="thread">thread address to load into</param>
            <param name="programname">file name of the C program</param>
            <returns>program output</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ExecuteProgram(System.Int32)">
            <summary>
            Executes a previously loaded program
            </summary>
            <param name="thread">program thread in the kflop to run</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ExecuteProgram(System.Int32,System.String,System.Boolean)">
            <summary>
            Loads and executes a program from file
            </summary>
            <param name="thread">program thread in the kflop to run</param>
            <param name="programname">complete path to th .c file to execute</param>
            <param name="bypasserror">determines whether to collect any error returns</param>
            <returns>compile data</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.KillProgramThreads(System.Int32[])">
            <summary>
            Halts the execution of each supplied thread
            </summary>
            <param name="threads">threads to kill</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.Feedhold">
            <summary>
            Initiates Feedhold (Performs Console Command StopImmediate0)
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ResumeFeedhold">
            <summary>
            Resumes Feedhold (Performs Console Command StopImmediate1)
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ClearFeedhold">
            <summary>
            Clears Feedhold without Resuming(Performs Console Command StopImmediate2)
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.SetUserData(System.Int32,System.Int32)">
            <summary>
            Sets a 32 bit word of integer user data
            </summary>
            <param name="index">array offset (0-199)</param>
            <param name="data">32bits of data to store</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.SetUserDataFloat(System.Int32,System.Single)">
            <summary>
            Sets a 32 bit word with a 32-bit float of user data
            
            To get the value in KFLOP in C do:
            float f = *(float *)&amp;persist.UserData[index];
            </summary>
            <param name="index">array offset (0-199)</param>
            <param name="fdata">32bits float data to store</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.SetUserDataDouble(System.Int32,System.Double)">
            <summary>
            Sets a pair of two 32 bit words with a 64-bit double of user data
            
            To get the value in KFLOP in C do:
            double f = *(double *)&amp;persist.UserData[index*2];
            </summary>
            <param name="index">array offset (0-99) even pair of 32-bit regs</param>
            <param name="ddata">64bit double data to store</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetUserData(System.Int32)">
            <summary>
            Gets a 32 bit word of user data
            </summary>
            <param name="index">array offset (0-199)</param>
            <returns>Int32 data from the array</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetUserDataFloat(System.Int32)">
             <summary>
             Gets a 32 bit float word of user data
            
             To set float value in KFLOP in C do:
              *(float *)&amp;persist.UserData[index] = f;
             </summary>
             <param name="index">array offset (0-199)</param>
             <returns>float data from the array</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetUserDataDouble(System.Int32)">
             <summary>
             Gets a 64 bit double from a KFLOP user data pair of 32 bit vars
            
             To set double value in KFLOP in C do:
              *(double *)&amp;persist.UserData[index*2] = d;
             </summary>
             <param name="index">array offset (0-99)</param>
             <returns>double data from the array</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ResetUserData">
            <summary>
            Sets all words of user data to 0
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.SetCallbackHandler">
            <summary>
            Sets the internal c++ interop callback handler
            Separate delegate for this callback prevents the Garbage Collector from releasing the 
            unmanaged function pointer from being destroyed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.OnKMCallback(System.String)">
            <summary>
            Used to accept messages back from KM device
            </summary>
            <param name="message">message from KM device</param>
            <returns>0 with no errors</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.OnMessage(System.String)">
            <summary>
            Routes messages to event subscribers
            </summary>
            <param name="message">message receieved</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.OnError(System.String)">
            <summary>
            Routes error messages to event subscribers
            </summary>
            <param name="error">error receieved</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.HasMessages">
            <summary>
            Checks if any messages are in qeue
            </summary>
            <returns>true if Message log ! = ""</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.HasErrors">
            <summary>
            Checks if any error messages are in qeue
            </summary>
            <returns>true if Error log ! = ""</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ClearMessages">
            <summary>
            Clears the Message log
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.ClearError">
            <summary>
            Clears the Error log
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GenerateException(System.String)">
            <summary>
            Routes Error callback messages and generates specific exceptions based on the source
            </summary>
            <param name="message">string message from ErrorMsg callback</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.Dispose">
            <summary>
            Releases object resources
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.MarshalPre(System.String@)">
            <summary>
            formats a message begining for callback
            </summary>
            <param name="s">message</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.MarshalPost(System.String@)">
            <summary>
            formats a message end for callback
            </summary>
            <param name="s">message</param>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.UpdateBoardID">
            <summary>
            Assigns the board ID
            
            This is called when the BoardID property is changed
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetIO(System.Int32,KMotion_dotNet.IO_TYPE,System.String)">
            <summary>
            Creates a new KM_IO bit
            </summary>
            <param name="bit">nit index</param>
            <param name="type">IO type for bit</param>
            <param name="name">Name of bit</param>
            <returns>Created KM_IO</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetAxis(System.Int32,System.String)">
            <summary>
            Creates a KM_Axis object
            </summary>
            <param name="channel">KFLOP Axis Channel</param>
            <param name="name">descriptive name</param>
            <returns>Created Axis</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_Controller.GetAxisGroup(System.Int32,System.String,KMotion_dotNet.KM_Axis[])">
            <summary>
            Creates a KM_AxisGroup
            </summary>
            <param name="id">integer id</param>
            <param name="name">descriptive name</param>
            <param name="axislist">List of KM_Axis to place in the group</param>
            <returns>Created KM_AxisGroup</returns>
        </member>
        <member name="T:KMotion_dotNet.KMConsoleHandler">
            <summary>
            Callback delegate for KM_Controller returns
            </summary>
            <param name="message">message from KM_Controller function</param>
            <returns></returns>
        </member>
        <member name="T:KMotion_dotNet.KMErrorHandler">
            <summary>
            callback for low level KMotion error messages
            </summary>
        </member>
        <member name="T:KMotion_dotNet.DMException">
            <summary>
            Exception class for handling specific DynoMotion.net exceptions
            </summary>
        </member>
        <member name="F:KMotion_dotNet.DMException._Sender">
            <summary>
            Object where executoin of exception was encountered 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.DMException._InnerException">
            <summary>
            Actual exception thrown
            </summary>
        </member>
        <member name="F:KMotion_dotNet.DMException._Message">
            <summary>
            Additional information about exception
            </summary>
        </member>
        <member name="P:KMotion_dotNet.DMException.Sender">
            <summary>
            Object where execution of exception was encountered 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.DMException.InnerException">
            <summary>
            Actual exception thrown
            </summary>
        </member>
        <member name="P:KMotion_dotNet.DMException.Message">
            <summary>
            Additional information about exception
            </summary>
        </member>
        <member name="M:KMotion_dotNet.DMException.#ctor(System.Object,System.Exception,System.String)">
            <summary>
            Primary constructor for DM Exception
            </summary>
            <param name="sender">Current execution object on the stack</param>
            <param name="ex">original exception encountered</param>
            <param name="message">additional information</param>
        </member>
        <member name="T:KMotion_dotNet.DM_USB_Exception">
            <summary>
            Special Dynomotion USB Error Exception
            </summary>
        </member>
        <member name="M:KMotion_dotNet.DM_USB_Exception.#ctor(System.String)">
            <summary>
            Special Dynomotion USB Error Exception
            </summary>
            <param name="message">Exception description</param>
        </member>
        <member name="T:KMotion_dotNet.DM_Firmware_Exception">
            <summary>
            Special Dynomotion KmotionServer Error Exception
            </summary>
        </member>
        <member name="M:KMotion_dotNet.DM_Firmware_Exception.#ctor(System.String)">
            <summary>
            Special Dynomotion KmotionServer Error Exception
            </summary>
            <param name="message">Exception description</param>
        </member>
        <member name="T:KMotion_dotNet.DM_Compiler_Exception">
            <summary>
            Special Dynomotion Compiler Error Exception
            </summary>
        </member>
        <member name="M:KMotion_dotNet.DM_Compiler_Exception.#ctor(System.String)">
            <summary>
            Special Dynomotion Compiler Error Exception
            </summary>
            <param name="message">Exception description</param>
        </member>
        <member name="T:KMotion_dotNet.DM_Disconnected_Exception">
            <summary>
            Special Dynomotion Board Disconnected Exception
            </summary>
        </member>
        <member name="M:KMotion_dotNet.DM_Disconnected_Exception.#ctor(System.String)">
            <summary>
            Special Dynomotion Board Disconnected Exception
            </summary>
            <param name="message">Exception description</param>
        </member>
        <member name="T:KMotion_dotNet.KM_IO">
            <summary>
            IO class for KM_Controller
            Use to control a single point(bit) of IO
            
            
            Currently supported IO:
            
            Digital Input,
            Digital Output
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_IO._Controller">
            <summary>
            KM_Controller Object for used for device access
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_IO._ID">
            <summary>
            Bit Number
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_IO._Name">
            <summary>
            Call Name
            Use to describe what the IO controls
            i.e.
            Start Button, Clamp Pneumatic, etc...
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_IO._IOType">
            <summary>
            Direction of IO
            
            Only
            Digital Input and Digital Output 
            Are currently supported
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_IO.ID">
            <summary>
            Bit Number
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_IO.Name">
            <summary>
            Call Name
            Use to describe what the IO controls
            i.e.
            Start Button, Clamp Pneumatic, etc...
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_IO.IOType">
            <summary>
            Direction of IO
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.#ctor(KMotion_dotNet.KM_Controller,System.Int32,System.String,KMotion_dotNet.IO_TYPE)">
            <summary>
            Primary Construtor for IO object
            </summary>
            <param name="controller">KM_Controller object to associate the I Owith</param>
            <param name="id">Bit Number</param>
            <param name="name">Call Name</param>
            <param name="iotype">Sets the IO direction</param>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.GetDigitalValue">
            <summary>
            Gets the current status of a point of IO
            </summary>
            <returns>Current digital value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.SetDigitalValue(System.Boolean)">
            <summary>
            Sets the value if the IOType is Digital output
            Otherwise will throw an exception
            </summary>
            <param name="value">new value for IO point</param>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.GetAnalogValue">
            <summary>
            Reads the digital expression of an analog value
            </summary>
            <returns>-2048...2047</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.SetAnalogValue(System.Int32)">
            <summary>
            Sets the output level of an analog output
            </summary>
            <param name="value">-2048...2047</param>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.UpdateIOType">
            <summary>
            Uptdates the IO direction
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_IO.Toggle">
            <summary>
            Toggle a Digital Output Bit
            </summary>
        </member>
        <member name="T:KMotion_dotNet.StatusConsts">
            <summary>
            Defines form PC-DSP.h defining number of available devices
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_PC_COMM_PERSIST">
            <summary>
            Number of Persist variable included in Status Upload
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_DACS">
            <summary>
            Number of Kanalog DACs
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ADCS">
            <summary>
            Number of Kanalog ADCs
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_PWMS">
            <summary>
            Number 8-bit PWMS on IO Pins
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ENCS">
            <summary>
            Number Encoder Inputs on KFLOP 0 - 7
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ENCS_KOGNA">
            <summary>
            Number Encoder Inputs on Kogna 0 - 19
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_DACS_KOGNA">
            <summary>
            Number DACs on Kogna
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ADCS_KOGNA">
            <summary>
            Number ADCs on KOGNA
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ADCS_SNAP">
            <summary>
            Number ADCs on SnapAmp per SnapAmpA
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_PWMS_SNAP">
            <summary>
            Number PWMs on SnapAmp per SnapAmpA
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_ENCS_SNAP">
            <summary>
            Number Encoder Inputs on SnapAmp 0 - 19
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_CHANNELS_KOGNA">
            <summary>
            Number Axis Channels available for Kogna 
            (KFLOP has only 8 fields for additional channels will be zero)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_IO_PWMS">
            <summary>
            Number 8-bit PWMs for Kogna/KFLOP
            </summary>
        </member>
        <member name="F:KMotion_dotNet.StatusConsts.N_KOGNA_HRPWM">
            <summary>
            Number 12-bit (High Resolution) HRPWMs for Kogna
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_MainStatusRaw">
            <summary>
            This structure matches exactly the binary form as the Kogna/KFLOP
            MAIN_STATUS Structure so it can be uploaded as a binary image.
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.VersionAndSize">
            <summary>
            Bulk status record packed version and size info 
            bits 16-23 = version, bits 0-15 = size in words
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.ADC">
            <summary>
            Bulk status record ADC values (8 Kanalog + 2 x 8 SnapAmp)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.DAC">
            <summary>
            Bulk status record DAC values (8 Kanalog)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.PWM">
            <summary>
            Bulk status record PWM values (8 obsolete PWMS + 2 x 4 SnapAmp)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Position">
            <summary>
            Bulk status record Axis Measured positions (Encoder or other sensing device)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Destination">
            <summary>
            Bulk status record Axis Commanded Destinations
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.OutputChan0">
            <summary>
            Bulk status record Axis First output channel specified
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.InputModes">
            <summary>
            Bulk status record feedback selected input modes 
            4 bits for each axis (not sure why only using 16 of 32 bits) 
            Axes 0-3
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.InputModes2">
            <summary>
            Bulk status record feedback selected input modes #2
            4 bits for each axis
            Axes 4-7
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.InputModes3">
            <summary>
            Bulk status record feedback selected input modes #3
            4 bits for each axis
            Axes 8-11
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.InputModes4">
            <summary>
            Bulk status record feedback selected input modes #4
            4 bits for each axis
            Axes 12-15
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.OutputModes">
            <summary>
            Bulk status record feedback selected output modes
            Axes 0-3
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.OutputModes2">
            <summary>
            Bulk status record feedback selected output modes #2
            Axes 4-7
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.OutputModes3">
            <summary>
            Bulk status record feedback selected output modes #3
            Axes 8-11
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.OutputModes4">
            <summary>
            Bulk status record feedback selected output modes #4
            Axes 11-15
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Enables">
            <summary>
            Bulk status record Current axis enables
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.AxisDone">
            <summary>
            Bulk status record Current axis completes
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.BitsDirection">
            <summary>
            Bulk status record Current KFLOP 64 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.BitsDirection200">
            <summary>
            Bulk status record Current Kogna IO Bit directions (inputs vs outputs)
            Kogna - 24 bits 200-223 of I/O direction 1 = output
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.BitsDirection280">
            <summary>
            Bulk status record Current Kogna IO Bit directions (inputs vs outputs)
            Kogna - 10 bits 280-289 of I/O direction 1 = output
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.BitsState">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit states
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.BitsState200">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit states
            Kogna - 90 bits 200-289 of state lsb=I/O bit200
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.PinMuxModes">
            <summary>
            Bulk status record 
            Kogna - 10 Pin function modes 2 bits per pin 4 HRPWM + 6 SPI
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Kogna_ADC">
            <summary>
            Bulk status record Kogna 4 ADCs
            format  12 bits data (signed extended to 16 bits)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Kogna_DAC">
            <summary>
            Bulk status record Kogna 8 DACSs
            format  12 bits data (signed extended to 16 bits)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Kogna_PWM_Prescale">
            <summary>
            Bulk status record Kogna 
            Prescale sets frequency of all 8 8-bit PWMs
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Kogna_PWM">
            <summary>
            Bulk status record Kogna 
            current pulse settings of all 8 8-bit IO PWMs
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.Kogna_PWM_Enables">
            <summary>
            Bulk status record Kogna 
            current PWM Enables to control Pin of all 8 8-bit IO PWMs
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.HRPWMPeriod01">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWMs Periods (common for HRPWM 0 and 1)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.HRPWMPeriod2">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWM Periods (for HRPWM 2)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.HRPWMPeriod3">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWM Periods (for HRPWM 3)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.HRPWM">
            <summary>
            Bulk status record Kogna 
            current Kogna Kogna 4 HRPWMs Pulse widths
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.SnapBitsDirection0">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.SnapBitsDirection1">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.SnapBitsState0">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit States
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.SnapBitsState1">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit States
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.KanalogBitsStateInputs">
            <summary>
            Bulk status record Current Kanalog Input Bit States
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.KanalogBitsStateOutputs">
            <summary>
            Bulk status record Current Kanalog Output Bit States
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.RunOnStartUp">
            <summary>
            Bulk status record Current Boot Thread Startup Enables 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.ThreadActive">
            <summary>
            Bulk status record Current Thread Execution State 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.StopImmediateState">
            <summary>
            Bulk status record current StopImmediate (feedhold) state 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.TimeStamp">
            <summary>
            Bulk status record Time Stamp in seconds of when status was acquired 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.PC_comm">
            <summary>
            Bulk status record KFLOP-PC 8 Communication variables 100-107
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.VirtualBits">
            <summary>
            Bulk status record Virtual bits packed 16 per word 48-63
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatusRaw.VirtualBitsEx0">
            <summary>
            Bulk status record Extended Virtual bits packed 32 per word
            1024-1055
            </summary>
        </member>
        <member name="T:KMotion_dotNet.KM_MainStatus">
            <summary>
            Bulk status record uploaded from KFLOP
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatus.MainStatus">
            <summary>        
            This structure matches exactly the binary form as the Kogna/KFLOP
            MAIN_STATUS Structure so it can be uploaded as a binary image.
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_MainStatus._TicksAtUpdate">
            <summary>
            Time in milliseconds since Windows Started where
            Status record was last uploaded
            Note: rolls over every 49 days
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.VersionAndSize">
            <summary>
            Bulk status record packed version and size info 
            bits 16-23 = version, bits 0-15 = size in words
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.ADC">
            <summary>
            Bulk status record ADC values (8 Kanalog + 2 x 8 SnapAmp)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.DAC">
            <summary>
            Bulk status record DAC values (8 Kanalog)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.PWM">
            <summary>
            Bulk status record PWM values (8 obsolete PWMS + 2 x 4 SnapAmp)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Position">
            <summary>
            Bulk status record Axis Measured positions (Encoder or other sensing device)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Destination">
            <summary>
            Bulk status record Axis Commanded Destinations
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.OutputChan0">
            <summary>
            Bulk status record Axis First output channel specified
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.InputModes">
            <summary>
            Bulk status record feedback selected input modes 
            Axes 0-3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.InputModes2">
            <summary>
            Bulk status record feedback selected input modes #2
            Axes 4-7
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.InputModes3">
            <summary>
            Bulk status record feedback selected input modes #3
            Axes 8-11
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.InputModes4">
            <summary>
            Bulk status record feedback selected input modes #4
            Axes 12-15
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.OutputModes">
            <summary>
            Bulk status record feedback selected output modes
            Axes 0-3
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.OutputModes2">
            <summary>
            Bulk status record feedback selected output modes #2
            Axes 4-7
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.OutputModes3">
            <summary>
            Bulk status record feedback selected output modes #3
            Axes 8-11
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.OutputModes4">
            <summary>
            Bulk status record feedback selected output modes #4
            Axes 11-15
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Enables">
            <summary>
            Bulk status record Current axis enables
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.AxisDone">
            <summary>
            Bulk status record Current axis completes
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.BitsDirection">
            <summary>
            Bulk status record Current KFLOP 64 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.BitsDirection200">
            <summary>
            Bulk status record Current Kogna IO Bit directions (inputs vs outputs)
            Kogna - 24 bits 200-223 of I/O direction 1 = output
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.BitsDirection280">
            <summary>
            Bulk status record Current Kogna IO Bit directions (inputs vs outputs)
            Kogna - 10 bits 280-289 of I/O direction 1 = output
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.BitsState">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit states
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.BitsState200">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit states
            Kogna - 90 bits 200-289 of state lsb=I/O bit200
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.PinMuxModes">
            <summary>
            Bulk status record 
            Kogna - 10 Pin function modes 2 bits per pin 4 HRPWM + 6 SPI
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Kogna_ADC">
            <summary>
            Bulk status record Kogna 4 ADCs
            format  12 bits data (signed extended to 16 bits)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Kogna_DAC">
            <summary>
            Bulk status record Kogna 8 DACSs
            format  12 bits data (signed extended to 16 bits)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Kogna_PWM_Prescale">
            <summary>
            Bulk status record Kogna 
            Prescale sets frequency of all 8 8-bit PWMs
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Kogna_PWM">
            <summary>
            Bulk status record Kogna 
            current pulse settings of all 8 8-bit IO PWMs
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.Kogna_PWM_Enables">
            <summary>
            Bulk status record Kogna 
            current PWM Enables to control Pin of all 8 8-bit IO PWMs
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.HRPWMPeriod01">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWMs Periods (common for HRPWM 0 and 1)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.HRPWMPeriod2">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWM Periods (for HRPWM 2)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.HRPWMPeriod3">
            <summary>
            Bulk status record Kogna 
            current Kogna HRPWM Periods (for HRPWM 3)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.HRPWM">
            <summary>
            Bulk status record Kogna 
            current Kogna Kogna 4 HRPWMs Pulse widths
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.SnapBitsDirection0">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.SnapBitsDirection1">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit directions (inputs vs outputs)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.SnapBitsState0">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit States
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.SnapBitsState1">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit States
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.KanalogBitsStateInputs">
            <summary>
            Bulk status record Current Kanalog Input Bit States
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.KanalogBitsStateOutputs">
            <summary>
            Bulk status record Current Kanalog Output Bit States
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.RunOnStartUp">
            <summary>
            Bulk status record Current Boot Thread Startup Enables 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.ThreadActive">
            <summary>
            Bulk status record Current Thread Execution State 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.StopImmediateState">
            <summary>
            Bulk status record current StopImmediate (feedhold) state 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.TimeStamp">
            <summary>
            Bulk status record Time Stamp in seconds of when status was acquired 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.PC_comm">
            <summary>
            Bulk status record KFLOP-PC 8 Communication variables 100-107
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.VirtualBits">
            <summary>
            Bulk status record Virtual bits packed 16 per word 48-63
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.VirtualBitsEx0">
            <summary>
            Bulk status record Extended Virtual bits packed 32 per word
            1024-1055
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_MainStatus.TicksAtUpdate">
            <summary>
            Bulk status record Windows Time when status was updates (millisec since Windows Started)
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetADC(System.Int32)">
            <summary>
            Bulk status record ADC values (Kanalog)
            </summary>
            <param name="index">channel number to get</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetDAC(System.Int32)">
            <summary>
            Bulk status record DAC values (Kanalog)
            </summary>
            <param name="index">channel number to get</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetPWM(System.Int32)">
            <summary>
            Bulk status record PWM values (SnapAmp)
            </summary>
            <param name="index">channel number to get (8 obsolete + 2 x 4 SnapAmp)</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetPosition(System.Int32)">
            <summary>
            Bulk status record Axis Measured positions (Encoder or other sensing device)
            </summary>
            <param name="index">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetDestination(System.Int32)">
            <summary>
            Bulk status record Axis Commanded Destinations
            </summary>
            <param name="index">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetOutputChannel0(System.Int32)">
            <summary>
            Bulk status record Axis First output channel specified
            </summary>
            <param name="index">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetInputMode(System.Int32)">
            <summary>
            Bulk status record feedback selected 4-bit input mode
            </summary>
            <param name="axischannel">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetOutputMode(System.Int32)">
            <summary>
            Bulk status record 4-bit output mode
            </summary>
            <param name="axischannel">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetAxisEnabled(System.Int32)">
            <summary>
            Bulk status record Current axis enables
            </summary>
            <param name="axischannel">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetAxisComplete(System.Int32)">
            <summary>
            Bulk status record Current axis completes
            </summary>
            <param name="axischannel">Axis Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKFlopBitDirection(System.Int32)">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit directions (inputs vs outputs)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value 0=input 1=output</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetBitDirection200(System.Int32)">
            <summary>
            Bulk status record Current Kogna 24 IO Bit directions for Bits 200-223(inputs vs outputs)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value 0=input 1=output</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetBitDirection280(System.Int32)">
            <summary>
            Bulk status record Current Kogna 10 IO Bit directions for Bits 280-289(inputs vs outputs)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value 0=input 1=output</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKFlopBitState(System.Int32)">
            <summary>
            Bulk status record Current KFLOP/Kogna 64 IO Bit states
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetBitState200(System.Int32)">
            <summary>
            Bulk status record Current Kogna 90 IO Bit states (Bits 200-289)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetPinMuxModes(System.Int32)">
            <summary>
            Bulk status record Current Kogna 10 Pin function modes 2 bits per pin 4 HRPWM + 6 SPI
            </summary>
            <param name="index">device selector 0-9 (0-3 HRPWM, 4-9 SPI)</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKognaADC(System.Int32)">
            <summary>
            Bulk status record Current Kogna ADC
            </summary>
            <param name="index">channel 0-3</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKognaDAC(System.Int32)">
            <summary>
            Bulk status record Current Kogna DAC
            </summary>
            <param name="index">channel 0-7</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKognaPWM(System.Int32)">
            <summary>
            Bulk status record Current Kogna 8-bit PWM pulse setting
            </summary>
            <param name="index">channel 0-7</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKognaPWMEnables(System.Int32)">
            <summary>
            Bulk status record Current Kogna 8-bit PWM Enables
            </summary>
            <param name="index">channel 0-7</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKognaHRPWM(System.Int32)">
            <summary>
            Bulk status record Current Kogna Hi-Res 12-bit PWM pulse setting
            </summary>
            <param name="index">channel 0-3</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetSnapBitsDirection0(System.Int32)">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit directions (inputs vs outputs)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetSnapBitsDirection1(System.Int32)">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit directions (inputs vs outputs)
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value 0=input 1=output</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetSnapBitsState0(System.Int32)">
            <summary>
            Bulk status record Current SnapAmp #0 IO Bit States
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetSnapBitsState1(System.Int32)">
            <summary>
            Bulk status record Current SnapAmp #1 IO Bit States
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKanalogBitsStateInputs(System.Int32)">
            <summary>
            Bulk status record Current Kanalog Input Bit States
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetKanalogBitsStateOutputs(System.Int32)">
            <summary>
            Bulk status record Current Kanalog Output Bit States
            </summary>
            <param name="index">IO Bit Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetRunOnStartUp(System.Int32)">
            <summary>
            Bulk status record Current Boot Thread Startup Enables 
            </summary>
            <param name="index">Thread Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetThreadActive(System.Int32)">
            <summary>
            Bulk status record Current Thread Execution State 
            </summary>
            <param name="index">Thread Number</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetPC_comm(System.Int32)">
            <summary>
            Bulk status record Current PC-KFLOP Comm regs 
            </summary>
            <param name="index">Comm Register Index</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetVirtualBits(System.Int32)">
            <summary>
            Bulk status record Current Virtual Bit States 
            </summary>
            <param name="index">Bit Offset</param>
            <returns>value</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_MainStatus.GetVirtualBitsEx0(System.Int32)">
            <summary>
            Bulk status record Current Extended Virtual Bit States 
            </summary>
            <param name="index">Bit Offset 0-31 where 0 returns Virtual bit 1024</param>
            <returns>value</returns>
        </member>
        <member name="T:KMotion_dotNet.KM_AxisGroup">
            <summary>
            KM_Controller Object for grouping Axis channels
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._Controller">
            <summary>
            KM_Controller Object for used for device access
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._ID">
            <summary>
            Axis Group Number
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._Name">
            <summary>
            Call Name
            Use to describe what the Axis Group controls
            i.e.
            Spindle 1 Carriage, Wrist, etc...
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._Velocity">
            <summary>
            Velocity to use during positioning
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._MaxVelocity">
            <summary>
            Maximum velocity to use during positioning and coordinated motion
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._Acceleration">
            <summary>
            Acceleration to use during positioning 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._AxisList">
            <summary>
            Axis objects that the group is comprised of
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._LookAhead">
            <summary>
            Trajectory Planner Plan/Look ahead in seconds
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._BreakAngle">
            <summary>
            Trajectory Planner Break Angle, larger angles require full stop
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._CollinearTolerance">
            <summary>
            Trajectory Planner Collinear tolerance at which in-line segments can be combined
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._CornerTolerance">
            <summary>
            Trajectory Planner Collinear tolerance at which in-line segments can be combined
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._FacetAngle">
            <summary>
            Trajectory Planner angles to be used when corner rounding
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._MaxLength">
            <summary>
            Trajectory Planner max allowed length for individual segments
            (long linear segments can cause cord errors in non-linear systems)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._UseOnlyLinearSegments">
            <summary>
            Axis Group Number
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._ArcsToSegs">
            <summary>
            Causes Arcs to be converted to segments (Kinematic Setting)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._DegreesA">
            <summary>
            Causes Arcs to be converted to segments (User Setting)
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._DegreesB">
            <summary>
            Axis A is in Degrees
            </summary>
        </member>
        <member name="F:KMotion_dotNet.KM_AxisGroup._DegreesC">
            <summary>
            Axis B is in Degrees
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.ID">
            <summary>
            Axis C is in Degrees
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.Name">
            <summary>
            Call Name
            Use to describe what the Axis Group controls
            i.e.
            Spindle 1 Carriage, Wrist, etc...
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.Velocity">
            <summary>
            Commanded velocity to use during positioning 
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.MaxVelocity">
            <summary>
            Maximum velocity to use during positioning and coordinated motion
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.Acceleration">
            <summary>
            Velocity to use during positioning
            Jogging uses its own velocity passed in
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.AxisList">
            <summary>
            Axis objects that the group is comprised of
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.LookAhead">
            <summary>
            Trajectory Planner Lookahead/buffer time
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.BreakAngle">
            <summary>
            Trajectory Planner Break Angle, larger angles require full stop
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.CollinearTolerance">
            <summary>
            Trajectory Planner Collinear tolerance at which in-line segments can be combined
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.CornerTolerance">
            <summary>
            Trajectory Planner Collinear tolerance at which in-line segments can be combined
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.FacetAngle">
            <summary>
            Trajectory Planner angles to be used when corner rounding
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.MaxLength">
            <summary>
            Trajectory Planner max allowed length for individual segments
            (long linear segments can cause cord errors in non-linear systems)
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.IsAborted">
            <summary>
            Coordinated Motion Abort State
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.IsHalted">
            <summary>
            Coordinated Motion Halt State
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.Simulate">
            <summary>
            Get/Set Coordinated Motion Simulation Mode
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.PreviousStopped">
            <summary>
            Get/Set Previous Stopped after Halt State
            </summary>
        </member>
        <member name="P:KMotion_dotNet.KM_AxisGroup.FeedRateOverride">
            <summary>
            Coordinated Motion Feed Rate Setting Multiplier
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.#ctor(KMotion_dotNet.KM_Controller,KMotion_dotNet.KM_Axis[])">
            <summary>
            Creates group of axes
            </summary>
            <param name="controller">KM_Controller to associate the group with</param>
            <param name="axislist">List of Axes</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.EnableGroup">
            <summary>
            Define, configure, and enable an axis group
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.DisableGroup">
            <summary>
            Abort and disable an entire coordinated group
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.RapidTo(System.Double[])">
            <summary>
            Perform Rapid Move (independent motion) of multiple axis to a desired destination
            and wait until motion is completed
            </summary>
            <param name="position">XYZABC position to Rapid to</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.StartRapidTo(System.Double[])">
            <summary>
            Perform Start of Rapid Move (independent motion) of multiple axis to a desired destination
            </summary>
            <param name="position">XYZABC position to Rapid to</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.StartPath">
            <summary>
            Flush/clear coordinated motion buffer and wait for any rapids to complete
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.AddLine(System.Double[])">
            <summary>
            Add a linear motion to the coordinated motion buffer
            </summary>
            <param name="nextpoint">XYZABC point to feed to</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.AddArc(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Perform Coordinated Arc Move of multiple axis to a desired destination
            </summary>
            <param name="endx">X end point of arc</param>
            <param name="endy">Y end point of arc</param>
            <param name="centerx">X center of rotation of arc</param>
            <param name="centery">Y center of rotation of arc</param>
            <param name="clockwise">CW or ACW</param>
            <param name="finalz">End point of perpindicular axis(for helical motion)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.AddArc(System.Double,System.Double,System.Double,System.Double,KMotion_dotNet.CANON_PLANE,System.Boolean,System.Double)">
            <summary>
            Perform Coordinated Arc Move (in specified plane - replace xyz as appropriate) of multiple axis to a desired destination
            </summary>
            <param name="endx">X end point of arc</param>
            <param name="endy">Y end point of arc</param>
            <param name="centerx">X center of rotation of arc</param>
            <param name="centery">Y center of rotation of arc</param>
            <param name="plane">CANON_PLANE of arc</param>
            <param name="clockwise">CW or ACW</param>
            <param name="finalz">End point of perpindicular axis(for helical motion)</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.AddArc(System.Double,System.Double,System.Double,System.Double,KMotion_dotNet.CANON_PLANE,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Perform Coordinated Arc Move (in specified plane) of multiple axis to a desired destination
            with aditional a,b,c, axes linearly interpolated
            </summary>
            <param name="endx">X end point of arc</param>
            <param name="endy">Y end point of arc</param>
            <param name="centerx">X center of rotation of arc</param>
            <param name="centery">Y center of rotation of arc</param>
            <param name="plane">CANON_PLANE of arc</param>
            <param name="clockwise">CW or ACW</param>
            <param name="finalz">End point of perpindicular axis(for helical motion)</param>
            <param name="a">a Axis final position</param>
            <param name="b">b Axis final position</param>
            <param name="c">c Axis final position</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.AddCommand(System.Int32)">
            <summary>
            Insert special embedded IO commaand into the Coordinated moition buffer
            </summary>
            <param name="command">index of command to be added</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.CompletePath">
            <summary>
            Finalize any motion that resides in the coordinated motion buffer
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.Halt">
            <summary>
            Halt any Coordinated Motion
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.ClearHalt">
            <summary>
            Clear any Coordinated Motion Halt condition
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.Abort">
            <summary>
            Abort any Coordinated Motion
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.ClearAbort">
            <summary>
            Clear any Coordinated Motion Abort condition
            </summary>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.MotionComplete">
            <summary>
            Checks if the commanded axis group motion is completed
            </summary>
            <returns>true if the axis is idle</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.WaitforMotionComplete(System.Int32)">
            <summary>
            Blocks the calling thread until the axis group is in position
            within a specified time limit
            </summary>
            <param name="timeout">time in ms to wait for axis group to acheive position, 0 will wait indefinitely</param>
            <returns>true if completed</returns>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.RunGcodeFile(System.String)">
            <summary>
            Launch GCode Interpreter executing specified GCode file
            </summary>
            <param name="file">Gcode File Path</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.RunGcodeFileSegment(System.String,System.Int32,System.Int32)">
            <summary>
            Launch GCode Interpreter executing specified GCode file
            </summary>
            <param name="file">Gcode File Path</param>
            <param name="firstline">Gcode line number to start</param>
            <param name="lastline">Gcode line number to stop</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.SetToolFile(System.String)">
            <summary>
            Set Tool File name to be used by the GCode Interpreter
            </summary>
            <param name="toolFile">Tool File Path String</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.SetParamsFile(System.String)">
            <summary>
            Set Params File name to be used by the GCode Interpreter
            </summary>
            <param name="paramsfile">Params File Path String</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.SetToolTableEntry(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set Tool Table Entry to be used by the GCode Interpreter
            </summary>
            <param name="index">Tool Table Index Number</param>
            <param name="slot">Tool changer 2 digit slot Number</param>
            <param name="ID">Tool 4 digit ID Number</param>
            <param name="length">Tool length offset</param>
            <param name="diameter">Tool diameter used in radius compensation</param>
            <param name="xoffset">Tool X Offset</param>
            <param name="yoffset">Tool Y Offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.SetOffsetData(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set Work Fixture Offset to be used by the GCode Interpreter
            </summary>
            <param name="num">Fixture Number</param>
            <param name="x">x offset</param>
            <param name="y">y offset</param>
            <param name="z">z offset</param>
            <param name="a">a offset</param>
            <param name="b">b offset</param>
            <param name="c">c offset</param>
        </member>
        <member name="M:KMotion_dotNet.KM_AxisGroup.SetMCodeAction(System.Int32,KMotion_dotNet.MCODE_TYPE,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Specifies a specific M Code action to be performed for a encountered
            MCodeSet. Parameters and data are specific to the action type
            </summary>
            <param name="num">MCode Mapping Number</param>
            <param name="type">type of action to be performed</param>
            <param name="p1">parameter #1</param>
            <param name="p2">parameter #3</param>
            <param name="p3">parameter #3</param>
            <param name="p4">parameter #4</param>
            <param name="p5">parameter #5</param>
            <param name="data">string parameter - typically a file name</param>
        </member>
        <member name="T:KMotion_dotNet.HOMING_ROUTINE_SOURCE_TYPE">
            <summary>
            Method to be used for creating a home sequence
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_ROUTINE_SOURCE_TYPE.FROM_FILE">
            <summary>
            Runs homing sequence from a pre-existing file
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_ROUTINE_SOURCE_TYPE.FROM_STRING">
            <summary>
            Creates a file from the Homing_c_Program contents
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_ROUTINE_SOURCE_TYPE.FROM_THREAD">
            <summary>
            Simply executes a thread
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_ROUTINE_SOURCE_TYPE.AUTO">
            <summary>
            Generates a .c file based on the Homing Params
            </summary>
        </member>
        <member name="T:KMotion_dotNet.HOMING_DIRECTION">
            <summary>
            direction factor for homing
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_DIRECTION.POSITIVE">
            <summary>
            move in positive(rising) direction
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_DIRECTION.NEGATIVE">
            <summary>
            move in negative(falling) direction
            </summary>
        </member>
        <member name="T:KMotion_dotNet.HOMING_TYPE">
            <summary>
            enum for homing types
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_TYPE.HOME_TO_LIMIT_THEN_ROLL_OFF">
            <summary>
            Simply home to switch and roll back off
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_TYPE.HOME_TO_LIMIT_THEN_MOVE_TO_POSITION">
            <summary>
            Perform the roll  off sensor and then move to a set position
            </summary>
        </member>
        <member name="T:KMotion_dotNet.HOMING_STATE">
            <summary>
            enum for homing state
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.NOT_HOMED">
            <summary>
            initial state
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.ON_SENSOR">
            <summary>
            indicates the sensor bit has been set to the requested state 
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.MOVING_TO_SENSOR">
            <summary>
            axis is moving towards the sensor bit
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.MOVING_FROM_SENSOR">
            <summary>
            axis is moving away from the sensor bit
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.MOVING_TO_FINAL">
            <summary>
            axis is moving to the final position
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.COMPLETE">
            <summary>
            homing sequence has been completed
            </summary>
        </member>
        <member name="F:KMotion_dotNet.HOMING_STATE.ERROR">
            <summary>
            an error occured during the homing routine
            </summary>
        </member>
    </members>
</doc>
