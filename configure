#!/bin/sh

# default parameters
kmxhome="$HOME/.kmotionx"
prefix=""
execprefix=""
bindir=""
libdir=""
kmxdir=""
includedir=""
mandir=""
infodir=""
mingw32="no"
use_libftdi="yes"
use_ftd2xx="no"
build_java_binding="no"
simulate_load_coff="no"
cc="gcc"
libsuf=""
exesuf=""
LD_LIB_PATH="/usr/local/lib"
LD_LIBS="stdc++ m"
TMPN="./conftest-$$"
TMPH=$TMPN.h
KMX_VERSION=5.3.2
cpu=`uname -m`
arch=$cpu
# OS specific
targetos=`uname -s`
case $targetos in
  MINGW32*)  mingw32=yes;;
  *) ;;
esac

case "$cpu" in
  i386|i486|i586|i686|i86pc|BePC|i686-AT386)
    cpu="x86"
  ;;
  x86_64)
    cpu="x86-64"
  ;;
  arm*)
    case "$cpu" in
      arm|armv4l)
        cpuver=4
      ;;
      armv5tel|armv5tejl)
        cpuver=5
      ;;
      armv6j|armv6l)
        cpuver=6
      ;;
      armv7a|armv7l)
        cpuver=7
      ;;
    esac
    cpu="armv4l"
  ;;
  alpha)
    cpu="alpha"
  ;;
  "Power Macintosh"|ppc|ppc64)
    cpu="powerpc"
  ;;
  mips)
    cpu="mips"
  ;;
  s390)
    cpu="s390"
  ;;
  *)
    cpu="unknown"
  ;;
esac

for opt do
  eval opt=\"$opt\"
  case "$opt" in
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --exec-prefix=*) execprefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --kmx-home=*) kmxhome=`echo $opt | cut -d '=' -f 2`
  ;;
  --kmxdir=*) kmxdir=`echo $opt | cut -d '=' -f 2`
  ;;
  --bindir=*) bindir=`echo $opt | cut -d '=' -f 2`
  ;;
  --libdir=*) libdir=`echo $opt | cut -d '=' -f 2`
  ;;
  --includedir=*) includedir=`echo $opt | cut -d '=' -f 2`
  ;;
  --sharedir=*) sharedir=`echo $opt | cut -d '=' -f 2`
  ;;
  --mandir=*) mandir=`echo $opt | cut -d '=' -f 2`
  ;;
  --infodir=*) infodir=`echo $opt | cut -d '=' -f 2`
  ;;
  --docdir=*) docdir=`echo $opt | cut -d '=' -f 2`
  ;;  
  --cc=*) cc=`echo $opt | cut -d '=' -f 2`
  ;;
  --ftd2xx) 
		use_libftdi="no"
		use_ftd2xx="yes"
  ;;
  --java-binding) build_java_binding="yes"
  ;;
  --coffload) simulate_load_coff="no"
  ;;
  --help|-h) show_help="yes"
  ;;
  *) echo "configure: WARNING: unrecognized option $opt"
  ;;
  esac
done

if test "$mingw32" = "yes" ; then
    if test x"$kmxdir" = x""; then
    kmxdir="KMotionX"
    fi
    if test -z "$prefix" ; then
    prefix="C:/Program Files/${kmxdir}"
    fi
    if test -z "$sharedir" ; then
    sharedir="${prefix}"
    fi
    execprefix="$prefix"
    bindir="${prefix}"
    kmxdir="${prefix}"
    libdir="${prefix}/lib"
    docdir="${sharedir}/doc"
    mandir="${sharedir}/man"
    infodir="${sharedir}/info"
    LIBSUF=".lib"
    EXESUF=".exe"
else
    if test -z "$prefix" ; then
    prefix="/usr/local"
    fi
    if test -z "$sharedir" ; then
    sharedir="${prefix}/share"
    fi
    if test x"$execprefix" = x""; then
    execprefix="${prefix}"
    fi
    if test x"$libdir" = x""; then
    libdir="${execprefix}/lib"
    fi
    if test x"$bindir" = x""; then
    bindir="${execprefix}/bin"
    fi
    if test x"$kmxdir" = x""; then
    kmxdir="kmx"
    fi
    if test x"$docdir" = x""; then
    docdir="${sharedir}/doc/${kmxdir}"
    fi
    if test x"$mandir" = x""; then
    mandir="${sharedir}/man"
    fi
    if test x"$infodir" = x""; then
    infodir="${sharedir}/info"
    fi
    kmxdir="${libdir}/${kmxdir}"
    #Configure library extension
    case $targetos in
      Linux)
        libsuf=".so"
      ;;
      Darwin)
        libsuf=".dylib"
      ;;
      *) ;;
    esac    
fi # mingw32

if test x"$includedir" = x""; then
includedir="${prefix}/include"
fi

if test x"$show_help" = "xyes" ; then
cat << EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]

Standard options:
  --help                   print this message
  --prefix=PREFIX          install in PREFIX [$prefix]
  --exec-prefix=EPREFIX    install architecture-dependent files in EPREFIX
                           [same as prefix]
  --kmx-home               KMotionX home dir defaults to ~/.kmotionx                            
  --bindir=DIR             user executables in DIR [EPREFIX/bin]
  --libdir=DIR             object code libraries in DIR [EPREFIX/lib]
  --kmxdir=DIR             installation directory [EPREFIX/lib/kmx]
  --includedir=DIR         C header files in DIR [PREFIX/include]
  --sharedir=DIR           documentation root DIR [PREFIX/share]
  --docdir=DIR             documentation in DIR [SHAREDIR/doc/kmx]
  --mandir=DIR             man documentation in DIR [SHAREDIR/man]
  --infodir=DIR            info documentation in DIR [SHAREDIR/info]
  --java-binding           Enables Java binding
Advanced options (experts only):
  --coffload               Enables coff loading (disabled by default due to non tested functionality)
  --ftd2xx                 Use ftd2xx driver instead of libftdi
  --cc=CC                  use C compiler CC [$cc]
EOF
#echo "NOTE: The object files are build at the place where configure is launched"
exit 1
fi

#If java binding is built we need to check for java home
if test x"$build_java_binding" = "xyes" ; then
case $targetos in
  Linux)
  	java_home=`readlink -f /usr/bin/javac | sed "s:bin/javac::" | sed "s:.$::"`
  ;;
  Darwin)
  	java_home=`/usr/libexec/java_home -v1.7`
  ;;
  *) ;;
esac
fi

#Configure os specific libraries
if test "$targetos" = "Linux" ; then
  LD_LIBS="$LD_LIBS rt"
fi

#Configure architechture and os flags
if test "$arch" = "armv6l" ; then
#	Raspberry Pi
  cc=gcc-4.8
	ARCH_C_FLAGS="-march=armv6 -mfpu=vfp -mfloat-abi=hard"
	ARCH_LD_FLAGS="-pthread"
elif test "$arch" = "armv7l" ; then
# Raspberry Pi 2
  cc=gcc-4.8
  ARCH_C_FLAGS="-march=armv7-a -mtune=cortex-a7 -mfpu=neon"
  ARCH_LD_FLAGS="-pthread"
elif test "$targetos" = "Linux" ; then
	ARCH_LD_FLAGS="-march=$arch -pthread"
elif test "$targetos" = "Darwin" ; then
	ARCH_LD_FLAGS="-arch $arch"
else
  echo "Unsupported platform"
  exit 1
fi

#Configure library path (multiarch paths if applicable)
MULTIARCH_TRIPLET=`$cc --print-multiarch 2>/dev/null`
if test -n "$MULTIARCH_TRIPLET"; then
  LD_LIB_PATH="$LD_LIB_PATH /usr/lib/$MULTIARCH_TRIPLET /lib/$MULTIARCH_TRIPLET"
fi
#if test "$targetos" = "Darwin" ; then
 #LD_LIB_PATH="$LD_LIB_PATH /opt/local/lib"
#fi


checklib (){
	libpath=`echo $LD_LIB_PATH | sed 's/ / -L/g'`
	echo "Check in paths $libpath"
	haslib=`$cc -L$libpath -l$1 2>&1 > /dev/null | grep main -c` 
# -wc option does not longer work on mac anymore
#	haslib=`$cc -L$libpath -l$1 2>&1 > /dev/null | grep main -wc` 
	if test "$haslib" = "0" ; then
		echo "Checking library lib$1 not found"
		retval=0
	else
		echo "Checking library lib$1 found"
		retval=1
	fi
	return "$retval"
}

#Configure ftdi libraries
if test "$use_libftdi" = "yes" ; then
	checklib ftdi1
	if [ "$?" -eq 1 ] ; then
	     ftdi_lib="ftdi1"
       iflag_ftdi=$(libftdi1-config --cflags)
	else
    #TODO drop support for ftdi only ftdi1
		checklib ftdi
		if [ "$?" -eq 1 ] ; then
		     ftdi_lib="ftdi"
         iflag_ftdi=$(libftdi-config --cflags)
		fi
	fi
else
	checklib ftd2xx
	if [ "$?" -eq 1 ] ; then
	     ftdi_lib="ftd2xx"
	fi
fi


cat <<EOF
KMotionX Home         $kmxhome
Binary  directory     $bindir
KMotionX directory    $kmxdir
Library directory     $libdir
Include directory     $includedir
Manual directory      $mandir
Info directory        $infodir
Doc directory         $docdir
C compiler            $cc
Target OS        	    $targetos
CPU              	    $cpu
LD_LIB_PATH     	    $LD_LIB_PATH
MULTIARCH_TRIPLET  	  $MULTIARCH_TRIPLET
Lib suffix       	    $libsuf
Use libftdi      	    $use_libftdi
Use ftd2xx       	    $use_ftd2xx
FTDI driver      	    $ftdi_lib
Java binding     	    $build_java_binding
Simulate load coff	  $simulate_load_coff
Java Home        	    $java_home
EOF

echo "Creating config.mak and config.h"

cat >config.mak <<EOF
# Automatically generated by configure - do not modify
KMX_VERSION=$KMX_VERSION
kmxhome=$kmxhome
prefix=$prefix
bindir=\$(DESTDIR)$bindir
kmxdir=\$(DESTDIR)$kmxdir
libdir=\$(DESTDIR)$libdir
includedir=\$(DESTDIR)$includedir
mandir=\$(DESTDIR)$mandir
infodir=\$(DESTDIR)$infodir
docdir=\$(DESTDIR)$docdir
CC=$cc
GCC_MAJOR=$gcc_major
GCC_MINOR=$gcc_minor
OSNAME=$targetos
ARCH=$arch
CFLAGS=$ARCH_C_FLAGS
LDFLAGS=$ARCH_LD_FLAGS
LD_LIB_PATH=$LD_LIB_PATH
LD_LIBS=$LD_LIBS
LIBEXT=$libsuf
EXESUF=$exesuf
IFLAG_FTDI=$iflag_ftdi
EOF

print_inc() {
  if test -n "$2"; then
    echo "#ifndef $1" >> $TMPH
    echo "# define $1 \"$2\"" >> $TMPH
    echo "#endif" >> $TMPH
  fi
}
print_mak() {
  if test -n "$2"; then
    echo "NATIVE_DEFINES+=-D$1=\"\\\"$2\\\"\"" >> config.mak
  fi
}

echo "/* Automatically generated by configure - do not modify */" > $TMPH
#print_inc TEST "$test"
#print_mak TEST "$test"

if test "$simulate_load_coff" = "yes" ; then
	echo "DEFS+=-DSIMULATE_LOADCOFF" >> config.mak
fi
echo "DEFS+=-D_KMOTIONX" >> config.mak

if test "$use_libftdi" = "yes" ; then
  echo "USE_LIB_FTDI=true" >> config.mak
  echo "DEFS+=-DLIB_FTDI" >> config.mak
  echo "#define USE_LIB_FTDI 1" >> $TMPH
fi
echo "FTDILIB=$ftdi_lib" >> config.mak


echo "#define GCC_MAJOR $gcc_major" >> $TMPH
echo "#define GCC_MINOR $gcc_minor" >> $TMPH

if test "$build_java_binding" = "yes" ; then
  echo "BUILD_JNI=true" >> config.mak
  echo "JAVA_HOME=$java_home" >> config.mak
fi

if test "$cpu" = "x86" ; then
  echo "CPU=i386" >> config.mak
  echo "#define HOST_I386 1" >> $TMPH
elif test "$cpu" = "x86-64" ; then
  echo "CPU=x86-64" >> config.mak
  echo "#define HOST_X86_64 1" >> $TMPH
elif test "$cpu" = "armv4l" ; then
  echo "CPU=arm" >> config.mak
  echo "#define HOST_ARM 1" >> $TMPH
  echo "#define TCC_ARM_VERSION $cpuver" >> $TMPH
elif test "$cpu" = "powerpc" ; then
  echo "CPU=ppc" >> config.mak
  echo "#define HOST_PPC 1" >> $TMPH
elif test "$cpu" = "mips" ; then
  echo "CPU=mips" >> config.mak
  echo "#define HOST_MIPS 1" >> $TMPH
elif test "$cpu" = "s390" ; then
  echo "CPU=s390" >> config.mak
  echo "#define HOST_S390 1" >> $TMPH
elif test "$cpu" = "alpha" ; then
  echo "CPU=alpha" >> config.mak
  echo "#define HOST_ALPHA 1" >> $TMPH
else
  echo "Unsupported CPU"
  exit 1
fi

diff $TMPH config.h >/dev/null 2>&1
if test $? -ne 0 ; then
    mv -f $TMPH config.h
else
    echo "config.h is unchanged"
fi

rm -f $TMPN*
