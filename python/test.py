import kmotion
import time


class KMotion(kmotion.KMotion):
    def __init__(self, dev, hostname = None, port = kmotion.KMOTION_PORT, with_console=False):
        if hostname is None:
            super(KMotion, self).__init__(dev)
        else:
            super(KMotion, self).__init__(dev, port, hostname)
        if with_console:
            self.SetConsoleCallback()
    # Overrides of virtual methods in superclass...
    def Console(self, line):
        print "Console:", line,
    def ErrMsg(self, line):
        print "Err:", line
    def ChangedThread(self, threads_active):
        self.threads_active = threads_active
    
    # Extra methods added for Python...
    

k = KMotion(0, "localhost", with_console=True)
        

if True:
    print "FirmwareVersion:", k.FirmwareVersion()

    print k.WriteLineReadLine("version")

    print "Locations:", k.ListLocations()

    # Normally don't use the following (unless very careful to release)
    print "WaitToken:", k._WaitToken(True,100)
    print "ReleaseToken:", k._ReleaseToken()


    print "USBLocation:", k.USBLocation()
    print "CheckForReady:", k.CheckForReady()

def flash(k):
    for i in range(3):
        k.WriteLine("setbit47")
        time.sleep(0.05)
        k.WriteLine("clearbit47")
        time.sleep(0.05)

#flash(k)

cfile = "./test.c"
ofile = "./test.out"
ofile2 = "/home/steve/c:/KMotion432/C Programs/print(1).out"  # Output generated by Windows version, for comparison

print "CheckCoffSize (Wine):", k.CheckCoffSize(ofile2)

#k.SetCustomCompiler(None, False)    # Turn off debug
#k.SetCustomCompiler("tcc67o", True)

rc, err = k.Compile(cfile, ofile, kmotion.BOARD_TYPE_KFLOP, 1, 1000)
print "Compile:", rc, err

if rc == 0:
    print "CheckCoffSize (Linux):", k.CheckCoffSize(ofile)
    #print "CompileAndLoadCoff:", k.CompileAndLoadCoff(cfile, 1)
    print "LoadCoff (Linux):", k.LoadCoff(1, ofile)
    k.WriteLine("execute1")
    time.sleep(1)
    print "GetPersistHex0:", k.WriteLineReadLine("getpersisthex 0")
    print "LoadCoff (Wine):", k.LoadCoff(1, ofile2)
    k.WriteLine("execute1")
    #time.sleep(1)
    k.ServiceConsole()
    k.ServiceConsole()
    k.ServiceConsole()
    k.ServiceConsole()

